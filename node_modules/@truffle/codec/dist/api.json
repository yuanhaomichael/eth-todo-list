{
	"id": 0,
	"name": "Truffle Decoding and Encoding",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "@truffle/codec",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "# Truffle Codec",
				"text": "This module provides low-level decoding and encoding functionality for\nSolidity and the Solidity ABI.  Many parts of this module are intended\nprimarily for internal use by Truffle and so remain largely undocumented,\nbut some of its types are also output by @truffle/decoder, which provides\na higher-level interface to much of this module's functionality.\n\n## If you're here from Truffle Decoder or Truffle Encoder\n\nIf you're coming here from [[@truffle/decoder]] or [[@truffle/encoder]],\nyou probably just want to know about the parts that are relevant to you.\nThese are:\n\n* The \"data\" category (specifically [[Format]])\n* The \"output\" and \"enumerations\" categories ([[CalldataDecoding]], [[LogDecoding]], et al., see below)\n* The \"errors\" category (specifically [[UnknownUserDefinedTypeError]])\n\nNote that the data category is largely scarce in\ndocumentation, although that's because it's largely self-explanatory.\n\nIf you're not just here from Truffle Decoder or Encoder, but are actually\ninterested in the lower-level workings, read on.\n\n## How this module differs from Truffle Decoder and Encoder\n\nUnlike Truffle Decoder and Encoder, this library makes no network connections\nand avoids dependencies that do.  Instead, its decoding functionality\nis generator-based; calling one of the decoding functions returns a\ngenerator.  This generator's `next()` function may return a finished\nresult, or it may return a request for more information.  It is up to\nthe caller to fulfill these requests -- say, by making a network\nconnection of its own.  This is how @truffle/decoder and @truffle/encoder\nwork; @truffle/codec makes requests, while Decoder and Encoder fulfill them by\nlooking up the necessary information on the blockchain.\n\nThis library also provides additional functionality beyond what's used by\nTruffle Decoder and Encoder.  In particular, this library also exists to\nsupport Truffle Debugger, and so it provides decoding functionality not just\nfor transactions, logs, and state variables, but also for Solidity variables\nduring transaction execution, including circularity detection for memroy\nstructures.  It includes functionality for decoding Solidity's internal\nfunction pointers, which the debugger uses, but which Truffle Decoder\ncurrently does not (although this is planned for the future).\n\nThere is also functionality for decoding return values and revert messages\nthat goes beyond what's currently available in @truffle/decoder; this may get\na better interface in the future.\n\n## How to use\n\nYou should probably use [[@truffle/decoder]] or [[@truffle/encoder]]\ninstead, if your use case doesn't preclude it.  This module has little\ndocumentation, where it has any at all, and it's likely that parts of its\ninterface may change (particularly regarding allocation).  That said, if you\ntruly need the functionality here, Truffle Decoder and Truffle Encoder can\nperhaps serve as something of a reference implementation (and perhaps\nTruffle Debugger as well, though that code is much harder to read or copy).\n"
			},
			"originalName": "codec/lib",
			"children": [
				{
					"id": 965,
					"name": "AbiData",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For allocation, encoding, and decoding of locations related to the ABI\n(calldata in Solidity, events, etc.)"
					},
					"children": [
						{
							"id": 966,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1001,
									"name": "Utils",
									"kind": 2,
									"kindString": "Namespace",
									"flags": {},
									"children": [
										{
											"id": 1002,
											"name": "collectAllocationInfo",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/utils.ts",
													"line": 11,
													"character": 37
												}
											],
											"signatures": [
												{
													"id": 1003,
													"name": "collectAllocationInfo",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 1004,
															"name": "compilations",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1594,
																	"name": "Compilations.Compilation"
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "ContextAndAllocationInfo"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												1002
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/utils.ts",
											"line": 1,
											"character": 0
										}
									]
								},
								{
									"id": 1005,
									"name": "AbiAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 42,
											"character": 31
										}
									],
									"indexSignature": {
										"id": 1006,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1007,
												"name": "id",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"name": "AbiAllocation"
												},
												{
													"type": "literal",
													"value": null
												}
											]
										}
									}
								},
								{
									"id": 1008,
									"name": "AbiSizeInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1010,
											"name": "dynamic",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 33,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1009,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 32,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1010,
												1009
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 31,
											"character": 28
										}
									]
								},
								{
									"id": 1040,
									"name": "BlankReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1044,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 196,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 762,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1043,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 195,
													"character": 11
												}
											],
											"type": {
												"type": "tuple"
											}
										},
										{
											"id": 1041,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 193,
													"character": 6
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "selfdestruct"
													},
													{
														"type": "literal",
														"value": "failure"
													}
												]
											}
										},
										{
											"id": 1042,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 194,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1044,
												1043,
												1041,
												1042
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 192,
											"character": 42
										}
									]
								},
								{
									"id": 1011,
									"name": "CalldataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1012,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 97,
													"character": 5
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										},
										{
											"id": 1015,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 100,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 762,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1014,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 99,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "CalldataArgumentAllocation"
												}
											}
										},
										{
											"id": 1013,
											"name": "offset",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 98,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1012,
												1015,
												1014,
												1013
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 96,
											"character": 35
										}
									]
								},
								{
									"id": 1030,
									"name": "ConstructorReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1035,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 189,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 762,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1034,
											"name": "delegatecallGuard",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 188,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1033,
											"name": "immutables",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 187,
													"character": 12
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturnImmutableAllocation"
												}
											}
										},
										{
											"id": 1031,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 185,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "bytecode"
											}
										},
										{
											"id": 1032,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 186,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1035,
												1034,
												1033,
												1031,
												1032
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 184,
											"character": 48
										}
									]
								},
								{
									"id": 1046,
									"name": "ContractAllocationInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1047,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 13,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "Abi"
											}
										},
										{
											"id": 1053,
											"name": "compilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 19,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1052,
											"name": "compiler",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 18,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 1552,
												"name": "CompilerVersion"
											}
										},
										{
											"id": 1050,
											"name": "constructorContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 16,
													"character": 20
												}
											],
											"type": {
												"type": "reference",
												"id": 1663,
												"name": "Context"
											}
										},
										{
											"id": 1048,
											"name": "contractNode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 14,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 1484,
												"name": "AstNode"
											}
										},
										{
											"id": 1049,
											"name": "deployedContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 15,
													"character": 17
												}
											],
											"type": {
												"type": "reference",
												"id": 1663,
												"name": "Context"
											}
										},
										{
											"id": 1051,
											"name": "immutableReferences",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 17,
													"character": 21
												}
											],
											"type": {
												"type": "reference",
												"name": "ImmutableReferences"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1047,
												1053,
												1052,
												1050,
												1048,
												1049,
												1051
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 12,
											"character": 39
										}
									]
								},
								{
									"id": 1054,
									"name": "EventAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1055,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 136,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "EventEntry"
											}
										},
										{
											"id": 1061,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 142,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 762,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1059,
											"name": "anonymous",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 140,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1060,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 141,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "EventArgumentAllocation"
												}
											}
										},
										{
											"id": 1056,
											"name": "contextHash",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 137,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1057,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 138,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											}
										},
										{
											"id": 1058,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 139,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1055,
												1061,
												1059,
												1060,
												1056,
												1057,
												1058
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 135,
											"character": 32
										}
									]
								},
								{
									"id": 1036,
									"name": "MessageReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1039,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 202,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 762,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1037,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 200,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "returnmessage"
											}
										},
										{
											"id": 1038,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 201,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1039,
												1037,
												1038
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 199,
											"character": 44
										}
									]
								},
								{
									"id": 1017,
									"name": "ReturnValueReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1021,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 169,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 762,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1020,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 168,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataArgumentAllocation"
												}
											}
										},
										{
											"id": 1018,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 166,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "return"
											}
										},
										{
											"id": 1019,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 167,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1021,
												1020,
												1018,
												1019
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 165,
											"character": 48
										}
									]
								},
								{
									"id": 1062,
									"name": "ReturndataAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 152,
											"character": 38
										}
									],
									"indexSignature": {
										"id": 1063,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1064,
												"name": "contextHash",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reflection",
											"declaration": {
												"id": 1065,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/abi-data/allocate/types.ts",
														"line": 153,
														"character": 24
													}
												],
												"indexSignature": {
													"id": 1066,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1067,
															"name": "selector",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1022,
															"name": "RevertReturndataAllocation"
														}
													}
												}
											}
										}
									}
								},
								{
									"id": 1022,
									"name": "RevertReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1025,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 175,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "ErrorEntry"
											}
										},
										{
											"id": 1029,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 181,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"id": 762,
												"name": "DecodingMode"
											}
										},
										{
											"id": 1028,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 180,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataArgumentAllocation"
												}
											}
										},
										{
											"id": 1027,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 177,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											}
										},
										{
											"id": 1026,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 176,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1023,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 173,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "revert"
											}
										},
										{
											"id": 1024,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 174,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1025,
												1029,
												1028,
												1027,
												1026,
												1023,
												1024
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 172,
											"character": 43
										}
									]
								},
								{
									"id": 1045,
									"name": "CalldataAndReturndataAllocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 92,
											"character": 43
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionCalldataAndReturndataAllocation"
											},
											{
												"type": "reference",
												"name": "ConstructorCalldataAndReturndataAllocation"
											}
										]
									}
								},
								{
									"id": 1016,
									"name": "ReturndataAllocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 158,
											"character": 32
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 1017,
												"name": "ReturnValueReturndataAllocation"
											},
											{
												"type": "reference",
												"id": 1022,
												"name": "RevertReturndataAllocation"
											},
											{
												"type": "reference",
												"id": 1030,
												"name": "ConstructorReturndataAllocation"
											},
											{
												"type": "reference",
												"id": 1036,
												"name": "MessageReturndataAllocation"
											},
											{
												"type": "reference",
												"id": 1040,
												"name": "BlankReturndataAllocation"
											}
										]
									}
								},
								{
									"id": 1068,
									"name": "FallbackOutputAllocation",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 77,
											"character": 37
										}
									],
									"type": {
										"type": "reference",
										"id": 1036,
										"name": "MessageReturndataAllocation"
									},
									"defaultValue": "..."
								},
								{
									"id": 970,
									"name": "abiSizeInfo",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isProtected": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 334,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 971,
											"name": "abiSizeInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isProtected": true
											},
											"comment": {},
											"parameters": [
												{
													"id": 972,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 973,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1005,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1008,
												"name": "AbiSizeInfo"
											}
										}
									]
								},
								{
									"id": 967,
									"name": "getAbiAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 83,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 968,
											"name": "getAbiAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 969,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1005,
												"name": "AbiAllocations"
											}
										}
									]
								},
								{
									"id": 974,
									"name": "getCalldataAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1028,
											"character": 38
										}
									],
									"signatures": [
										{
											"id": 975,
											"name": "getCalldataAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 976,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1046,
															"name": "ContractAllocationInfo"
														}
													}
												},
												{
													"id": 977,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 978,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 1030,
																	"character": 24
																}
															],
															"indexSignature": {
																"id": 979,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 980,
																		"name": "compilationId",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "reference",
																	"id": 1531,
																	"name": "Ast.AstNodes"
																}
															}
														}
													}
												},
												{
													"id": 981,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												},
												{
													"id": 982,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1005,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataAllocations"
											}
										}
									]
								},
								{
									"id": 992,
									"name": "getEventAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1320,
											"character": 35
										}
									],
									"signatures": [
										{
											"id": 993,
											"name": "getEventAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 994,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1046,
															"name": "ContractAllocationInfo"
														}
													}
												},
												{
													"id": 995,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 996,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 1322,
																	"character": 24
																}
															],
															"indexSignature": {
																"id": 997,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 998,
																		"name": "compilationId",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "reference",
																	"id": 1531,
																	"name": "Ast.AstNodes"
																}
															}
														}
													}
												},
												{
													"id": 999,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												},
												{
													"id": 1000,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1005,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "EventAllocations"
											}
										}
									]
								},
								{
									"id": 983,
									"name": "getReturndataAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1126,
											"character": 40
										}
									],
									"signatures": [
										{
											"id": 984,
											"name": "getReturndataAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 985,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1046,
															"name": "ContractAllocationInfo"
														}
													}
												},
												{
													"id": 986,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 987,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 1128,
																	"character": 24
																}
															],
															"indexSignature": {
																"id": 988,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 989,
																		"name": "compilationId",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "reference",
																	"id": 1531,
																	"name": "Ast.AstNodes"
																}
															}
														}
													}
												},
												{
													"id": 990,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												},
												{
													"id": 991,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1005,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1062,
												"name": "ReturndataAllocations"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Namespaces",
									"kind": 2,
									"children": [
										1001
									]
								},
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1005,
										1008,
										1040,
										1011,
										1030,
										1046,
										1054,
										1036,
										1017,
										1062,
										1022
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										1045,
										1016
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1068
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										970,
										967,
										974,
										992,
										983
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/allocate/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1083,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1084,
									"name": "decodeAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 24,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1085,
											"name": "decodeAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1086,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1087,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1746,
														"name": "Pointer.AbiDataPointer"
													}
												},
												{
													"id": 1088,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1089,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1090,
									"name": "decodeAbiReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 58,
											"character": 44
										}
									],
									"signatures": [
										{
											"id": 1091,
											"name": "decodeAbiReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1092,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 263,
																"name": "Format.Types.ReferenceType"
															},
															{
																"type": "reference",
																"id": 212,
																"name": "Format.Types.TupleType"
															}
														]
													}
												},
												{
													"id": 1093,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1746,
																"name": "Pointer.AbiDataPointer"
															},
															{
																"type": "reference",
																"id": 1744,
																"name": "Pointer.StackFormPointer"
															}
														]
													}
												},
												{
													"id": 1094,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1095,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1096,
									"name": "decodeAbiReferenceStatic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 312,
											"character": 41
										}
									],
									"signatures": [
										{
											"id": 1097,
											"name": "decodeAbiReferenceStatic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1098,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 263,
																"name": "Format.Types.ReferenceType"
															},
															{
																"type": "reference",
																"id": 212,
																"name": "Format.Types.TupleType"
															}
														]
													}
												},
												{
													"id": 1099,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1746,
														"name": "Pointer.AbiDataPointer"
													}
												},
												{
													"id": 1100,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1101,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1084,
										1090,
										1096
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1069,
							"name": "Encode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1070,
									"name": "encodeAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 23,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1071,
											"name": "encodeAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1072,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													}
												},
												{
													"id": 1073,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1005,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1074,
									"name": "encodeTupleAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 131,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1075,
											"name": "encodeTupleAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1076,
													"name": "tuple",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 268,
															"name": "Format.Values.Result"
														}
													}
												},
												{
													"id": 1077,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1005,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1078,
									"name": "encodeTupleAbiWithSelector",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 189,
											"character": 42
										}
									],
									"signatures": [
										{
											"id": 1079,
											"name": "encodeTupleAbiWithSelector",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1080,
													"name": "tuple",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 268,
															"name": "Format.Values.Result"
														}
													}
												},
												{
													"id": 1081,
													"name": "selector",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1082,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1005,
														"name": "AbiAllocations"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1070,
										1074,
										1078
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1070,
												1074,
												1078
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1102,
							"name": "Import",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1103,
									"name": "abiParameterToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/import/index.ts",
											"line": 14,
											"character": 34
										}
									],
									"signatures": [
										{
											"id": 1104,
											"name": "abiParameterToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1105,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Parameter"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Format.Types.Type"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1103
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/import/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1106,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1140,
									"name": "DEFAULT_CONSTRUCTOR_ABI",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 11,
											"character": 36
										}
									],
									"type": {
										"type": "reference",
										"name": "Abi.ConstructorEntry"
									},
									"defaultValue": "..."
								},
								{
									"id": 1137,
									"name": "abiEntryHasStorageParameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 187,
											"character": 44
										}
									],
									"signatures": [
										{
											"id": 1138,
											"name": "abiEntryHasStorageParameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1139,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.Entry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1134,
									"name": "abiEntryIsObviouslyIllTyped",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 143,
											"character": 43
										}
									],
									"signatures": [
										{
											"id": 1135,
											"name": "abiEntryIsObviouslyIllTyped",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1136,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.Entry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1110,
									"name": "abiHasPayableFallback",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 35,
											"character": 37
										}
									],
									"signatures": [
										{
											"id": 1111,
											"name": "abiHasPayableFallback",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1112,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Abi"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1119,
									"name": "abiSelector",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 72,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1120,
											"name": "abiSelector",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1121,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.FunctionEntry"
															},
															{
																"type": "reference",
																"name": "Abi.EventEntry"
															},
															{
																"type": "reference",
																"name": "Abi.ErrorEntry"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1113,
									"name": "abiSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 49,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1114,
											"name": "abiSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1115,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.FunctionEntry"
															},
															{
																"type": "reference",
																"name": "Abi.EventEntry"
															},
															{
																"type": "reference",
																"name": "Abi.ErrorEntry"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1116,
									"name": "abiTupleSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 55,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 1117,
											"name": "abiTupleSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1118,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Abi.Parameter"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1122,
									"name": "abisMatch",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 89,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1123,
											"name": "abisMatch",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1124,
													"name": "entry1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Entry"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1125,
													"name": "entry2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Entry"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1107,
									"name": "computeSelectors",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 18,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1108,
											"name": "computeSelectors",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1109,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Abi"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 1141,
														"name": "FunctionAbiBySelectors"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1126,
									"name": "definitionMatchesAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 121,
											"character": 36
										}
									],
									"signatures": [
										{
											"id": 1127,
											"name": "definitionMatchesAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1128,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.Entry"
													}
												},
												{
													"id": 1129,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "Ast.AstNode"
													}
												},
												{
													"id": 1130,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1531,
														"name": "Ast.AstNodes"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1131,
									"name": "topicsCount",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 136,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1132,
											"name": "topicsCount",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1133,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.EventEntry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1140
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1137,
										1134,
										1110,
										1119,
										1113,
										1116,
										1122,
										1107,
										1126,
										1131
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1141,
							"name": "FunctionAbiBySelectors",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 3,
									"character": 39
								}
							],
							"indexSignature": {
								"id": 1142,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1143,
										"name": "selector",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reference",
									"name": "FunctionEntry"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								966,
								1083,
								1069,
								1102,
								1106
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1141
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/abi-data/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1359,
					"name": "Ast",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1468,
							"name": "Import",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1475,
									"name": "definitionToStoredType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 366,
											"character": 38
										}
									],
									"signatures": [
										{
											"id": 1476,
											"name": "definitionToStoredType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1477,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												},
												{
													"id": 1478,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1479,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1552,
														"name": "Compiler.CompilerVersion"
													}
												},
												{
													"id": 1480,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1531,
														"name": "AstNodes"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 188,
												"name": "Format.Types.UserDefinedType"
											}
										}
									]
								},
								{
									"id": 1469,
									"name": "definitionToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 27,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1470,
											"name": "definitionToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1471,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												},
												{
													"id": 1472,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1473,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1552,
														"name": "Compiler.CompilerVersion"
													}
												},
												{
													"id": 1474,
													"name": "forceLocation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1982,
																"name": "Common.Location"
															},
															{
																"type": "literal",
																"value": null
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Format.Types.Type"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1475,
										1469
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/import/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1360,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1434,
									"name": "baseDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 298,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1435,
											"name": "baseDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1436,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1484,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1415,
									"name": "contractKind",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 213,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1416,
											"name": "contractKind",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "only for contract types, obviously! will yield nonsense otherwise!"
											},
											"parameters": [
												{
													"id": 1417,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1985,
												"name": "Common.ContractKind"
											}
										}
									]
								},
								{
									"id": 1385,
									"name": "decimalPlaces",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 129,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1386,
											"name": "decimalPlaces",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for fixed-point types, obviously"
											},
											"parameters": [
												{
													"id": 1387,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1457,
									"name": "definitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 531,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 1458,
											"name": "definitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "the main function. just does some dispatch.\nreturns undefined on bad input"
											},
											"parameters": [
												{
													"id": 1459,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												},
												{
													"id": 1460,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1531,
														"name": "AstNodes"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Abi.Entry"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1448,
									"name": "functionKind",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 468,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1449,
											"name": "functionKind",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "compatibility function, since pre-0.5.0 functions don't have node.kind\nreturns undefined if you don't put in a function node"
											},
											"parameters": [
												{
													"id": 1450,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1461,
									"name": "getterParameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 804,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1462,
											"name": "getterParameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1463,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												},
												{
													"id": 1464,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1531,
														"name": "AstNodes"
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1465,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1466,
															"name": "inputs",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/utils.ts",
																	"line": 807,
																	"character": 11
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1484,
																	"name": "AstNode"
																}
															}
														},
														{
															"id": 1467,
															"name": "outputs",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/utils.ts",
																	"line": 807,
																	"character": 31
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"id": 1484,
																	"name": "AstNode"
																}
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1466,
																1467
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/ast/utils.ts",
															"line": 807,
															"character": 2
														}
													]
												}
											}
										}
									]
								},
								{
									"id": 1388,
									"name": "isArray",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 136,
											"character": 23
										}
									],
									"signatures": [
										{
											"id": 1389,
											"name": "isArray",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1390,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1454,
									"name": "isContractPayable",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 518,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 1455,
											"name": "isContractPayable",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "takes a contract definition and asks, does it have a payable fallback\nfunction?"
											},
											"parameters": [
												{
													"id": 1456,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1391,
									"name": "isDynamicArray",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 141,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1392,
											"name": "isDynamicArray",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1393,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1406,
									"name": "isEnum",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 186,
											"character": 22
										}
									],
									"signatures": [
										{
											"id": 1407,
											"name": "isEnum",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1408,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1403,
									"name": "isMapping",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 181,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1404,
											"name": "isMapping",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1405,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1409,
									"name": "isReference",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 191,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1410,
											"name": "isReference",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1411,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1421,
									"name": "isSimpleConstant",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 243,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1422,
											"name": "isSimpleConstant",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1423,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1400,
									"name": "isStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 176,
											"character": 24
										}
									],
									"signatures": [
										{
											"id": 1401,
											"name": "isStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1402,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1437,
									"name": "keyDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 330,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1438,
											"name": "keyDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for use for mappings and arrays only!\nfor arrays, fakes up a uint definition"
											},
											"parameters": [
												{
													"id": 1439,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												},
												{
													"id": 1440,
													"name": "scopes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1534,
														"name": "Scopes"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1484,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1451,
									"name": "mutability",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 489,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1452,
											"name": "mutability",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "similar compatibility function for mutability for pre-0.4.16 versions\nreturns undefined if you don't give it a FunctionDefinition or\nVariableDeclaration"
											},
											"parameters": [
												{
													"id": 1453,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 1984,
														"name": "Common.Mutability"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								},
								{
									"id": 1445,
									"name": "parameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 451,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1446,
											"name": "parameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "returns input parameters, then output parameters\nNOTE: ONLY FOR VARIABLE DECLARATIONS OF FUNCTION TYPE\nNOT FOR FUNCTION DEFINITIONS"
											},
											"parameters": [
												{
													"id": 1447,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1484,
															"name": "AstNode"
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1484,
															"name": "AstNode"
														}
													}
												]
											}
										}
									]
								},
								{
									"id": 1431,
									"name": "rationalValue",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 290,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1432,
											"name": "rationalValue",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "extract the actual numerical value from a node of type rational.\ncurrently assumes result will be integer (currently returns BN)"
											},
											"parameters": [
												{
													"id": 1433,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									]
								},
								{
									"id": 1412,
									"name": "referenceType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 203,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1413,
											"name": "referenceType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "note: only use this on things already verified to be references"
											},
											"parameters": [
												{
													"id": 1414,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1982,
												"name": "Common.Location"
											}
										}
									]
								},
								{
									"id": 1428,
									"name": "regularizeTypeIdentifier",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 277,
											"character": 40
										}
									],
									"signatures": [
										{
											"id": 1429,
											"name": "regularizeTypeIdentifier",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "adds \"_ptr\" on to the end of type identifiers that might need it; note that\nthis operates on identifiers, not definitions"
											},
											"parameters": [
												{
													"id": 1430,
													"name": "identifier",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1382,
									"name": "specifiedSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 95,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1383,
											"name": "specifiedSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "e.g. uint48 -> 6",
												"returns": "size in bytes for explicit type size, or `null` if not stated"
											},
											"parameters": [
												{
													"id": 1384,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1424,
									"name": "spliceLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 253,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1425,
											"name": "spliceLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "definition: a storage reference definition\nlocation: the location you want it to refer to instead"
											},
											"parameters": [
												{
													"id": 1426,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												},
												{
													"id": 1427,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1982,
														"name": "Common.Location"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1484,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1418,
									"name": "stackSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 221,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1419,
											"name": "stackSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "stack size, in words, of a given type"
											},
											"parameters": [
												{
													"id": 1420,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1394,
									"name": "staticLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 158,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1395,
											"name": "staticLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "length of a statically sized array -- please only use for arrays\nalready verified to be static!"
											},
											"parameters": [
												{
													"id": 1396,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1397,
									"name": "staticLengthAsString",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 169,
											"character": 36
										}
									],
									"signatures": [
										{
											"id": 1398,
											"name": "staticLengthAsString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "see staticLength for explanation"
											},
											"parameters": [
												{
													"id": 1399,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1370,
									"name": "typeClass",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 43,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1371,
											"name": "typeClass",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "returns basic type class for a variable definition node\ne.g.:\n `t_uint256` becomes `uint`\n `t_struct$_Thing_$20_memory_ptr` becomes `struct`"
											},
											"parameters": [
												{
													"id": 1372,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1373,
									"name": "typeClassLongForm",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 57,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 1374,
											"name": "typeClassLongForm",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "similar to typeClass, but includes any numeric qualifiers\ne.g.:\n`t_uint256` becomes `uint256`"
											},
											"parameters": [
												{
													"id": 1375,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1376,
									"name": "typeId",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 67,
											"character": 22
										}
									],
									"signatures": [
										{
											"id": 1377,
											"name": "typeId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for user-defined types -- structs, enums, contracts\noften you can get these from referencedDeclaration, but not\nalways"
											},
											"parameters": [
												{
													"id": 1378,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								},
								{
									"id": 1361,
									"name": "typeIdentifier",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 12,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1362,
											"name": "typeIdentifier",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1363,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1364,
									"name": "typeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 17,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1365,
											"name": "typeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1366,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1367,
									"name": "typeStringWithoutLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 25,
											"character": 41
										}
									],
									"signatures": [
										{
											"id": 1368,
											"name": "typeStringWithoutLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the type string, but with location (if any) stripped off the end"
											},
											"parameters": [
												{
													"id": 1369,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 1441,
									"name": "valueDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 397,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 1442,
											"name": "valueDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for use for mappings only!"
											},
											"parameters": [
												{
													"id": 1443,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												},
												{
													"id": 1444,
													"name": "scopes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1534,
														"name": "Scopes"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1484,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1379,
									"name": "visibility",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 82,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1380,
											"name": "visibility",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "For function types; returns internal or external\n(not for use on other types! will cause an error!)\nshould only return \"internal\" or \"external\""
											},
											"parameters": [
												{
													"id": 1381,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1484,
														"name": "AstNode"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1983,
												"name": "Common.Visibility"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1434,
										1415,
										1385,
										1457,
										1448,
										1461,
										1388,
										1454,
										1391,
										1406,
										1403,
										1409,
										1421,
										1400,
										1437,
										1451,
										1445,
										1431,
										1412,
										1428,
										1382,
										1424,
										1418,
										1394,
										1397,
										1370,
										1373,
										1376,
										1361,
										1364,
										1367,
										1441,
										1379
									],
									"categories": [
										{
											"title": "Definition Reading",
											"children": [
												1434,
												1415,
												1385,
												1448,
												1388,
												1454,
												1391,
												1406,
												1403,
												1409,
												1421,
												1400,
												1437,
												1451,
												1445,
												1431,
												1412,
												1428,
												1382,
												1424,
												1418,
												1394,
												1397,
												1370,
												1373,
												1376,
												1361,
												1364,
												1367,
												1441,
												1379
											]
										},
										{
											"title": "Other",
											"children": [
												1457,
												1461
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1484,
							"name": "AstNode",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1527,
									"name": "anonymous",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 53,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1494,
									"name": "ast_type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 18,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1522,
									"name": "baseType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 48,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1484,
										"name": "AstNode"
									}
								},
								{
									"id": 1489,
									"name": "canonicalName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 13,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1485,
									"name": "constant",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 9,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1528,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 54,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 1985,
										"name": "ContractKind"
									}
								},
								{
									"id": 1501,
									"name": "expression",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 25,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1502,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1503,
													"name": "referencedDeclaration",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 26,
															"character": 25
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1503
													]
												}
											]
										}
									}
								},
								{
									"id": 1508,
									"name": "hexValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 34,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1487,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 11,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1526,
									"name": "indexed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 52,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1529,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 55,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1523,
									"name": "keyType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 49,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"id": 1484,
										"name": "AstNode"
									}
								},
								{
									"id": 1507,
									"name": "kind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 33,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1490,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 14,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1491,
									"name": "members",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 15,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1484,
											"name": "AstNode"
										}
									}
								},
								{
									"id": 1486,
									"name": "mutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 10,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "mutable"
											},
											{
												"type": "literal",
												"value": "immutable"
											},
											{
												"type": "literal",
												"value": "constant"
											}
										]
									}
								},
								{
									"id": 1488,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 12,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1493,
									"name": "nodeType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 17,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1492,
									"name": "nodes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 16,
											"character": 7
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1484,
											"name": "AstNode"
										}
									}
								},
								{
									"id": 1516,
									"name": "parameterTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 42,
											"character": 16
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1517,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1518,
													"name": "parameters",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 43,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1484,
															"name": "AstNode"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1518
													]
												}
											]
										}
									}
								},
								{
									"id": 1510,
									"name": "parameters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 36,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1511,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1512,
													"name": "parameters",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 37,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1484,
															"name": "AstNode"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1512
													]
												}
											]
										}
									}
								},
								{
									"id": 1525,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 51,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1509,
									"name": "referencedDeclaration",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 35,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1519,
									"name": "returnParameterTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 45,
											"character": 22
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1520,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1521,
													"name": "parameters",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 46,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1484,
															"name": "AstNode"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1521
													]
												}
											]
										}
									}
								},
								{
									"id": 1513,
									"name": "returnParameters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 39,
											"character": 18
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1514,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1515,
													"name": "parameters",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 40,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1484,
															"name": "AstNode"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1515
													]
												}
											]
										}
									}
								},
								{
									"id": 1495,
									"name": "scope",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 19,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1496,
									"name": "src",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 20,
											"character": 5
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1506,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 32,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"id": 1984,
										"name": "Mutability"
									}
								},
								{
									"id": 1497,
									"name": "stateVariable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 21,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1498,
									"name": "storageLocation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 22,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1499,
									"name": "typeDescriptions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 23,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 1481,
										"name": "TypeDescriptions"
									}
								},
								{
									"id": 1500,
									"name": "typeName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 24,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1484,
										"name": "AstNode"
									}
								},
								{
									"id": 1530,
									"name": "usedErrors",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 56,
											"character": 12
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1504,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 28,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1524,
									"name": "valueType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 50,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"id": 1484,
										"name": "AstNode"
									}
								},
								{
									"id": 1505,
									"name": "visibility",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 29,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1527,
										1494,
										1522,
										1489,
										1485,
										1528,
										1501,
										1508,
										1487,
										1526,
										1529,
										1523,
										1507,
										1490,
										1491,
										1486,
										1488,
										1493,
										1492,
										1516,
										1510,
										1525,
										1509,
										1519,
										1513,
										1495,
										1496,
										1506,
										1497,
										1498,
										1499,
										1500,
										1530,
										1504,
										1524,
										1505
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 8,
									"character": 24
								}
							]
						},
						{
							"id": 1531,
							"name": "AstNodes",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 62,
									"character": 25
								}
							],
							"indexSignature": {
								"id": 1532,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1533,
										"name": "nodeId",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								],
								"type": {
									"type": "reference",
									"id": 1484,
									"name": "AstNode"
								}
							}
						},
						{
							"id": 1534,
							"name": "Scopes",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 67,
									"character": 23
								}
							],
							"indexSignature": {
								"id": 1535,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1536,
										"name": "nodeId",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reflection",
									"declaration": {
										"id": 1537,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 1546,
												"name": "definition",
												"kind": 1024,
												"kindString": "Property",
												"flags": {
													"isOptional": true
												},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 77,
														"character": 14
													}
												],
												"type": {
													"type": "reference",
													"id": 1484,
													"name": "AstNode"
												}
											},
											{
												"id": 1538,
												"name": "id",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 69,
														"character": 6
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "number"
												}
											},
											{
												"id": 1540,
												"name": "parentId",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 71,
														"character": 12
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "literal",
															"value": null
														}
													]
												}
											},
											{
												"id": 1541,
												"name": "pointer",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 72,
														"character": 11
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"id": 1539,
												"name": "sourceId",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 70,
														"character": 12
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"id": 1542,
												"name": "variables",
												"kind": 1024,
												"kindString": "Property",
												"flags": {
													"isOptional": true
												},
												"sources": [
													{
														"fileName": "codec/lib/ast/types.ts",
														"line": 73,
														"character": 13
													}
												],
												"type": {
													"type": "array",
													"elementType": {
														"type": "reflection",
														"declaration": {
															"id": 1543,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 1545,
																	"name": "id",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/ast/types.ts",
																			"line": 75,
																			"character": 8
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 1544,
																	"name": "name",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/ast/types.ts",
																			"line": 74,
																			"character": 10
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		1545,
																		1544
																	]
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/ast/types.ts",
																	"line": 73,
																	"character": 15
																}
															]
														}
													}
												}
											}
										],
										"groups": [
											{
												"title": "Properties",
												"kind": 1024,
												"children": [
													1546,
													1538,
													1540,
													1541,
													1539,
													1542
												]
											}
										],
										"sources": [
											{
												"fileName": "codec/lib/ast/types.ts",
												"line": 68,
												"character": 19
											}
										]
									}
								}
							}
						},
						{
							"id": 1481,
							"name": "TypeDescriptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1482,
									"name": "typeIdentifier",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 4,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1483,
									"name": "typeString",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 5,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1482,
										1483
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 3,
									"character": 33
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1468,
								1360
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1484,
								1531,
								1534,
								1481
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/ast/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1348,
					"name": "AstConstant",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For reading/decoding constants expressed as AST nodes"
					},
					"children": [
						{
							"id": 1353,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1354,
									"name": "decodeConstant",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/decode/index.ts",
											"line": 19,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 1355,
											"name": "decodeConstant",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1356,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1357,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1786,
														"name": "Pointer.ConstantDefinitionPointer"
													}
												},
												{
													"id": 1358,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1354
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast-constant/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1349,
							"name": "Read",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1350,
									"name": "readDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/read/index.ts",
											"line": 17,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1351,
											"name": "readDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1352,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1786,
														"name": "Pointer.ConstantDefinitionPointer"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1350
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast-constant/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1353,
								1349
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/ast-constant/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 902,
					"name": "Basic",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "For decoding of primitives and constants"
					},
					"children": [
						{
							"id": 936,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 937,
									"name": "byteLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/allocate/index.ts",
											"line": 9,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 938,
											"name": "byteLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 939,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 940,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										937
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/allocate/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 903,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 925,
									"name": "checkPaddingLeft",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 751,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 926,
											"name": "checkPaddingLeft",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 927,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 928,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 904,
									"name": "decodeBasic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 15,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 905,
											"name": "decodeBasic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 906,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 907,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1743,
														"name": "Pointer.DataPointer"
													}
												},
												{
													"id": 908,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 909,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 910,
									"name": "decodeContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 455,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 911,
											"name": "decodeContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 912,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 913,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 459,
														"name": "Format.Values.ContractValueInfo"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 914,
									"name": "decodeExternalFunction",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 498,
											"character": 39
										}
									],
									"signatures": [
										{
											"id": 915,
											"name": "decodeExternalFunction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 916,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 917,
													"name": "selectorBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 918,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 337,
														"name": "Format.Values.FunctionExternalValueInfo"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 919,
									"name": "decodeInternalFunction",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 537,
											"character": 38
										}
									],
									"signatures": [
										{
											"id": 920,
											"name": "decodeInternalFunction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 921,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 168,
														"name": "Format.Types.FunctionInternalType"
													}
												},
												{
													"id": 922,
													"name": "deployedPcBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 923,
													"name": "constructorPcBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 924,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 351,
												"name": "Format.Values.FunctionInternalResult"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										925,
										904,
										910,
										914,
										919
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 932,
							"name": "Encode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 933,
									"name": "encodeBasic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/basic/encode/index.ts",
											"line": 15,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 934,
											"name": "encodeBasic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Handles encoding of basic types; yes the input type is broader than\nit should be but it's hard to fix this without causing other problems,\nsorry!"
											},
											"parameters": [
												{
													"id": 935,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 269,
														"name": "Format.Values.Value"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										933
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												933
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								936,
								903,
								932
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/basic/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 941,
					"name": "Bytes",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "Contains functions for dealing with raw bytestrings"
					},
					"children": [
						{
							"id": 951,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 952,
									"name": "decodeBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 13,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 953,
											"name": "decodeBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 954,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 119,
																"name": "Format.Types.BytesTypeDynamic"
															},
															{
																"type": "reference",
																"id": 133,
																"name": "Format.Types.StringType"
															}
														]
													}
												},
												{
													"id": 955,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1743,
														"name": "Pointer.DataPointer"
													}
												},
												{
													"id": 956,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 957,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 958,
									"name": "decodeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 56,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 959,
											"name": "decodeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 960,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 427,
												"name": "Format.Values.StringValueInfo"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										952,
										958
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 961,
							"name": "Encode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 962,
									"name": "encodeBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/encode/index.ts",
											"line": 13,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 963,
											"name": "encodeBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Encodes without padding, length, etc!"
											},
											"parameters": [
												{
													"id": 964,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 410,
																"name": "Format.Values.BytesDynamicValue"
															},
															{
																"type": "reference",
																"id": 423,
																"name": "Format.Values.StringValue"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										962
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												962
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 942,
							"name": "Read",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 947,
									"name": "readBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/read/index.ts",
											"line": 20,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 948,
											"name": "readBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 949,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1747,
														"name": "Pointer.BytesPointer"
													}
												},
												{
													"id": 950,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1819,
														"name": "Evm.EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								},
								{
									"id": 943,
									"name": "readCode",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/bytes/read/index.ts",
											"line": 6,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 944,
											"name": "readCode",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 945,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1776,
														"name": "Pointer.CodePointer"
													}
												},
												{
													"id": 946,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1819,
														"name": "Evm.EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										947,
										943
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								951,
								961,
								942
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/bytes/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1556,
					"name": "Compilations",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1557,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1582,
									"name": "collectUserDefinedTypesAndTaggedOutputs",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 467,
											"character": 55
										}
									],
									"signatures": [
										{
											"id": 1583,
											"name": "collectUserDefinedTypesAndTaggedOutputs",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "collects user defined types & tagged outputs for a given set of compilations,\nreturning both the definition nodes and (for the types) the type objects",
												"text": "\"Tagged outputs\" means user-defined things that are output by a contract\n(not input to a contract), and which are distinguished by (potentially\nambiguous) selectors.  So, events and custom errors are tagged outputs.\nFunction arguments are not tagged outputs (they're not outputs).\nReturn values are not tagged outputs (they don't have a selector).\nBuilt-in errors (Error(string) and Panic(uint))... OK I guess those could\nbe considered tagged outputs, but we're only looking at user-defined ones\nhere.\n"
											},
											"parameters": [
												{
													"id": 1584,
													"name": "compilations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1594,
															"name": "Compilation"
														}
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1585,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 1586,
															"name": "definitions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/compilations/utils.ts",
																	"line": 470,
																	"character": 13
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 1587,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/compilations/utils.ts",
																			"line": 470,
																			"character": 14
																		}
																	],
																	"indexSignature": {
																		"id": 1588,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 1589,
																				"name": "compilationId",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "reference",
																			"id": 1531,
																			"name": "AstNodes"
																		}
																	}
																}
															}
														},
														{
															"id": 1590,
															"name": "types",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/compilations/utils.ts",
																	"line": 471,
																	"character": 7
																}
															],
															"type": {
																"type": "reference",
																"id": 264,
																"name": "Format.Types.TypesById"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1586,
																1590
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/compilations/utils.ts",
															"line": 469,
															"character": 2
														}
													]
												}
											}
										}
									]
								},
								{
									"id": 1575,
									"name": "getContractNode",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 250,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 1576,
											"name": "getContractNode",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1577,
													"name": "contract",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1607,
														"name": "Contract"
													}
												},
												{
													"id": 1578,
													"name": "compilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1594,
														"name": "Compilation"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1484,
												"name": "AstNode"
											}
										}
									]
								},
								{
									"id": 1591,
									"name": "infoToCompilations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 536,
											"character": 34
										}
									],
									"signatures": [
										{
											"id": 1592,
											"name": "infoToCompilations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1593,
													"name": "projectInfo",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1629,
																"name": "ProjectInfo"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1594,
													"name": "Compilation"
												}
											}
										}
									]
								},
								{
									"id": 1566,
									"name": "shimArtifacts",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 54,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1567,
											"name": "shimArtifacts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "wrapper around shimContracts that just returns\nthe result in a one-element array (keeping the old name\nshimArtifacts for compatibility)"
											},
											"parameters": [
												{
													"id": 1568,
													"name": "artifacts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Artifact"
																},
																{
																	"type": "reference",
																	"name": "Common.CompiledContract"
																}
															]
														}
													}
												},
												{
													"id": 1569,
													"name": "files",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												},
												{
													"id": 1570,
													"name": "shimmedCompilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "\"shimmedcompilation\""
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1594,
													"name": "Compilation"
												}
											}
										}
									]
								},
								{
									"id": 1562,
									"name": "shimCompilation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 34,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 1563,
											"name": "shimCompilation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1564,
													"name": "inputCompilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Common.Compilation"
													}
												},
												{
													"id": 1565,
													"name": "shimmedCompilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "\"shimmedcompilation\""
												}
											],
											"type": {
												"type": "reference",
												"id": 1594,
												"name": "Compilation"
											}
										}
									]
								},
								{
									"id": 1558,
									"name": "shimCompilations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 22,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1559,
											"name": "shimCompilations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1560,
													"name": "inputCompilations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Common.Compilation"
														}
													}
												},
												{
													"id": 1561,
													"name": "shimmedCompilationIdPrefix",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "\"shimmedcompilation\""
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1594,
													"name": "Compilation"
												}
											}
										}
									]
								},
								{
									"id": 1571,
									"name": "shimContracts",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 77,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1572,
											"name": "shimContracts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "shims a bunch of contracts (\"artifacts\", though not necessarily)\nto a compilation.  usually used via one of the above functions.\nNote: if you pass in options.sources, options.files will be ignored.\nNote: if you pass in options.sources, sources will not have\ncompiler set unless you also pass in options.compiler; in this case\nyou should set that up separately, as in shimCompilation()."
											},
											"parameters": [
												{
													"id": 1573,
													"name": "artifacts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Artifact"
																},
																{
																	"type": "reference",
																	"name": "Common.CompiledContract"
																}
															]
														}
													}
												},
												{
													"id": 1574,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilationOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"id": 1594,
												"name": "Compilation"
											}
										}
									]
								},
								{
									"id": 1579,
									"name": "simpleShimSourceMap",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 438,
											"character": 35
										}
									],
									"signatures": [
										{
											"id": 1580,
											"name": "simpleShimSourceMap",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "convert Vyper source maps to solidity ones\n(note we won't bother handling the case where the compressed\nversion doesn't exist; that will have to wait for a later version)"
											},
											"parameters": [
												{
													"id": 1581,
													"name": "sourceMap",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"id": 1619,
																"name": "VyperSourceMap"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1582,
										1575,
										1591,
										1566,
										1562,
										1558,
										1571,
										1579
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1594,
							"name": "Compilation",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "An individual compilation."
							},
							"children": [
								{
									"id": 1599,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The compiler used in the compilation.  For internal compatibility\npurposes, this may technically be left out if the compiler is instead\nspecified on each source and contract, but please don't actually do that."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 45,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1552,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1598,
									"name": "contracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A list of contracts involved in the compilation."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 39,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1607,
											"name": "Contract"
										}
									}
								},
								{
									"id": 1595,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The compilation's ID."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 22,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1597,
									"name": "sources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A list of sources involved in the compilation.  These must be ordered according\nto their compilation indices.  (If there is for some reason a gap in the\ncompilation indices, a corresponding gap must be left in the sources array.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 35,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1600,
											"name": "Source"
										}
									}
								},
								{
									"id": 1596,
									"name": "unreliableSourceOrder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only intended for internal use.  It indicates\nthat the order on the sources should be disregarded and disables functionality\nthat relies on such an order.  (E.g., the debugger will throw an exception if\nthis is set.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 29,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1599,
										1598,
										1595,
										1597,
										1596
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 18,
									"character": 28
								}
							]
						},
						{
							"id": 1607,
							"name": "Contract",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Represents a contract in a compilation."
							},
							"children": [
								{
									"id": 1613,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The contract's ABI."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 114,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "Abi"
									}
								},
								{
									"id": 1609,
									"name": "bytecode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's constructor bytecode; may be given either as a string\nin the old artifacts format, or as a bytecode object in the new\ncompilation format."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 96,
											"character": 10
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Bytecode"
											}
										]
									}
								},
								{
									"id": 1615,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only inteded for internal use.\n(It allows the compiler to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 125,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1552,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1608,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The contract's name."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 90,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1610,
									"name": "deployedBytecode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed bytecode; may be given either as a string\nin the old artifacts format, or as a bytecode object in the new\ncompilation format."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 102,
											"character": 18
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Bytecode"
											}
										]
									}
								},
								{
									"id": 1618,
									"name": "deployedGeneratedSources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed generated sources object as output by Solidity 0.7.2 or later.\nNote that this will be a sparse array."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 139,
											"character": 26
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1600,
											"name": "Source"
										}
									}
								},
								{
									"id": 1612,
									"name": "deployedSourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed source map."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 110,
											"character": 19
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 1619,
												"name": "VyperSourceMap"
											}
										]
									}
								},
								{
									"id": 1617,
									"name": "generatedSources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's generated sources object as output by Solidity 0.7.2 or later.\nNote that this will be a sparse array."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 134,
											"character": 18
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1600,
											"name": "Source"
										}
									}
								},
								{
									"id": 1614,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's immutable references object as output by Solidity 0.6.5\nor later."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 119,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 1616,
									"name": "primarySourceId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the contract's primary source."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 129,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1611,
									"name": "sourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's constructor source map."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 106,
											"character": 11
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"id": 1619,
												"name": "VyperSourceMap"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1613,
										1609,
										1615,
										1608,
										1610,
										1618,
										1612,
										1617,
										1614,
										1616,
										1611
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 86,
									"character": 25
								}
							]
						},
						{
							"id": 1629,
							"name": "ProjectInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "This type represents information about a Truffle project that can be used to\nconstruct and initialize a encoder or decoder for that project.  This\ninformation may be passed in various ways; this type is given here as an\ninterface rather than a union, but note that you only need to include one of\nthese fields.  (The `compilations` field will be used if present, then\n`commonCompilations` if not, then finally `artifacts`.)",
								"text": "The old option to use `config` is no longer supported.\n"
							},
							"children": [
								{
									"id": 1632,
									"name": "artifacts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A list of contract artifacts for contracts in the project.\nContract constructor objects may be substituted for artifacts, so if\nyou're not sure which you're dealing with, it's OK."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 183,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ContractObject"
										}
									}
								},
								{
									"id": 1631,
									"name": "commonCompilations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An list of @truffle/compile-common style compilations; this method of\nspecifying a project is mostly intended for internal Truffle use for now,\nbut you can see the documentation of the that type if you want to\nuse it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 177,
											"character": 20
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Compilation"
										}
									}
								},
								{
									"id": 1630,
									"name": "compilations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An list of codec-style compilations; this method of specifying a project\nis mostly intended for internal Truffle use for now, but you can see the\ndocumentation of the Compilation type if you want to use it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 170,
											"character": 14
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1594,
											"name": "Compilation"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1632,
										1631,
										1630
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 164,
									"character": 28
								}
							]
						},
						{
							"id": 1600,
							"name": "Source",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Represents a source in a compilation."
							},
							"children": [
								{
									"id": 1605,
									"name": "ast",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's abstract syntax tree."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 74,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"id": 1484,
										"name": "AstNode"
									}
								},
								{
									"id": 1606,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only inteded for internal use.\n(It allows the compiler to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 80,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1552,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1601,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's ID.  For internal compatibility purposes, this may technically\nbe left out, but please include it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 56,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1604,
									"name": "language",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The language for the source file.  For compatibility purposes, this may technicaly\nbe left out, but please include it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 70,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1603,
									"name": "source",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The source text."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 65,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1602,
									"name": "sourcePath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's file path.  If internal is true, will not be a real file path but\nrather just an arbitrary name."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 61,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1605,
										1606,
										1601,
										1604,
										1603,
										1602
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 51,
									"character": 23
								}
							]
						},
						{
							"id": 1619,
							"name": "VyperSourceMap",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1620,
									"name": "pc_jump_map",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 145,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1621,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 1622,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 1623,
														"name": "pc",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												],
												"type": {
													"type": "union",
													"types": [
														{
															"type": "literal",
															"value": "-"
														},
														{
															"type": "literal",
															"value": "i"
														},
														{
															"type": "literal",
															"value": "o"
														}
													]
												}
											}
										}
									}
								},
								{
									"id": 1624,
									"name": "pc_pos_map",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 148,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1625,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 1626,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 1627,
														"name": "pc",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												],
												"type": {
													"type": "tuple",
													"elements": [
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "intrinsic",
															"name": "number"
														},
														{
															"type": "intrinsic",
															"name": "number"
														}
													]
												}
											}
										}
									}
								},
								{
									"id": 1628,
									"name": "pc_pos_map_compressed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 151,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1620,
										1624,
										1628
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 142,
									"character": 31
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1557
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1594,
								1607,
								1629,
								1600,
								1619
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/compilations/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1547,
					"name": "Compiler",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1548,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1549,
									"name": "solidityFamily",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/compiler/utils.ts",
											"line": 7,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1550,
											"name": "solidityFamily",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1551,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1552,
														"name": "CompilerVersion"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1555,
												"name": "SolidityFamily"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1549
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compiler/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1552,
							"name": "CompilerVersion",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1553,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/types.ts",
											"line": 2,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1554,
									"name": "version",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/types.ts",
											"line": 3,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1553,
										1554
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compiler/types.ts",
									"line": 1,
									"character": 32
								}
							]
						},
						{
							"id": 1555,
							"name": "SolidityFamily",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/compiler/types.ts",
									"line": 11,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "unknown"
									},
									{
										"type": "literal",
										"value": "pre-0.5.0"
									},
									{
										"type": "literal",
										"value": "0.5.x"
									},
									{
										"type": "literal",
										"value": "0.8.x"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1548
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1552
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1555
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/compiler/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1633,
					"name": "Contexts",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1634,
							"name": "Import",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1635,
									"name": "contextToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/import/index.ts",
											"line": 4,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1636,
											"name": "contextToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1637,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1663,
														"name": "Context"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 231,
												"name": "Format.Types.ContractType"
											}
										}
									]
								},
								{
									"id": 1638,
									"name": "makeTypeId",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/import/index.ts",
											"line": 29,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1639,
											"name": "makeTypeId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1640,
													"name": "astId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1641,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1635,
										1638
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/import/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1642,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1643,
									"name": "findContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 17,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1644,
											"name": "findContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1645,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1660,
														"name": "Contexts"
													}
												},
												{
													"id": 1646,
													"name": "binary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 1663,
														"name": "Context"
													},
													{
														"type": "literal",
														"value": null
													}
												]
											}
										}
									]
								},
								{
									"id": 1654,
									"name": "makeContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 336,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1655,
											"name": "makeContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1656,
													"name": "contract",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1607,
														"name": "Compilations.Contract"
													}
												},
												{
													"id": 1657,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1484,
																"name": "Ast.AstNode"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1658,
													"name": "compilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1594,
														"name": "Compilations.Compilation"
													}
												},
												{
													"id": 1659,
													"name": "isConstructor",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"defaultValue": "false"
												}
											],
											"type": {
												"type": "reference",
												"id": 1663,
												"name": "Context"
											}
										}
									]
								},
								{
									"id": 1647,
									"name": "matchContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 44,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1648,
											"name": "matchContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1649,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1663,
														"name": "Context"
													}
												},
												{
													"id": 1650,
													"name": "givenBinary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1651,
									"name": "normalizeContexts",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 73,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 1652,
											"name": "normalizeContexts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1653,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1660,
														"name": "Contexts"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1660,
												"name": "Contexts"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1643,
										1654,
										1647,
										1651
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1663,
							"name": "Context",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1672,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 24,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"id": 1141,
										"name": "FunctionAbiBySelectors"
									}
								},
								{
									"id": 1665,
									"name": "binary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 15,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1679,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 32,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1678,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 31,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1552,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1664,
									"name": "context",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 14,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1669,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 21,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1671,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 23,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 1985,
										"name": "ContractKind"
									}
								},
								{
									"id": 1668,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 20,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1674,
									"name": "fallbackAbi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 26,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1675,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1676,
													"name": "fallback",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/contexts/types.ts",
															"line": 28,
															"character": 12
														}
													],
													"type": {
														"type": "reference",
														"name": "FallbackEntry"
													}
												},
												{
													"id": 1677,
													"name": "receive",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/contexts/types.ts",
															"line": 29,
															"character": 11
														}
													],
													"type": {
														"type": "reference",
														"name": "ReceiveEntry"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1676,
														1677
													]
												}
											]
										}
									}
								},
								{
									"id": 1667,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 19,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 1666,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 18,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1670,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 22,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1673,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 25,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1672,
										1665,
										1679,
										1678,
										1664,
										1669,
										1671,
										1668,
										1674,
										1667,
										1666,
										1670,
										1673
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 13,
									"character": 24
								}
							]
						},
						{
							"id": 1660,
							"name": "Contexts",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 9,
									"character": 25
								}
							],
							"indexSignature": {
								"id": 1661,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1662,
										"name": "context",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reference",
									"id": 1663,
									"name": "Context"
								}
							}
						},
						{
							"id": 1680,
							"name": "ContractAndContexts",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1681,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 36,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1685,
									"name": "constructorContext",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 40,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"id": 1663,
										"name": "Context"
									}
								},
								{
									"id": 1682,
									"name": "contract",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 37,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1607,
										"name": "Contract"
									}
								},
								{
									"id": 1684,
									"name": "deployedContext",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 39,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"id": 1663,
										"name": "Context"
									}
								},
								{
									"id": 1683,
									"name": "node",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 38,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"id": 1484,
										"name": "AstNode"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1681,
										1685,
										1682,
										1684,
										1683
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 35,
									"character": 36
								}
							]
						},
						{
							"id": 1686,
							"name": "DebuggerContext",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1695,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 56,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "Abi"
									}
								},
								{
									"id": 1688,
									"name": "binary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 47,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1699,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 60,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1698,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 59,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1552,
										"name": "CompilerVersion"
									}
								},
								{
									"id": 1687,
									"name": "context",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 46,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1692,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 53,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1694,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 55,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 1985,
										"name": "ContractKind"
									}
								},
								{
									"id": 1691,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 52,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1690,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 51,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 1689,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 50,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1693,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 54,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1700,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 61,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1697,
									"name": "primarySource",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 58,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1696,
									"name": "sourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 57,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1695,
										1688,
										1699,
										1698,
										1687,
										1692,
										1694,
										1691,
										1690,
										1689,
										1693,
										1700,
										1697,
										1696
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 45,
									"character": 32
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1634,
								1642
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1663,
								1660,
								1680,
								1686
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/contexts/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1701,
					"name": "Conversion",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1739,
							"name": "cleanBool",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 219,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 1740,
									"name": "cleanBool",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1741,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 270,
												"name": "Format.Values.ElementaryResult"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 270,
										"name": "Format.Values.ElementaryResult"
									}
								}
							]
						},
						{
							"id": 1736,
							"name": "countDecimalPlaces",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 211,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 1737,
									"name": "countDecimalPlaces",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1738,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						},
						{
							"id": 1705,
							"name": "isBig",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 39,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 1706,
									"name": "isBig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1707,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "input",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"name": "Big"
										}
									}
								}
							]
						},
						{
							"id": 1732,
							"name": "shiftBigDown",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 205,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 1733,
									"name": "shiftBigDown",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1734,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										},
										{
											"id": 1735,
											"name": "decimalPlaces",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							]
						},
						{
							"id": 1728,
							"name": "shiftBigUp",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 198,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1729,
									"name": "shiftBigUp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1730,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										},
										{
											"id": 1731,
											"name": "decimalPlaces",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							]
						},
						{
							"id": 1725,
							"name": "stringToBytes",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 186,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 1726,
									"name": "stringToBytes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1727,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							]
						},
						{
							"id": 1702,
							"name": "toBN",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 13,
									"character": 20
								}
							],
							"signatures": [
								{
									"id": 1703,
									"name": "toBN",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 1704,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "undefined | string | number | BN | Uint8Array | Big"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Big"
													},
													{
														"type": "intrinsic",
														"name": "bigint"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									}
								}
							]
						},
						{
							"id": 1714,
							"name": "toBig",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 81,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 1715,
									"name": "toBig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1716,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "bigint"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							]
						},
						{
							"id": 1711,
							"name": "toBigInt",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 73,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 1712,
									"name": "toBigInt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1713,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BigInt"
									}
								}
							]
						},
						{
							"id": 1721,
							"name": "toBytes",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 125,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 1722,
									"name": "toBytes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1723,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "Big"
													},
													{
														"type": "intrinsic",
														"name": "bigint"
													}
												]
											}
										},
										{
											"id": 1724,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							]
						},
						{
							"id": 1717,
							"name": "toHexString",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 92,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 1718,
									"name": "toHexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 1719,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Uint8Array | BN"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "BN"
													}
												]
											}
										},
										{
											"id": 1720,
											"name": "padLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "number - minimum desired byte length (left-pad with zeroes)"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 1708,
							"name": "toSignedBN",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 62,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 1709,
									"name": "toSignedBN",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 1710,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Uint8Array"
											},
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1739,
								1736,
								1705,
								1732,
								1728,
								1725,
								1702,
								1714,
								1711,
								1721,
								1717,
								1708
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/conversion.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1794,
					"name": "Evm",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1812,
							"name": "Import",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1813,
									"name": "functionTableEntryToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/import/index.ts",
											"line": 6,
											"character": 40
										}
									],
									"signatures": [
										{
											"id": 1814,
											"name": "functionTableEntryToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1815,
													"name": "functionEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1854,
														"name": "InternalFunction"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 232,
												"name": "Format.Types.ContractTypeNative"
											}
										}
									]
								},
								{
									"id": 1816,
									"name": "makeInternalFunctionId",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/import/index.ts",
											"line": 23,
											"character": 38
										}
									],
									"signatures": [
										{
											"id": 1817,
											"name": "makeInternalFunctionId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1818,
													"name": "functionEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1854,
														"name": "InternalFunction"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1813,
										1816
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/import/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1795,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1807,
									"name": "ADDRESS_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 10,
											"character": 25
										}
									],
									"type": {
										"type": "literal",
										"value": 20
									},
									"defaultValue": "20"
								},
								{
									"id": 1810,
									"name": "MAX_WORD",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 13,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									},
									"defaultValue": "..."
								},
								{
									"id": 1809,
									"name": "PC_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 12,
											"character": 20
										}
									],
									"type": {
										"type": "literal",
										"value": 4
									},
									"defaultValue": "4"
								},
								{
									"id": 1808,
									"name": "SELECTOR_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 11,
											"character": 26
										}
									],
									"type": {
										"type": "literal",
										"value": 4
									},
									"defaultValue": "4"
								},
								{
									"id": 1806,
									"name": "WORD_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 9,
											"character": 22
										}
									],
									"type": {
										"type": "literal",
										"value": 32
									},
									"defaultValue": "0x20"
								},
								{
									"id": 1811,
									"name": "ZERO_ADDRESS",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 14,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "..."
								},
								{
									"id": 1799,
									"name": "equalData",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 38,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1800,
											"name": "equalData",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1801,
													"name": "bytes1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1802,
													"name": "bytes2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1796,
									"name": "keccak256",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 22,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1797,
											"name": "keccak256",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1798,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									]
								},
								{
									"id": 1803,
									"name": "toAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 56,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1804,
											"name": "toAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1805,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1807,
										1810,
										1809,
										1808,
										1806,
										1811
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1799,
										1796,
										1803
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1843,
							"name": "AllocationInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1846,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 49,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"id": 1005,
										"name": "AbiAllocations"
									}
								},
								{
									"id": 1847,
									"name": "calldata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 50,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataAllocations"
									}
								},
								{
									"id": 1849,
									"name": "event",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 52,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "EventAllocations"
									}
								},
								{
									"id": 1845,
									"name": "memory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 48,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"id": 1177,
										"name": "MemoryAllocations"
									}
								},
								{
									"id": 1848,
									"name": "returndata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 51,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1062,
										"name": "ReturndataAllocations"
									}
								},
								{
									"id": 1850,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 53,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"id": 1284,
										"name": "StateAllocations"
									}
								},
								{
									"id": 1844,
									"name": "storage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 47,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"id": 1275,
										"name": "StorageAllocations"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1846,
										1847,
										1849,
										1845,
										1848,
										1850,
										1844
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 46,
									"character": 31
								}
							]
						},
						{
							"id": 1835,
							"name": "EvmInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1839,
									"name": "allocations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 40,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"id": 1843,
										"name": "AllocationInfo"
									}
								},
								{
									"id": 1840,
									"name": "contexts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 41,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 1660,
										"name": "Contexts"
									}
								},
								{
									"id": 1841,
									"name": "currentContext",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 42,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"id": 1663,
										"name": "Context"
									}
								},
								{
									"id": 1842,
									"name": "internalFunctionsTable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 43,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"id": 1851,
										"name": "InternalFunctions"
									}
								},
								{
									"id": 1837,
									"name": "mappingKeys",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 38,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1343,
											"name": "Slot"
										}
									}
								},
								{
									"id": 1836,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 37,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"id": 1819,
										"name": "EvmState"
									}
								},
								{
									"id": 1838,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 39,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 264,
										"name": "TypesById"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1839,
										1840,
										1841,
										1842,
										1837,
										1836,
										1838
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 36,
									"character": 24
								}
							]
						},
						{
							"id": 1819,
							"name": "EvmState",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1823,
									"name": "calldata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 22,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1824,
									"name": "code",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 23,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1829,
									"name": "eventdata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 27,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1830,
									"name": "eventtopics",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 28,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Uint8Array"
										}
									}
								},
								{
									"id": 1822,
									"name": "memory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 21,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1831,
									"name": "returndata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 29,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1825,
									"name": "specials",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 24,
											"character": 10
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1826,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 1827,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 1828,
														"name": "builtin",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "reference",
													"name": "Uint8Array"
												}
											}
										}
									}
								},
								{
									"id": 1821,
									"name": "stack",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 20,
											"character": 7
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Uint8Array"
										}
									}
								},
								{
									"id": 1820,
									"name": "storage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 19,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"id": 1832,
										"name": "WordMapping"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1823,
										1824,
										1829,
										1830,
										1822,
										1831,
										1825,
										1821,
										1820
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 18,
									"character": 25
								}
							]
						},
						{
							"id": 1854,
							"name": "InternalFunction",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1856,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 62,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1865,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 71,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1866,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 72,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 1985,
										"name": "ContractKind"
									}
								},
								{
									"id": 1864,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 70,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1863,
									"name": "contractNode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 69,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"id": 1484,
										"name": "AstNode"
									}
								},
								{
									"id": 1867,
									"name": "contractPayable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 73,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1862,
									"name": "contractPointer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 68,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1860,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 66,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1868,
									"name": "isDesignatedInvalid",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 74,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1861,
									"name": "mutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 67,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1984,
										"name": "Mutability"
									}
								},
								{
									"id": 1859,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 65,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1858,
									"name": "node",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 64,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"id": 1484,
										"name": "AstNode"
									}
								},
								{
									"id": 1857,
									"name": "pointer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 63,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1855,
									"name": "sourceIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 61,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1856,
										1865,
										1866,
										1864,
										1863,
										1867,
										1862,
										1860,
										1868,
										1861,
										1859,
										1858,
										1857,
										1855
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 60,
									"character": 33
								}
							]
						},
						{
							"id": 1851,
							"name": "InternalFunctions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 56,
									"character": 34
								}
							],
							"indexSignature": {
								"id": 1852,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1853,
										"name": "pc",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								],
								"type": {
									"type": "reference",
									"id": 1854,
									"name": "InternalFunction"
								}
							}
						},
						{
							"id": 1832,
							"name": "WordMapping",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 32,
									"character": 28
								}
							],
							"indexSignature": {
								"id": 1833,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1834,
										"name": "slotAddress",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reference",
									"name": "Uint8Array"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1812,
								1795
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1843,
								1835,
								1819,
								1854,
								1851,
								1832
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/evm/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1869,
					"name": "Export",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1884,
							"name": "NativizeOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "Options for the nativize function."
							},
							"children": [
								{
									"id": 1886,
									"name": "format",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The format for the nativized result.  Currently the only supported\nformat is \"ethers\", which nativizes things in a way compatible with how\nEthers decodes values.  This format is quite limited, but more may be\nadded in the future.  There is also the separate function\n[[Format.Utils.Inspect.unsafeNativize|unsafeNativize]], although that is,\nas noted, unsafe."
									},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 42,
											"character": 8
										}
									],
									"type": {
										"type": "literal",
										"value": "ethers"
									}
								},
								{
									"id": 1885,
									"name": "numberFormatter",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "This is a function that is used to describe how to format\ninteger values.  It should take as input the number as a BigInt.\nBy default, it's the identity function (i.e., it formats the numbers\nas BigInts), but by setting it you could instead format numbers as\na BN, BigNumber, string, etc."
									},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 33,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "NumberFormatter"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1886,
										1885
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 25,
									"character": 32
								}
							]
						},
						{
							"id": 1870,
							"name": "nativize",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 74,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 1871,
									"name": "nativize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function is similar to\n[[Format.Utils.Inspect.unsafeNativize|unsafeNativize]], but is intended to\nbe safe, and also allows for different output formats.  The only currently\nsupported format is \"ethers\", which is intended to match the way that\nTruffle Contract currently returns values (based on the Ethers decoder).  As\nsuch, it only handles ABI types, and in addition does not handle the types\nfixed, ufixed, or function.  Note that in these cases it returns `undefined`\nrather than throwing, as we want this function to be used in contexts where\nit had better not throw.  It also does not handle circularities, for similar\nreasons.",
										"text": "To handle numeric types, this function takes an optional numberFormatter\noption that tells it how to handle numbers; this function should take a\nBigInt as input.  By default, this function will be the identity, and so\nnumbers will be represented as BigInts.\n\nNote that this function begins by calling abify, so out-of-range enums (that\naren't so out-of-range as to be padding errors) will not return `undefined`.\nOut-of-range booleans similarly will return true rather than `undefined`.\nHowever, other range errors may return `undefined`; this may technically be a\nslight incompatibility with existing behavior, but should not be relevant\nexcept in quite unusual cases.\n\nIn order to match the behavior for tuples, tuples will be transformed into\narrays, but named entries will additionally be keyed by name.  Moreover,\nindexed variables of reference type will be nativized to an undecoded hex\nstring.\n"
									},
									"parameters": [
										{
											"id": 1872,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 268,
												"name": "Format.Values.Result"
											}
										},
										{
											"id": 1873,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1884,
												"name": "NativizeOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1878,
							"name": "nativizeEventArgs",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 233,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 1879,
									"name": "nativizeEventArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function is similar to [[compatibleNativize]], but takes\na [[LogDecoding]], and puts the results in an object.  Note\nthat this does not return the entire event info, but just the\n`args` for the event."
									},
									"parameters": [
										{
											"id": 1880,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 764,
												"name": "LogDecoding"
											}
										},
										{
											"id": 1881,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1884,
												"name": "NativizeOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 1874,
							"name": "nativizeReturn",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 187,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 1875,
									"name": "nativizeReturn",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function is similar to [[nativize]], but takes\na [[ReturndataDecoding]].  If there's only one returned value, it\nwill be run through compatibleNativize but otherwise unaltered;\notherwise the results will be put in an object.",
										"text": "Note that if the ReturndataDecoding is not a [[ReturnDecoding]],\nthis will just return `undefined`.\n"
									},
									"parameters": [
										{
											"id": 1876,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 765,
												"name": "ReturndataDecoding"
											}
										},
										{
											"id": 1877,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1884,
												"name": "NativizeOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1884
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1870,
								1878,
								1874
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/export.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 79,
					"name": "Format",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "# Codec Output Format",
						"text": "## Module information\n\nThis module primarily defines TypeScript types for the output format\nused in results provided by packages\n`@truffle/decoder@^4.0.0` and `@truffle/codec@^0.1.0`.\n\nSee below for complete listing or continue reading\n[Format information](#format-information) to learn about this format.\n\n### How to import\n\nImport either as part of Codec or by itself:\n\n```typescript\n// when importing entire Codec, use Codec.Format.*:\nimport * as Codec from \"@truffle/codec\";\n\n// or import Format directly:\nimport { Format } from \"@truffle/codec\";\n```\n\n![Example struct decoding](media://example-struct-decoding.png)\n\n## Format information\n\nThis format is intended for use in smart contract and dapp development\ntools and libraries, and for use in display contexts, such as when\nbuilding on-screen components to show transaction and smart contract\nstate information.\n\nThis format seeks to provide an exhaustive schema for JavaScript\nobjects to encode **lossless**, **machine-readable** representations of\nall possible Solidity and ABI data types and all possible values of those\ntypes.\n\nThis format targets types and values understood by the\n[Solidity programming language](https://solidity.readthedocs.io) and\nthe [Contract ABI specification](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html),\nwithin the context of the [Ethereum Virtual Machine](https://ethereum.github.io/yellowpaper/paper.pdf)\n(EVM) and in raw data for transactions and logs according to the\n[Ethereum JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC).\n\nObjects in this format may be deeply nested and/or contain circular\ndependencies. As such, **do not** serialize objects in this format or\notherwise attempt to display them in full without considering potential\nrisk. **Objects in this format are for the machine to read, not humans!**\nThis module provides utilities for inspecting objects in this format,\nincluding the **safe** [[Format.Utils.Inspect.ResultInspector]] wrapper\n(for [util.inspect](https://nodejs.org/api/util.html#util_util_inspect_object_options)),\nand the **unsafe** [[Format.Utils.Inspect.nativize]] function. For more\ninformation, please see the documentation for those utilities.\n\n### Specification\n\nIndividual decoded values are represented by objects of the type\n[[Format.Values.Result]], which contain the following fields:\n  1. `type`: This is a [[Format.Types.Type|`Type`]] object describing the value's\n    type.  Each `Type` has a `typeClass` field describing the overall broad type,\n    such as `\"uint\"` or `\"bytes\"`, together with additional information that gives\n    the specific type.  For full detail, see [[Format.Types]].\n\n  2. `kind`: This is either `\"value\"`, in which case the `Result` is a\n    [[Format.Values.Value|`Value`]], or `\"error\"`, in which case the `Result` is an\n    [[Format.Errors.ErrorResult|`ErrorResult`]].  In the former case, there will be\n    a `value` field containin the decoded value.  In the latter case, there will be\n    an `error` field indicating what went wrong.  *Warning*: When decoding a\n    complex type, such as an array, mapping, or array, getting a kind of `\"value\"`\n    does not necessarily mean the individual elements were decoded successfully.\n    Even if the `Result` for the array (mapping, struct) as a whole has kind\n    `\"value\"`, the elements might still have kind `\"error\"`.\n\n  3. `value`: As mentioned, this is included when `kind` is equal to `\"value\"`.\n    It contains information about the actual decoded value.  See\n    [[Format.Values|`Format.Values`]] for more information.\n\n  4. `error`: The alternative to `value`.  Generally includes information about\n    the raw data that led to the error.  See [[Format.Errors|`Format.Errors`]] for\n    more information.\n\n  5. `reference`: This field is a debugger-only feature and does not\n     apply to results returned by  @truffle/decoder, so it won't be documented here.\n\n### Values vs. errors\n\nIt's worth taking a moment here to answer the question: What counts as a value,\nand what counts as an error?\n\nIn general, the answer is that anything that can be generated via Solidity\nalone (i.e. no assembly), with correctly-encoded inputs, and without making use\nof compiler bugs, is a value, not an error.  That means that, for instance, the\nfollowing things are values, not errors:\n  - A variable of contract type whose address does not actually hold a\n    contract of that type;\n  - An external function pointer that does not correspond to a valid\n    function;\n  - A string containing invalid UTF-8;\n  - ..., etc.\n\nBy contrast, the following *are* errors:\n  - A `bool` which is neither `false` (0) nor `true` (1);\n  - An `enum` which is out of range;\n  - ..., etc.\n\n(You may be wondering about the enum case here, because if you go sufficiently\nfar back, to Solidity 0.4.4 or earlier, it *was* possible to generate\nout-of-range enums without resorting to assembly or compiler bugs.  However,\nenums are only supported in full mode (see\n[Notes on decoding modes](../#decoding-modes)),\nwhich only supports 0.4.12 and later, so\nwe consider out-of-range enums an error.  There are also additional technical\nreasons why supporting out-of-range enums as a value would be difficult.)\n\nThere are three special cases here that are likely worthy of note.\n\nFirstly, internal function pointers currently can't be meaningfully\ndecoded via @truffle/decoder.  However, they decode to a bare-bones value,\nnot an error, as it is (in a sense) our own fault that we can't decode\nthese, so it doesn't make sense to report an error, which would mean that\nsomething is wrong with the encoded data itself.  This value that it\ndecodes to will give the program counter values it corresponds to, but\nwill not include the function name or defining class, as @truffle/decoder\nis not presently capable of that.  For now, full decoding of internal\nfunction pointers remains a debugger-only feature.  (But limited support for\nthis via @truffle/decoder is planned for the future.)\n\n(When using the debugger, an invalid internal function pointer will decode to an\nerror.  However, when using @truffle/decoder, we have no way of discerning whether\nthe pointer is valid or not, so internal function pointers will always decode to\na value, if an uninformative one.)\n\nSecondly, when decoding events, it is impossible to decode indexed parameters\nof reference type.  Thus, these decode to an error\n(`IndexedReferenceTypeError`, which see) rather than to a value.\n\nThirdly, the decoder is currently limited when it comes to decoding state\nvariables that are declared constant, and not all such variables are yet\nsupported in decoding; attempting to decode one of these that is not currently\nsupported will yield an error.\n\nSimilarly, there are various things that decode to errors for technical reasons.\nObjects with encoded length fields larger than what fits in a JavaScript safe\ninteger, or pointed to by pointers with values larger than what fits in a\nJavaScript safe integer, will decode to errors, even if they may technically be\nlegal.  Such cases are impractical to handle and should never come up in real\nuse so we decode them to errors.  Errors may also be returned in case of an\nerror in attempting to read the data to be decoded.\n\nFinally, except when decoding events, we do not return an error if the pointers\nin an ABI-encoded array or tuple are arranged in a nonstandard way, or if\nstrings or bytestrings are incorrectly padded, because it is not worth the\ntrouble to detect these conditions.\n\n\n## Notes on this documentation\n\nMost of this doesn't have explanatory documentation\nbecause it's largely self-explanatory, but particularly\nnon-obvious parts have been documented for clarity.\n\nA note on optional fields: A number of types or values\nhave optional fields.  These contain helpful\nbut non-essential information, or information which\nfor technical reasons we can't guarantee we can determine.\n"
					},
					"children": [
						{
							"id": 469,
							"name": "Errors",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Contains the types for error and `ErrorResult` objects."
							},
							"children": [
								{
									"id": 518,
									"name": "AddressErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an address"
									},
									"children": [
										{
											"id": 521,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 263,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 523,
														"name": "AddressPaddingError"
													}
												]
											}
										},
										{
											"id": 520,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 262,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 519,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 261,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 124,
												"name": "AddressType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												521,
												520,
												519
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 260,
											"character": 35
										}
									]
								},
								{
									"id": 523,
									"name": "AddressPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an address (note padding is not always checked)"
									},
									"children": [
										{
											"id": 525,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 283,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "AddressPaddingError"
											}
										},
										{
											"id": 526,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 284,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1987,
												"name": "PaddingType"
											}
										},
										{
											"id": 524,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string; no checksum"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 282,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												525,
												526,
												524
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 278,
											"character": 36
										}
									]
								},
								{
									"id": 577,
									"name": "ArrayErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an array"
									},
									"children": [
										{
											"id": 580,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 474,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 678,
														"name": "OverlongArraysAndStringsNotImplementedError"
													},
													{
														"type": "reference",
														"id": 682,
														"name": "OverlargePointersNotImplementedError"
													}
												]
											}
										},
										{
											"id": 579,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 473,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 578,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 472,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 147,
												"name": "ArrayType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												580,
												579,
												578
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 471,
											"character": 33
										}
									]
								},
								{
									"id": 492,
									"name": "BoolErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a boolean"
									},
									"children": [
										{
											"id": 495,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 171,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 497,
														"name": "BoolOutOfRangeError"
													},
													{
														"type": "reference",
														"id": 500,
														"name": "BoolPaddingError"
													}
												]
											}
										},
										{
											"id": 494,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 170,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 493,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 169,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 110,
												"name": "BoolType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												495,
												494,
												493
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 168,
											"character": 32
										}
									]
								},
								{
									"id": 497,
									"name": "BoolOutOfRangeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "The bool is neither 0 nor 1"
									},
									"children": [
										{
											"id": 499,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 188,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "BoolOutOfRangeError"
											}
										},
										{
											"id": 498,
											"name": "rawAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 187,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												499,
												498
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 186,
											"character": 36
										}
									]
								},
								{
									"id": 500,
									"name": "BoolPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for a boolean"
									},
									"children": [
										{
											"id": 502,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 201,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "BoolPaddingError"
											}
										},
										{
											"id": 503,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 202,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1987,
												"name": "PaddingType"
											}
										},
										{
											"id": 501,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 200,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												502,
												503,
												501
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 196,
											"character": 33
										}
									]
								},
								{
									"id": 513,
									"name": "BytesDynamicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a dynamic-length bytestring"
									},
									"children": [
										{
											"id": 516,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 245,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 678,
														"name": "OverlongArraysAndStringsNotImplementedError"
													},
													{
														"type": "reference",
														"id": 682,
														"name": "OverlargePointersNotImplementedError"
													}
												]
											}
										},
										{
											"id": 515,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 244,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 514,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 243,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 119,
												"name": "BytesTypeDynamic"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												516,
												515,
												514
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 242,
											"character": 40
										}
									]
								},
								{
									"id": 509,
									"name": "BytesPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for a static-length bytestring (note padding is not always checked)"
									},
									"children": [
										{
											"id": 511,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 233,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "BytesPaddingError"
											}
										},
										{
											"id": 512,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 234,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1987,
												"name": "PaddingType"
											}
										},
										{
											"id": 510,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 232,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												511,
												512,
												510
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 228,
											"character": 34
										}
									]
								},
								{
									"id": 504,
									"name": "BytesStaticErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a static-length bytestring"
									},
									"children": [
										{
											"id": 507,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 213,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 509,
														"name": "BytesPaddingError"
													}
												]
											}
										},
										{
											"id": 506,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 212,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 505,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 211,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 114,
												"name": "BytesTypeStatic"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												507,
												506,
												505
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 210,
											"character": 39
										}
									]
								},
								{
									"id": 568,
									"name": "ContractErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a contract"
									},
									"children": [
										{
											"id": 571,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 438,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 573,
														"name": "ContractPaddingError"
													}
												]
											}
										},
										{
											"id": 570,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 437,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 569,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 436,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												571,
												570,
												569
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 435,
											"character": 36
										}
									]
								},
								{
									"id": 573,
									"name": "ContractPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for contract (note padding is not always checked)"
									},
									"children": [
										{
											"id": 575,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 458,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "ContractPaddingError"
											}
										},
										{
											"id": 576,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 459,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1987,
												"name": "PaddingType"
											}
										},
										{
											"id": 574,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 457,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												575,
												576,
												574
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 453,
											"character": 37
										}
									]
								},
								{
									"id": 634,
									"name": "DeployedFunctionInConstructorError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Indicates that this is a deployed-style pointer,\ndespite the fact that you're in a constructor"
									},
									"children": [
										{
											"id": 638,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 694,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 636,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 692,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											}
										},
										{
											"id": 637,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 693,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 635,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 691,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "DeployedFunctionInConstructorError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												638,
												636,
												637,
												635
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 690,
											"character": 51
										}
									]
								},
								{
									"id": 550,
									"name": "EnumErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an enum"
									},
									"children": [
										{
											"id": 553,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 380,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 555,
														"name": "EnumOutOfRangeError"
													},
													{
														"type": "reference",
														"id": 559,
														"name": "EnumPaddingError"
													},
													{
														"type": "reference",
														"id": 564,
														"name": "EnumNotFoundDecodingError"
													}
												]
											}
										},
										{
											"id": 552,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 379,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 551,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 378,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 216,
												"name": "EnumType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												553,
												552,
												551
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 377,
											"character": 32
										}
									]
								},
								{
									"id": 564,
									"name": "EnumNotFoundDecodingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "The enum type definition could not be located"
									},
									"children": [
										{
											"id": 565,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 425,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "EnumNotFoundDecodingError"
											}
										},
										{
											"id": 567,
											"name": "rawAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 427,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 566,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 426,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 216,
												"name": "EnumType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												565,
												567,
												566
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 424,
											"character": 42
										}
									]
								},
								{
									"id": 555,
									"name": "EnumOutOfRangeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "The enum is out of range"
									},
									"children": [
										{
											"id": 556,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 399,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "EnumOutOfRangeError"
											}
										},
										{
											"id": 558,
											"name": "rawAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 401,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 557,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 400,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 216,
												"name": "EnumType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												556,
												558,
												557
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 398,
											"character": 36
										}
									]
								},
								{
									"id": 559,
									"name": "EnumPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an enum"
									},
									"children": [
										{
											"id": 562,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 415,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "EnumPaddingError"
											}
										},
										{
											"id": 563,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 416,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1987,
												"name": "PaddingType"
											}
										},
										{
											"id": 560,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 413,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 561,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 414,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 216,
												"name": "EnumType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												562,
												563,
												560,
												561
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 409,
											"character": 33
										}
									]
								},
								{
									"id": 532,
									"name": "FixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a signed fixed-point number"
									},
									"children": [
										{
											"id": 535,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 313,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 541,
														"name": "FixedPaddingError"
													}
												]
											}
										},
										{
											"id": 534,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 312,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 533,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 311,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 137,
												"name": "FixedType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												535,
												534,
												533
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 310,
											"character": 33
										}
									]
								},
								{
									"id": 541,
									"name": "FixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for a signed fixed-point number (note padding is not always checked)"
									},
									"children": [
										{
											"id": 543,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 343,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "FixedPaddingError"
											}
										},
										{
											"id": 544,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 344,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1987,
												"name": "PaddingType"
											}
										},
										{
											"id": 542,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 342,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												543,
												544,
												542
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 338,
											"character": 34
										}
									]
								},
								{
									"id": 607,
									"name": "FunctionExternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an external function"
									},
									"children": [
										{
											"id": 610,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 587,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 612,
														"name": "FunctionExternalNonStackPaddingError"
													},
													{
														"type": "reference",
														"id": 616,
														"name": "FunctionExternalStackPaddingError"
													}
												]
											}
										},
										{
											"id": 609,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 586,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 608,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 585,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 174,
												"name": "FunctionExternalType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												610,
												609,
												608
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 584,
											"character": 44
										}
									]
								},
								{
									"id": 612,
									"name": "FunctionExternalNonStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This error kind represents a padding error for an external function pointer located anywhere other than the stack."
									},
									"children": [
										{
											"id": 614,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 609,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "FunctionExternalNonStackPaddingError"
											}
										},
										{
											"id": 615,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 610,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1987,
												"name": "PaddingType"
											}
										},
										{
											"id": 613,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 608,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												614,
												615,
												613
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 604,
											"character": 53
										}
									]
								},
								{
									"id": 616,
									"name": "FunctionExternalStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This error kind represents a padding error for external function pointer located on the stack."
									},
									"children": [
										{
											"id": 619,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 627,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "FunctionExternalStackPaddingError"
											}
										},
										{
											"id": 617,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string (no checksum; also a full word long)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 622,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 618,
											"name": "rawSelector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string (but a full word long)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 626,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												619,
												617,
												618
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 618,
											"character": 50
										}
									]
								},
								{
									"id": 620,
									"name": "FunctionInternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an internal function"
									},
									"children": [
										{
											"id": 623,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 642,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 625,
														"name": "FunctionInternalPaddingError"
													},
													{
														"type": "reference",
														"id": 629,
														"name": "NoSuchInternalFunctionError"
													},
													{
														"type": "reference",
														"id": 634,
														"name": "DeployedFunctionInConstructorError"
													},
													{
														"type": "reference",
														"id": 639,
														"name": "MalformedInternalFunctionError"
													}
												]
											}
										},
										{
											"id": 622,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 641,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 621,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 640,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 168,
												"name": "FunctionInternalType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												623,
												622,
												621
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 639,
											"character": 44
										}
									]
								},
								{
									"id": 625,
									"name": "FunctionInternalPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an internal function"
									},
									"children": [
										{
											"id": 627,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 666,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "FunctionInternalPaddingError"
											}
										},
										{
											"id": 628,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 667,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1987,
												"name": "PaddingType"
											}
										},
										{
											"id": 626,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 665,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												627,
												628,
												626
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 661,
											"character": 45
										}
									]
								},
								{
									"id": 653,
									"name": "IndexedReferenceTypeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Used when decoding an indexed parameter of reference (or tuple) type.  These\ncan't meaningfully be decoded, so instead they decode to an error, sorry."
									},
									"children": [
										{
											"id": 654,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 780,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "IndexedReferenceTypeError"
											}
										},
										{
											"id": 656,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 785,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 655,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 781,
													"character": 6
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 119,
														"name": "BytesTypeDynamic"
													},
													{
														"type": "reference",
														"id": 133,
														"name": "StringType"
													},
													{
														"type": "reference",
														"id": 148,
														"name": "ArrayTypeStatic"
													},
													{
														"type": "reference",
														"id": 155,
														"name": "ArrayTypeDynamic"
													},
													{
														"type": "reference",
														"id": 162,
														"name": "MappingType"
													},
													{
														"type": "reference",
														"id": 193,
														"name": "StructTypeLocal"
													},
													{
														"type": "reference",
														"id": 202,
														"name": "StructTypeGlobal"
													},
													{
														"type": "reference",
														"id": 212,
														"name": "TupleType"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												654,
												656,
												655
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 779,
											"character": 42
										}
									]
								},
								{
									"id": 483,
									"name": "IntErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a signed integer"
									},
									"children": [
										{
											"id": 486,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 139,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 488,
														"name": "IntPaddingError"
													}
												]
											}
										},
										{
											"id": 485,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 138,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 484,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 137,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 106,
												"name": "IntType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												486,
												485,
												484
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 136,
											"character": 31
										}
									]
								},
								{
									"id": 488,
									"name": "IntPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for a signed integer (note padding is not always checked)"
									},
									"children": [
										{
											"id": 490,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 159,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "IntPaddingError"
											}
										},
										{
											"id": 491,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 160,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1987,
												"name": "PaddingType"
											}
										},
										{
											"id": 489,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 158,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												490,
												491,
												489
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 154,
											"character": 32
										}
									]
								},
								{
									"id": 690,
									"name": "InternalFunctionInABIError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This should never come up, but just to be sure..."
									},
									"children": [
										{
											"id": 691,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 911,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "InternalFunctionInABIError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												691
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 910,
											"character": 43
										}
									]
								},
								{
									"id": 597,
									"name": "MagicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a magic variable"
									},
									"children": [
										{
											"id": 600,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 546,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 649,
												"name": "GenericError"
											}
										},
										{
											"id": 599,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 545,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 598,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 544,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 246,
												"name": "MagicType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												600,
												599,
												598
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 543,
											"character": 33
										}
									]
								},
								{
									"id": 639,
									"name": "MalformedInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Used when the deployed PC is zero but the constructor PC\nis nonzero"
									},
									"children": [
										{
											"id": 643,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 707,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 641,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 705,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											}
										},
										{
											"id": 642,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 706,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 640,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 704,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "MalformedInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												643,
												641,
												642,
												640
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 703,
											"character": 47
										}
									]
								},
								{
									"id": 582,
									"name": "MappingErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a mapping"
									},
									"children": [
										{
											"id": 585,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 492,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 649,
												"name": "GenericError"
											}
										},
										{
											"id": 584,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 491,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 583,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 490,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 162,
												"name": "MappingType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												585,
												584,
												583
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 489,
											"character": 35
										}
									]
								},
								{
									"id": 629,
									"name": "NoSuchInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Indicates that the function pointer being decoded\nfails to point to a valid function, and also is not one of the\ndefault values"
									},
									"children": [
										{
											"id": 633,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 681,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 631,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 679,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											}
										},
										{
											"id": 632,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 680,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 630,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 678,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "NoSuchInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												633,
												631,
												632,
												630
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 677,
											"character": 44
										}
									]
								},
								{
									"id": 644,
									"name": "OptionsErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An options error.  This should never happen,\nas options are never decoded, but it's included for\ncompleteness."
									},
									"children": [
										{
											"id": 647,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 722,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 649,
												"name": "GenericError"
											}
										},
										{
											"id": 646,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 721,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 645,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 720,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 261,
												"name": "OptionsType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												647,
												646,
												645
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 719,
											"character": 35
										}
									]
								},
								{
									"id": 682,
									"name": "OverlargePointersNotImplementedError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Error for dynamic type being represented by pointer bigger than a JS number"
									},
									"children": [
										{
											"id": 683,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 877,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "OverlargePointersNotImplementedError"
											}
										},
										{
											"id": 684,
											"name": "pointerAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 878,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												683,
												684
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 876,
											"character": 53
										}
									]
								},
								{
									"id": 686,
									"name": "OverlongArrayOrStringStrictModeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Error for the stricter length check in strict mode"
									},
									"children": [
										{
											"id": 689,
											"name": "dataLength",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 902,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 687,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 900,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "OverlongArrayOrStringStrictModeError"
											}
										},
										{
											"id": 688,
											"name": "lengthAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 901,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												689,
												687,
												688
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 899,
											"character": 53
										}
									]
								},
								{
									"id": 678,
									"name": "OverlongArraysAndStringsNotImplementedError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Error for array/string/bytestring having length bigger than a JS number"
									},
									"children": [
										{
											"id": 681,
											"name": "dataLength",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 868,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 679,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 866,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "OverlongArraysAndStringsNotImplementedError"
											}
										},
										{
											"id": 680,
											"name": "lengthAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 867,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												681,
												679,
												680
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 865,
											"character": 60
										}
									]
								},
								{
									"id": 668,
									"name": "ReadErrorBytes",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Read error in a byte-based location (memory, calldata, etc)"
									},
									"children": [
										{
											"id": 669,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 835,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "ReadErrorBytes"
											}
										},
										{
											"id": 672,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 838,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 670,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 836,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 667,
												"name": "BytesLocation"
											}
										},
										{
											"id": 671,
											"name": "start",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 837,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												669,
												672,
												670,
												671
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 834,
											"character": 31
										}
									]
								},
								{
									"id": 663,
									"name": "ReadErrorStack",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Read error on the stack"
									},
									"children": [
										{
											"id": 665,
											"name": "from",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 815,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 664,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 814,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "ReadErrorStack"
											}
										},
										{
											"id": 666,
											"name": "to",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 816,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												665,
												664,
												666
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 813,
											"character": 31
										}
									]
								},
								{
									"id": 673,
									"name": "ReadErrorStorage",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Read error in storage"
									},
									"children": [
										{
											"id": 674,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 847,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "ReadErrorStorage"
											}
										},
										{
											"id": 675,
											"name": "range",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 848,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 1336,
												"name": "Range"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												674,
												675
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 846,
											"character": 33
										}
									]
								},
								{
									"id": 527,
									"name": "StringErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a string"
									},
									"children": [
										{
											"id": 530,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 295,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 678,
														"name": "OverlongArraysAndStringsNotImplementedError"
													},
													{
														"type": "reference",
														"id": 682,
														"name": "OverlargePointersNotImplementedError"
													}
												]
											}
										},
										{
											"id": 529,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 294,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 528,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 293,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 133,
												"name": "StringType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												530,
												529,
												528
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 292,
											"character": 34
										}
									]
								},
								{
									"id": 587,
									"name": "StructErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a struct"
									},
									"children": [
										{
											"id": 590,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 510,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 678,
														"name": "OverlongArraysAndStringsNotImplementedError"
													},
													{
														"type": "reference",
														"id": 682,
														"name": "OverlargePointersNotImplementedError"
													}
												]
											}
										},
										{
											"id": 589,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 509,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 588,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 508,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 189,
												"name": "StructType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												590,
												589,
												588
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 507,
											"character": 34
										}
									]
								},
								{
									"id": 592,
									"name": "TupleErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a tuple"
									},
									"children": [
										{
											"id": 595,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 528,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 678,
														"name": "OverlongArraysAndStringsNotImplementedError"
													},
													{
														"type": "reference",
														"id": 682,
														"name": "OverlargePointersNotImplementedError"
													}
												]
											}
										},
										{
											"id": 594,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 527,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 593,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 526,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 212,
												"name": "TupleType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												595,
												594,
												593
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 525,
											"character": 33
										}
									]
								},
								{
									"id": 602,
									"name": "TypeErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for a type"
									},
									"children": [
										{
											"id": 605,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 564,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 649,
												"name": "GenericError"
											}
										},
										{
											"id": 604,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 563,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 603,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 562,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 253,
												"name": "TypeType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												605,
												604,
												603
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 561,
											"character": 32
										}
									]
								},
								{
									"id": 536,
									"name": "UfixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an unsigned fixed-point number"
									},
									"children": [
										{
											"id": 539,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 323,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 546,
														"name": "UfixedPaddingError"
													}
												]
											}
										},
										{
											"id": 538,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 322,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 537,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 321,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 142,
												"name": "UfixedType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												539,
												538,
												537
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 320,
											"character": 34
										}
									]
								},
								{
									"id": 546,
									"name": "UfixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an unsigned fixed-point number (note padding is not always checked)"
									},
									"children": [
										{
											"id": 548,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 364,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "UfixedPaddingError"
											}
										},
										{
											"id": 549,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 365,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1987,
												"name": "PaddingType"
											}
										},
										{
											"id": 547,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 363,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												548,
												549,
												547
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 359,
											"character": 35
										}
									]
								},
								{
									"id": 474,
									"name": "UintErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error result for an unsigned integer"
									},
									"children": [
										{
											"id": 477,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 107,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 657,
														"name": "UserDefinedTypeNotFoundError"
													},
													{
														"type": "reference",
														"id": 653,
														"name": "IndexedReferenceTypeError"
													},
													{
														"type": "reference",
														"id": 660,
														"name": "UnsupportedConstantError"
													},
													{
														"type": "reference",
														"id": 663,
														"name": "ReadErrorStack"
													},
													{
														"type": "reference",
														"id": 668,
														"name": "ReadErrorBytes"
													},
													{
														"type": "reference",
														"id": 673,
														"name": "ReadErrorStorage"
													},
													{
														"type": "reference",
														"id": 676,
														"name": "UnusedImmutableError"
													},
													{
														"type": "reference",
														"id": 479,
														"name": "UintPaddingError"
													}
												]
											}
										},
										{
											"id": 476,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 106,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 475,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 105,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 102,
												"name": "UintType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												477,
												476,
												475
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 104,
											"character": 32
										}
									]
								},
								{
									"id": 479,
									"name": "UintPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A padding error for an unsigned integer (note padding is not always checked)"
									},
									"children": [
										{
											"id": 481,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 127,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "UintPaddingError"
											}
										},
										{
											"id": 482,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 128,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 1987,
												"name": "PaddingType"
											}
										},
										{
											"id": 480,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 126,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												481,
												482,
												480
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 122,
											"character": 33
										}
									]
								},
								{
									"id": 660,
									"name": "UnsupportedConstantError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error for an unsupported type of constant (this counts as a read error)"
									},
									"children": [
										{
											"id": 662,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 805,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"id": 1484,
												"name": "AstNode"
											}
										},
										{
											"id": 661,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 804,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "UnsupportedConstantError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												662,
												661
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 803,
											"character": 41
										}
									]
								},
								{
									"id": 676,
									"name": "UnusedImmutableError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Attempting to read an immutable that is never stored anywhere"
									},
									"children": [
										{
											"id": 677,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 857,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "UnusedImmutableError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												677
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 856,
											"character": 37
										}
									]
								},
								{
									"id": 657,
									"name": "UserDefinedTypeNotFoundError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An error for when can't find the definition info for a user-defined type"
									},
									"children": [
										{
											"id": 658,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 794,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "UserDefinedTypeNotFoundError"
											}
										},
										{
											"id": 659,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 795,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 188,
												"name": "UserDefinedType"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												658,
												659
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 793,
											"character": 45
										}
									]
								},
								{
									"id": 522,
									"name": "AddressError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A address-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 271,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"id": 523,
										"name": "AddressPaddingError"
									}
								},
								{
									"id": 581,
									"name": "ArrayError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An arrray-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 482,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"id": 651,
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 496,
									"name": "BoolError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bool-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 179,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 497,
												"name": "BoolOutOfRangeError"
											},
											{
												"type": "reference",
												"id": 500,
												"name": "BoolPaddingError"
											}
										]
									}
								},
								{
									"id": 517,
									"name": "BytesDynamicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A dynamic-bytestring-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 253,
											"character": 29
										}
									],
									"type": {
										"type": "reference",
										"id": 651,
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 473,
									"name": "BytesErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error result for a bytestring"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 97,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 504,
												"name": "BytesStaticErrorResult"
											},
											{
												"type": "reference",
												"id": 513,
												"name": "BytesDynamicErrorResult"
											}
										]
									}
								},
								{
									"id": 667,
									"name": "BytesLocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A byte-based location"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 822,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "memory"
											},
											{
												"type": "literal",
												"value": "calldata"
											},
											{
												"type": "literal",
												"value": "eventdata"
											},
											{
												"type": "literal",
												"value": "returndata"
											},
											{
												"type": "literal",
												"value": "code"
											}
										]
									}
								},
								{
									"id": 508,
									"name": "BytesStaticError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A static-bytestring-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 221,
											"character": 28
										}
									],
									"type": {
										"type": "reference",
										"id": 509,
										"name": "BytesPaddingError"
									}
								},
								{
									"id": 572,
									"name": "ContractError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A contract-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 446,
											"character": 25
										}
									],
									"type": {
										"type": "reference",
										"id": 573,
										"name": "ContractPaddingError"
									}
								},
								{
									"id": 471,
									"name": "DecoderError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "One of the underlying errors contained in an [[ErrorResult]]"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 48,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 649,
												"name": "GenericError"
											},
											{
												"type": "reference",
												"id": 478,
												"name": "UintError"
											},
											{
												"type": "reference",
												"id": 487,
												"name": "IntError"
											},
											{
												"type": "reference",
												"id": 496,
												"name": "BoolError"
											},
											{
												"type": "reference",
												"id": 508,
												"name": "BytesStaticError"
											},
											{
												"type": "reference",
												"id": 517,
												"name": "BytesDynamicError"
											},
											{
												"type": "reference",
												"id": 522,
												"name": "AddressError"
											},
											{
												"type": "reference",
												"id": 531,
												"name": "StringError"
											},
											{
												"type": "reference",
												"id": 540,
												"name": "FixedError"
											},
											{
												"type": "reference",
												"id": 545,
												"name": "UfixedError"
											},
											{
												"type": "reference",
												"id": 581,
												"name": "ArrayError"
											},
											{
												"type": "reference",
												"id": 586,
												"name": "MappingError"
											},
											{
												"type": "reference",
												"id": 591,
												"name": "StructError"
											},
											{
												"type": "reference",
												"id": 601,
												"name": "MagicError"
											},
											{
												"type": "reference",
												"id": 606,
												"name": "TypeErrorUnion"
											},
											{
												"type": "reference",
												"id": 596,
												"name": "TupleError"
											},
											{
												"type": "reference",
												"id": 554,
												"name": "EnumError"
											},
											{
												"type": "reference",
												"id": 572,
												"name": "ContractError"
											},
											{
												"type": "reference",
												"id": 611,
												"name": "FunctionExternalError"
											},
											{
												"type": "reference",
												"id": 624,
												"name": "FunctionInternalError"
											},
											{
												"type": "reference",
												"id": 685,
												"name": "InternalUseError"
											}
										]
									}
								},
								{
									"id": 651,
									"name": "DynamicDataImplementationError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error resulting from overlarge length or pointer values"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 761,
											"character": 42
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 678,
												"name": "OverlongArraysAndStringsNotImplementedError"
											},
											{
												"type": "reference",
												"id": 682,
												"name": "OverlargePointersNotImplementedError"
											}
										]
									}
								},
								{
									"id": 472,
									"name": "ElementaryErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error result for an elementary value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 80,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 474,
												"name": "UintErrorResult"
											},
											{
												"type": "reference",
												"id": 483,
												"name": "IntErrorResult"
											},
											{
												"type": "reference",
												"id": 492,
												"name": "BoolErrorResult"
											},
											{
												"type": "reference",
												"id": 473,
												"name": "BytesErrorResult"
											},
											{
												"type": "reference",
												"id": 518,
												"name": "AddressErrorResult"
											},
											{
												"type": "reference",
												"id": 527,
												"name": "StringErrorResult"
											},
											{
												"type": "reference",
												"id": 532,
												"name": "FixedErrorResult"
											},
											{
												"type": "reference",
												"id": 536,
												"name": "UfixedErrorResult"
											},
											{
												"type": "reference",
												"id": 550,
												"name": "EnumErrorResult"
											},
											{
												"type": "reference",
												"id": 568,
												"name": "ContractErrorResult"
											}
										]
									}
								},
								{
									"id": 554,
									"name": "EnumError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An enum-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 388,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 555,
												"name": "EnumOutOfRangeError"
											},
											{
												"type": "reference",
												"id": 559,
												"name": "EnumPaddingError"
											},
											{
												"type": "reference",
												"id": 564,
												"name": "EnumNotFoundDecodingError"
											}
										]
									}
								},
								{
									"id": 652,
									"name": "ErrorForThrowing",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error that may occur in a component other than the main\ncore of the decoder itself and thus may need to get thrown to it"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 771,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 657,
												"name": "UserDefinedTypeNotFoundError"
											},
											{
												"type": "reference",
												"id": 650,
												"name": "ReadError"
											}
										]
									}
								},
								{
									"id": 470,
									"name": "ErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A result which is an error rather than a value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 31,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 472,
												"name": "ElementaryErrorResult"
											},
											{
												"type": "reference",
												"id": 577,
												"name": "ArrayErrorResult"
											},
											{
												"type": "reference",
												"id": 582,
												"name": "MappingErrorResult"
											},
											{
												"type": "reference",
												"id": 587,
												"name": "StructErrorResult"
											},
											{
												"type": "reference",
												"id": 597,
												"name": "MagicErrorResult"
											},
											{
												"type": "reference",
												"id": 602,
												"name": "TypeErrorResult"
											},
											{
												"type": "reference",
												"id": 592,
												"name": "TupleErrorResult"
											},
											{
												"type": "reference",
												"id": 607,
												"name": "FunctionExternalErrorResult"
											},
											{
												"type": "reference",
												"id": 620,
												"name": "FunctionInternalErrorResult"
											},
											{
												"type": "reference",
												"id": 644,
												"name": "OptionsErrorResult"
											}
										]
									}
								},
								{
									"id": 540,
									"name": "FixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A fixed-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 331,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"id": 541,
										"name": "FixedPaddingError"
									}
								},
								{
									"id": 611,
									"name": "FunctionExternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An external-function specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 595,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 612,
												"name": "FunctionExternalNonStackPaddingError"
											},
											{
												"type": "reference",
												"id": 616,
												"name": "FunctionExternalStackPaddingError"
											}
										]
									}
								},
								{
									"id": 624,
									"name": "FunctionInternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An internal-function specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 650,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 625,
												"name": "FunctionInternalPaddingError"
											},
											{
												"type": "reference",
												"id": 629,
												"name": "NoSuchInternalFunctionError"
											},
											{
												"type": "reference",
												"id": 634,
												"name": "DeployedFunctionInConstructorError"
											},
											{
												"type": "reference",
												"id": 639,
												"name": "MalformedInternalFunctionError"
											}
										]
									}
								},
								{
									"id": 649,
									"name": "GenericError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A type-non-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 739,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 657,
												"name": "UserDefinedTypeNotFoundError"
											},
											{
												"type": "reference",
												"id": 653,
												"name": "IndexedReferenceTypeError"
											},
											{
												"type": "reference",
												"id": 650,
												"name": "ReadError"
											}
										]
									}
								},
								{
									"id": 487,
									"name": "IntError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An int-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 147,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"id": 488,
										"name": "IntPaddingError"
									}
								},
								{
									"id": 685,
									"name": "InternalUseError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Internal-use error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 890,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 686,
												"name": "OverlongArrayOrStringStrictModeError"
											},
											{
												"type": "reference",
												"id": 690,
												"name": "InternalFunctionInABIError"
											}
										]
									}
								},
								{
									"id": 601,
									"name": "MagicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A magic-specific error (there are none)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 554,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 586,
									"name": "MappingError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A mapping-specific error (there are none)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 500,
											"character": 24
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 648,
									"name": "OptionsError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "The options type has no type-specific errors at the moment"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 728,
											"character": 24
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 650,
									"name": "ReadError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A read error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 749,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 660,
												"name": "UnsupportedConstantError"
											},
											{
												"type": "reference",
												"id": 663,
												"name": "ReadErrorStack"
											},
											{
												"type": "reference",
												"id": 668,
												"name": "ReadErrorBytes"
											},
											{
												"type": "reference",
												"id": 673,
												"name": "ReadErrorStorage"
											},
											{
												"type": "reference",
												"id": 676,
												"name": "UnusedImmutableError"
											}
										]
									}
								},
								{
									"id": 531,
									"name": "StringError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A string-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 303,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"id": 651,
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 591,
									"name": "StructError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A struct-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 518,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"id": 651,
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 596,
									"name": "TupleError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A tuple-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 536,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"id": 651,
										"name": "DynamicDataImplementationError"
									}
								},
								{
									"id": 606,
									"name": "TypeErrorUnion",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An error specific to type values (there are none);\nthis isn't called TypeError because that's not legal"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 573,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 545,
									"name": "UfixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A ufixed-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 352,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"id": 546,
										"name": "UfixedPaddingError"
									}
								},
								{
									"id": 478,
									"name": "UintError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A uint-specific error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 115,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"id": 479,
										"name": "UintPaddingError"
									}
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										518,
										523,
										577,
										492,
										497,
										500,
										513,
										509,
										504,
										568,
										573,
										634,
										550,
										564,
										555,
										559,
										532,
										541,
										607,
										612,
										616,
										620,
										625,
										653,
										483,
										488,
										690,
										597,
										639,
										582,
										629,
										644,
										682,
										686,
										678,
										668,
										663,
										673,
										527,
										587,
										592,
										602,
										536,
										546,
										474,
										479,
										660,
										676,
										657
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												518,
												523,
												492,
												497,
												500,
												513,
												509,
												504,
												559,
												532,
												541,
												483,
												488,
												527,
												536,
												546,
												474,
												479
											]
										},
										{
											"title": "Container types",
											"children": [
												577,
												582,
												587,
												592
											]
										},
										{
											"title": "Function types",
											"children": [
												634,
												607,
												612,
												616,
												620,
												625,
												639,
												629
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												597,
												602
											]
										},
										{
											"title": "Generic errors",
											"children": [
												653,
												682,
												678,
												668,
												663,
												673,
												660,
												676,
												657
											]
										},
										{
											"title": "Internal-use errors",
											"children": [
												690,
												686
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												568,
												573,
												550,
												564,
												555
											]
										},
										{
											"title": "Other",
											"children": [
												644
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										522,
										581,
										496,
										517,
										473,
										667,
										508,
										572,
										471,
										651,
										472,
										554,
										652,
										470,
										540,
										611,
										624,
										649,
										487,
										685,
										601,
										586,
										648,
										650,
										531,
										591,
										596,
										606,
										545,
										478
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												471,
												470
											]
										},
										{
											"title": "Elementary types",
											"children": [
												522,
												496,
												517,
												473,
												508,
												472,
												540,
												487,
												531,
												545,
												478
											]
										},
										{
											"title": "Container types",
											"children": [
												581,
												586,
												591,
												596
											]
										},
										{
											"title": "Function types",
											"children": [
												611,
												624
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												601,
												606
											]
										},
										{
											"title": "Generic errors",
											"children": [
												651,
												652,
												649,
												650
											]
										},
										{
											"title": "Internal-use errors",
											"children": [
												685
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												572,
												554
											]
										},
										{
											"title": "Other",
											"children": [
												667,
												648
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/errors.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 80,
							"name": "Types",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Contains the types for type objects, and some\nfunctions for working with them."
							},
							"children": [
								{
									"id": 129,
									"name": "AddressTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an address (with payability unspecified)"
									},
									"children": [
										{
											"id": 131,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 142,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "general"
											}
										},
										{
											"id": 130,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 141,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "address"
											}
										},
										{
											"id": 132,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 143,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												131,
												130,
												132
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 140,
											"character": 35
										}
									]
								},
								{
									"id": 125,
									"name": "AddressTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an address (with payability specified)"
									},
									"children": [
										{
											"id": 127,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 131,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "specific"
											}
										},
										{
											"id": 128,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 132,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 126,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 130,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "address"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												127,
												128,
												126
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 129,
											"character": 36
										}
									]
								},
								{
									"id": 155,
									"name": "ArrayTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a dynamic-length array"
									},
									"children": [
										{
											"id": 158,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 210,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Type"
											}
										},
										{
											"id": 157,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 209,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "dynamic"
											}
										},
										{
											"id": 159,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 211,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 1982,
												"name": "Location"
											}
										},
										{
											"id": 156,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 208,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "array"
											}
										},
										{
											"id": 160,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 212,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												158,
												157,
												159,
												156,
												160
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 207,
											"character": 33
										}
									]
								},
								{
									"id": 148,
									"name": "ArrayTypeStatic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a static-length array"
									},
									"children": [
										{
											"id": 151,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 196,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Type"
											}
										},
										{
											"id": 150,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 195,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "static"
											}
										},
										{
											"id": 152,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 197,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 153,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 198,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 1982,
												"name": "Location"
											}
										},
										{
											"id": 149,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 194,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "array"
											}
										},
										{
											"id": 154,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 199,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												151,
												150,
												152,
												153,
												149,
												154
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 193,
											"character": 32
										}
									]
								},
								{
									"id": 110,
									"name": "BoolType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a boolean"
									},
									"children": [
										{
											"id": 111,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 82,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "bool"
											}
										},
										{
											"id": 112,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 83,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												111,
												112
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 81,
											"character": 25
										}
									]
								},
								{
									"id": 119,
									"name": "BytesTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a dynamic-length bytestring"
									},
									"children": [
										{
											"id": 121,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 112,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "dynamic"
											}
										},
										{
											"id": 122,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 113,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 1982,
												"name": "Location"
											}
										},
										{
											"id": 120,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 111,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "bytes"
											}
										},
										{
											"id": 123,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 114,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												121,
												122,
												120,
												123
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 110,
											"character": 33
										}
									]
								},
								{
									"id": 114,
									"name": "BytesTypeStatic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a static-length bytestring"
									},
									"children": [
										{
											"id": 116,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 100,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "static"
											}
										},
										{
											"id": 117,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 101,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 115,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 99,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "bytes"
											}
										},
										{
											"id": 118,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 102,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												116,
												117,
												115,
												118
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 98,
											"character": 32
										}
									]
								},
								{
									"id": 239,
									"name": "ContractTypeForeign",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a contract w/o full Solidity info -- not used for actual variables"
									},
									"children": [
										{
											"id": 243,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 481,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 1985,
												"name": "ContractKind"
											}
										},
										{
											"id": 241,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 479,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "foreign"
											}
										},
										{
											"id": 244,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 485,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 240,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 478,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "contract"
											}
										},
										{
											"id": 242,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 480,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												243,
												241,
												244,
												240,
												242
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 477,
											"character": 36
										}
									]
								},
								{
									"id": 232,
									"name": "ContractTypeNative",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a contract with full Solidity info -- may be used for actual variables"
									},
									"children": [
										{
											"id": 237,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 463,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 1985,
												"name": "ContractKind"
											}
										},
										{
											"id": 235,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 461,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 234,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 457,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "native"
											}
										},
										{
											"id": 238,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 467,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 233,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 456,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "contract"
											}
										},
										{
											"id": 236,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 462,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												237,
												235,
												234,
												238,
												233,
												236
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 455,
											"character": 35
										}
									]
								},
								{
									"id": 225,
									"name": "EnumTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Global enum"
									},
									"children": [
										{
											"id": 228,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 432,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 227,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 428,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "global"
											}
										},
										{
											"id": 230,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 437,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 226,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 427,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "enum"
											}
										},
										{
											"id": 229,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 433,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												228,
												227,
												230,
												226,
												229
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 426,
											"character": 31
										}
									]
								},
								{
									"id": 217,
									"name": "EnumTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Local enum (defined in a contract)"
									},
									"children": [
										{
											"id": 223,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 414,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"id": 232,
												"name": "ContractTypeNative"
											}
										},
										{
											"id": 222,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 413,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 220,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 411,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 219,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 407,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "local"
											}
										},
										{
											"id": 224,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 418,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 218,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 406,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "enum"
											}
										},
										{
											"id": 221,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 412,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												223,
												222,
												220,
												219,
												224,
												218,
												221
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 405,
											"character": 30
										}
									]
								},
								{
									"id": 137,
									"name": "FixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a signed fixed-point number"
									},
									"children": [
										{
											"id": 139,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 164,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 140,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 165,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 138,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 163,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "fixed"
											}
										},
										{
											"id": 141,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 166,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												139,
												140,
												138,
												141
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 162,
											"character": 26
										}
									]
								},
								{
									"id": 182,
									"name": "FunctionExternalTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an external function pointer (general ABI type)"
									},
									"children": [
										{
											"id": 185,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 297,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "general"
											}
										},
										{
											"id": 183,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 295,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "function"
											}
										},
										{
											"id": 186,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 299,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 184,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 296,
													"character": 12
												}
											],
											"type": {
												"type": "literal",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												185,
												183,
												186,
												184
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 294,
											"character": 44
										}
									]
								},
								{
									"id": 175,
									"name": "FunctionExternalTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an external function pointer (full Solidity type)"
									},
									"children": [
										{
											"id": 180,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 284,
													"character": 21
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 101,
													"name": "Type"
												}
											}
										},
										{
											"id": 178,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 282,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "specific"
											}
										},
										{
											"id": 179,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 283,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"id": 1984,
												"name": "Mutability"
											}
										},
										{
											"id": 181,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 285,
													"character": 22
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 101,
													"name": "Type"
												}
											}
										},
										{
											"id": 176,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 280,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "function"
											}
										},
										{
											"id": 177,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 281,
													"character": 12
												}
											],
											"type": {
												"type": "literal",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												180,
												178,
												179,
												181,
												176,
												177
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 279,
											"character": 45
										}
									]
								},
								{
									"id": 168,
									"name": "FunctionInternalType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an internal function pointer"
									},
									"children": [
										{
											"id": 172,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 260,
													"character": 21
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 101,
													"name": "Type"
												}
											}
										},
										{
											"id": 171,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 259,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"id": 1984,
												"name": "Mutability"
											}
										},
										{
											"id": 173,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 261,
													"character": 22
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 101,
													"name": "Type"
												}
											}
										},
										{
											"id": 169,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 257,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "function"
											}
										},
										{
											"id": 170,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 258,
													"character": 12
												}
											],
											"type": {
												"type": "literal",
												"value": "internal"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												172,
												171,
												173,
												169,
												170
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 256,
											"character": 37
										}
									]
								},
								{
									"id": 106,
									"name": "IntType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a signed integer"
									},
									"children": [
										{
											"id": 108,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 72,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 107,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 71,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "int"
											}
										},
										{
											"id": 109,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 73,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												108,
												107,
												109
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 70,
											"character": 24
										}
									]
								},
								{
									"id": 246,
									"name": "MagicType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a magic variable"
									},
									"children": [
										{
											"id": 249,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 503,
													"character": 13
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 250,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 251,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 252,
																"name": "field",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 101,
															"name": "Type"
														}
													}
												}
											}
										},
										{
											"id": 247,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 498,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "magic"
											}
										},
										{
											"id": 248,
											"name": "variable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 499,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 245,
												"name": "MagicVariableName"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												249,
												247,
												248
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 497,
											"character": 26
										}
									]
								},
								{
									"id": 162,
									"name": "MappingType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a mapping"
									},
									"children": [
										{
											"id": 164,
											"name": "keyType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 239,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 161,
												"name": "ElementaryType"
											}
										},
										{
											"id": 166,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 241,
													"character": 10
												}
											],
											"type": {
												"type": "literal",
												"value": "storage"
											}
										},
										{
											"id": 163,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 238,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "mapping"
											}
										},
										{
											"id": 165,
											"name": "valueType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 240,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												164,
												166,
												163,
												165
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 237,
											"character": 28
										}
									]
								},
								{
									"id": 190,
									"name": "NameTypePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 191,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 329,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 192,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 330,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												191,
												192
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 328,
											"character": 29
										}
									]
								},
								{
									"id": 209,
									"name": "OptionallyNamedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 210,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 376,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 211,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 377,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												210,
												211
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 375,
											"character": 36
										}
									]
								},
								{
									"id": 261,
									"name": "OptionsType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Fictitious type used for a transaction options argument\n(e.g. value, from, etc)."
									},
									"children": [
										{
											"id": 262,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 546,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "options"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												262
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 545,
											"character": 28
										}
									]
								},
								{
									"id": 133,
									"name": "StringType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a string"
									},
									"children": [
										{
											"id": 135,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 153,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 1982,
												"name": "Location"
											}
										},
										{
											"id": 134,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 152,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "string"
											}
										},
										{
											"id": 136,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 154,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												135,
												134,
												136
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 151,
											"character": 27
										}
									]
								},
								{
									"id": 202,
									"name": "StructTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Global structs"
									},
									"children": [
										{
											"id": 205,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 366,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 204,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 362,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "global"
											}
										},
										{
											"id": 208,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 372,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 1982,
												"name": "Location"
											}
										},
										{
											"id": 207,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 371,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 190,
													"name": "NameTypePair"
												}
											}
										},
										{
											"id": 203,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 361,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "struct"
											}
										},
										{
											"id": 206,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 367,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												205,
												204,
												208,
												207,
												203,
												206
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 360,
											"character": 33
										}
									]
								},
								{
									"id": 193,
									"name": "StructTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Local structs (defined in contracts)"
									},
									"children": [
										{
											"id": 199,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 347,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"id": 232,
												"name": "ContractTypeNative"
											}
										},
										{
											"id": 198,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 346,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 196,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 344,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 195,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 340,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "local"
											}
										},
										{
											"id": 201,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 352,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 1982,
												"name": "Location"
											}
										},
										{
											"id": 200,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 351,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 190,
													"name": "NameTypePair"
												}
											}
										},
										{
											"id": 194,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 339,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "struct"
											}
										},
										{
											"id": 197,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 345,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												199,
												198,
												196,
												195,
												201,
												200,
												194,
												197
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 338,
											"character": 32
										}
									]
								},
								{
									"id": 212,
									"name": "TupleType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a tuple (for use in ABI)"
									},
									"children": [
										{
											"id": 214,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 387,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 209,
													"name": "OptionallyNamedType"
												}
											}
										},
										{
											"id": 213,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 386,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "tuple"
											}
										},
										{
											"id": 215,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 388,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												214,
												213,
												215
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 385,
											"character": 26
										}
									]
								},
								{
									"id": 254,
									"name": "TypeTypeContract",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of a contract type"
									},
									"children": [
										{
											"id": 257,
											"name": "stateVariableTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order, and must only include\n**non-inherited** state variables"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 527,
													"character": 20
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 190,
													"name": "NameTypePair"
												}
											}
										},
										{
											"id": 256,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 522,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 232,
												"name": "ContractTypeNative"
											}
										},
										{
											"id": 255,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 521,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												257,
												256,
												255
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 520,
											"character": 33
										}
									]
								},
								{
									"id": 258,
									"name": "TypeTypeEnum",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an enum type"
									},
									"children": [
										{
											"id": 260,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 536,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 216,
												"name": "EnumType"
											}
										},
										{
											"id": 259,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 535,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												260,
												259
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 534,
											"character": 29
										}
									]
								},
								{
									"id": 264,
									"name": "TypesById",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 561,
											"character": 26
										}
									],
									"indexSignature": {
										"id": 265,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 266,
												"name": "id",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 188,
											"name": "UserDefinedType"
										}
									}
								},
								{
									"id": 142,
									"name": "UfixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an unsigned fixed-point number"
									},
									"children": [
										{
											"id": 144,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 176,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 145,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 177,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 143,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 175,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "ufixed"
											}
										},
										{
											"id": 146,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 178,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												144,
												145,
												143,
												146
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 174,
											"character": 27
										}
									]
								},
								{
									"id": 102,
									"name": "UintType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "Type of an unsigned integer"
									},
									"children": [
										{
											"id": 104,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 61,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 103,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 60,
													"character": 11
												}
											],
											"type": {
												"type": "literal",
												"value": "uint"
											}
										},
										{
											"id": 105,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 62,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												104,
												103,
												105
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 59,
											"character": 25
										}
									]
								},
								{
									"id": 124,
									"name": "AddressType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an address"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 122,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 125,
												"name": "AddressTypeSpecific"
											},
											{
												"type": "reference",
												"id": 129,
												"name": "AddressTypeGeneral"
											}
										]
									}
								},
								{
									"id": 147,
									"name": "ArrayType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an array"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 186,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 148,
												"name": "ArrayTypeStatic"
											},
											{
												"type": "reference",
												"id": 155,
												"name": "ArrayTypeDynamic"
											}
										]
									}
								},
								{
									"id": 113,
									"name": "BytesType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a bytestring (static or dynamic)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 91,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 114,
												"name": "BytesTypeStatic"
											},
											{
												"type": "reference",
												"id": 119,
												"name": "BytesTypeDynamic"
											}
										]
									}
								},
								{
									"id": 187,
									"name": "ContractDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Types defined inside contracts"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 307,
											"character": 31
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 193,
												"name": "StructTypeLocal"
											},
											{
												"type": "reference",
												"id": 217,
												"name": "EnumTypeLocal"
											}
										]
									}
								},
								{
									"id": 231,
									"name": "ContractType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a contract; used not just for actual values but wherever a contract type\nis needed",
										"text": "Contract types may be native (has Solidity info) or foreign (lacking Solidity info).\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 448,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 232,
												"name": "ContractTypeNative"
											},
											{
												"type": "reference",
												"id": 239,
												"name": "ContractTypeForeign"
											}
										]
									}
								},
								{
									"id": 161,
									"name": "ElementaryType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an elementary value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 220,
											"character": 26
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 102,
												"name": "UintType"
											},
											{
												"type": "reference",
												"id": 106,
												"name": "IntType"
											},
											{
												"type": "reference",
												"id": 110,
												"name": "BoolType"
											},
											{
												"type": "reference",
												"id": 113,
												"name": "BytesType"
											},
											{
												"type": "reference",
												"id": 137,
												"name": "FixedType"
											},
											{
												"type": "reference",
												"id": 142,
												"name": "UfixedType"
											},
											{
												"type": "reference",
												"id": 124,
												"name": "AddressType"
											},
											{
												"type": "reference",
												"id": 133,
												"name": "StringType"
											},
											{
												"type": "reference",
												"id": 216,
												"name": "EnumType"
											},
											{
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											}
										]
									}
								},
								{
									"id": 216,
									"name": "EnumType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an enum",
										"text": "Enums may be local (defined in a contract) or global (defined outside of any contract)\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 398,
											"character": 20
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 217,
												"name": "EnumTypeLocal"
											},
											{
												"type": "reference",
												"id": 225,
												"name": "EnumTypeGlobal"
											}
										]
									}
								},
								{
									"id": 174,
									"name": "FunctionExternalType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of an external function pointer"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 270,
											"character": 32
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 175,
												"name": "FunctionExternalTypeSpecific"
											},
											{
												"type": "reference",
												"id": 182,
												"name": "FunctionExternalTypeGeneral"
											}
										]
									}
								},
								{
									"id": 167,
									"name": "FunctionType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a function pointer (internal or external)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 249,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 168,
												"name": "FunctionInternalType"
											},
											{
												"type": "reference",
												"id": 174,
												"name": "FunctionExternalType"
											}
										]
									}
								},
								{
									"id": 245,
									"name": "MagicVariableName",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 490,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "message"
											},
											{
												"type": "literal",
												"value": "block"
											},
											{
												"type": "literal",
												"value": "transaction"
											}
										]
									}
								},
								{
									"id": 263,
									"name": "ReferenceType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Reference types"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 554,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 147,
												"name": "ArrayType"
											},
											{
												"type": "reference",
												"id": 162,
												"name": "MappingType"
											},
											{
												"type": "reference",
												"id": 189,
												"name": "StructType"
											},
											{
												"type": "reference",
												"id": 133,
												"name": "StringType"
											},
											{
												"type": "reference",
												"id": 119,
												"name": "BytesTypeDynamic"
											}
										]
									}
								},
								{
									"id": 189,
									"name": "StructType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a struct",
										"text": "Structs may be local (defined in a contract) or global (defined outside of any contract)\n"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 326,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 193,
												"name": "StructTypeLocal"
											},
											{
												"type": "reference",
												"id": 202,
												"name": "StructTypeGlobal"
											}
										]
									}
								},
								{
									"id": 101,
									"name": "Type",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Object representing a type"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 34,
											"character": 16
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 102,
												"name": "UintType"
											},
											{
												"type": "reference",
												"id": 106,
												"name": "IntType"
											},
											{
												"type": "reference",
												"id": 110,
												"name": "BoolType"
											},
											{
												"type": "reference",
												"id": 113,
												"name": "BytesType"
											},
											{
												"type": "reference",
												"id": 124,
												"name": "AddressType"
											},
											{
												"type": "reference",
												"id": 137,
												"name": "FixedType"
											},
											{
												"type": "reference",
												"id": 142,
												"name": "UfixedType"
											},
											{
												"type": "reference",
												"id": 133,
												"name": "StringType"
											},
											{
												"type": "reference",
												"id": 147,
												"name": "ArrayType"
											},
											{
												"type": "reference",
												"id": 162,
												"name": "MappingType"
											},
											{
												"type": "reference",
												"id": 167,
												"name": "FunctionType"
											},
											{
												"type": "reference",
												"id": 189,
												"name": "StructType"
											},
											{
												"type": "reference",
												"id": 216,
												"name": "EnumType"
											},
											{
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											},
											{
												"type": "reference",
												"id": 246,
												"name": "MagicType"
											},
											{
												"type": "reference",
												"id": 253,
												"name": "TypeType"
											},
											{
												"type": "reference",
												"id": 212,
												"name": "TupleType"
											},
											{
												"type": "reference",
												"id": 261,
												"name": "OptionsType"
											}
										]
									}
								},
								{
									"id": 253,
									"name": "TypeType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Type of a type!  This is currently only used for contract types and enum\ntypes, but may expand in the future."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 514,
											"character": 20
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 254,
												"name": "TypeTypeContract"
											},
											{
												"type": "reference",
												"id": 258,
												"name": "TypeTypeEnum"
											}
										]
									}
								},
								{
									"id": 188,
									"name": "UserDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "User-defined types"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 313,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 187,
												"name": "ContractDefinedType"
											},
											{
												"type": "reference",
												"id": 232,
												"name": "ContractTypeNative"
											},
											{
												"type": "reference",
												"id": 202,
												"name": "StructTypeGlobal"
											},
											{
												"type": "reference",
												"id": 225,
												"name": "EnumTypeGlobal"
											}
										]
									}
								},
								{
									"id": 84,
									"name": "fullType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 583,
											"character": 24
										}
									],
									"signatures": [
										{
											"id": 85,
											"name": "fullType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 86,
													"name": "basicType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Type"
													}
												},
												{
													"id": 87,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "TypesById"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Type"
											}
										}
									]
								},
								{
									"id": 98,
									"name": "isContractDefinedType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 763,
											"character": 37
										}
									],
									"signatures": [
										{
											"id": 99,
											"name": "isContractDefinedType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 100,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "anyType",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"id": 187,
													"name": "ContractDefinedType"
												}
											}
										}
									]
								},
								{
									"id": 81,
									"name": "isReferenceType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 570,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 82,
											"name": "isReferenceType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 83,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "anyType",
												"asserts": false,
												"targetType": {
													"type": "reference",
													"id": 263,
													"name": "ReferenceType"
												}
											}
										}
									]
								},
								{
									"id": 88,
									"name": "specifyLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 600,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 89,
											"name": "specifyLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 90,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Type"
													}
												},
												{
													"id": 91,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1982,
																"name": "Location"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Type"
											}
										}
									]
								},
								{
									"id": 92,
									"name": "typeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 645,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 93,
											"name": "typeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 94,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								},
								{
									"id": 95,
									"name": "typeStringWithoutLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 654,
											"character": 41
										}
									],
									"signatures": [
										{
											"id": 96,
											"name": "typeStringWithoutLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 97,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Type"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										129,
										125,
										155,
										148,
										110,
										119,
										114,
										239,
										232,
										225,
										217,
										137,
										182,
										175,
										168,
										106,
										246,
										162,
										190,
										209,
										261,
										133,
										202,
										193,
										212,
										254,
										258,
										264,
										142,
										102
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												129,
												125,
												110,
												119,
												114,
												137,
												106,
												133,
												142,
												102
											]
										},
										{
											"title": "Container types",
											"children": [
												155,
												148,
												162,
												202,
												193,
												212
											]
										},
										{
											"title": "Function types",
											"children": [
												182,
												175,
												168
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												246,
												254,
												258
											]
										},
										{
											"title": "Special types (encoder-only)",
											"children": [
												261
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												239,
												225,
												217
											]
										},
										{
											"title": "User-defined elemntary types",
											"children": [
												232
											]
										},
										{
											"title": "Other",
											"children": [
												190,
												209,
												264
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										124,
										147,
										113,
										187,
										231,
										161,
										216,
										174,
										167,
										245,
										263,
										189,
										101,
										253,
										188
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												187,
												161,
												263,
												101,
												188
											]
										},
										{
											"title": "Elementary types",
											"children": [
												124,
												113
											]
										},
										{
											"title": "Container types",
											"children": [
												147,
												189
											]
										},
										{
											"title": "Function types",
											"children": [
												174,
												167
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												253
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												231,
												216
											]
										},
										{
											"title": "Other",
											"children": [
												245
											]
										}
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										84,
										98,
										81,
										88,
										92,
										95
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/types.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 692,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 719,
									"name": "Circularity",
									"kind": 2,
									"kindString": "Namespace",
									"flags": {},
									"children": [
										{
											"id": 720,
											"name": "tie",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 6,
													"character": 19
												}
											],
											"signatures": [
												{
													"id": 721,
													"name": "tie",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 722,
															"name": "untied",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 268,
																"name": "Format.Values.Result"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												720
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/circularity.ts",
											"line": 1,
											"character": 0
										}
									]
								},
								{
									"id": 693,
									"name": "Exception",
									"kind": 2,
									"kindString": "Namespace",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"children": [
										{
											"id": 694,
											"name": "message",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 16,
													"character": 23
												}
											],
											"signatures": [
												{
													"id": 695,
													"name": "message",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 696,
															"name": "error",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 652,
																"name": "Format.Errors.ErrorForThrowing"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												694
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/exception.ts",
											"line": 1,
											"character": 0
										}
									]
								},
								{
									"id": 697,
									"name": "Inspect",
									"kind": 2,
									"kindString": "Namespace",
									"flags": {},
									"children": [
										{
											"id": 710,
											"name": "ResultInspector",
											"kind": 128,
											"kindString": "Class",
											"flags": {},
											"comment": {
												"shortText": "This class is meant to be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nfunction.  Given a [[Format.Values.Result]] `value`, one can use\n`new ResultInspector(value)` to create a ResultInspector for that value,\nwhich can be used with util.inspect() to create a human-readable string\nrepresenting the value.",
												"tags": [
													{
														"tag": "example",
														"text": "\nSuppose `value` is a Result.  In Node, the following would print to the\nconsole a human-readable representation of `value`, with colors enabled,\nno maximum depth, and no maximum array length, and lines (usually) no\nlonger than 80 characters:\n```javascript\nconsole.log(\n  util.inspect(\n    new ResultInspector(value),\n    {\n      colors: true,\n      depth: null,\n      maxArrayLength: null,\n      breakLength: 80\n    }\n  )\n);\n```\nOf course, there are many other ways to use util.inspect; see Node's\ndocumentation, linked above, for more.\n"
													}
												]
											},
											"children": [
												{
													"id": 711,
													"name": "constructor",
													"kind": 512,
													"kindString": "Constructor",
													"flags": {},
													"signatures": [
														{
															"id": 712,
															"name": "new ResultInspector",
															"kind": 16384,
															"kindString": "Constructor signature",
															"flags": {},
															"parameters": [
																{
																	"id": 713,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 268,
																		"name": "Result"
																	}
																}
															],
															"type": {
																"type": "reference",
																"id": 710,
																"name": "ResultInspector"
															}
														}
													]
												},
												{
													"id": 714,
													"name": "result",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 56,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"id": 268,
														"name": "Result"
													}
												},
												{
													"id": 715,
													"name": "__@custom@21691",
													"kind": 2048,
													"kindString": "Method",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 60,
															"character": 23
														}
													],
													"signatures": [
														{
															"id": 716,
															"name": "__@custom@21691",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 717,
																	"name": "depth",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 718,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "InspectOptions"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											],
											"groups": [
												{
													"title": "Constructors",
													"kind": 512,
													"children": [
														711
													]
												},
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														714
													]
												},
												{
													"title": "Methods",
													"kind": 2048,
													"children": [
														715
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 55,
													"character": 28
												},
												{
													"fileName": "codec/lib/export.ts",
													"line": 12,
													"character": 24
												}
											]
										},
										{
											"id": 707,
											"name": "unsafeNativize",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 455,
													"character": 30
												},
												{
													"fileName": "codec/lib/export.ts",
													"line": 12,
													"character": 40
												}
											],
											"signatures": [
												{
													"id": 708,
													"name": "unsafeNativize",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "WARNING! Do NOT use this function in real code unless you absolutely have\nto!  Using it in controlled tests is fine, but do NOT use it in real code if\nyou have any better option!",
														"text": "This function is a giant hack.  It will throw exceptions on numbers that\ndon't fit in a Javascript number.  It loses various information.  It was\nonly ever written to support our hacked-together watch expression system,\nand later repurposed to make testing easier.\n\nIf you are not doing something as horrible as evaluating user-inputted\nJavascript expressions meant to operate upon Solidity variables, then you\nprobably have a better option than using this in real code!\n\n(For instance, if you just want to nicely print individual values, without\nattempting to first operate on them via Javascript expressions, we have the\n[[ResultInspector]] class, which can be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nto do exactly that.)\n\nRemember, the decoder output format was made to be machine-readable.  It\nshouldn't be too hard for you to process.  If it comes to it, copy-paste\nthis code and dehackify it for your use case, which hopefully is more\nmanageable than the one that caused us to write this.\n"
													},
													"parameters": [
														{
															"id": 709,
															"name": "result",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 268,
																"name": "Format.Values.Result"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										},
										{
											"id": 698,
											"name": "unsafeNativizeVariables",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 414,
													"character": 39
												}
											],
											"signatures": [
												{
													"id": 699,
													"name": "unsafeNativizeVariables",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "WARNING! Do NOT use this function in real code unless you\nabsolutely have to!  Using it in controlled tests is fine,\nbut do NOT use it in real code if you have any better option!\nSee [[unsafeNativize]] for why!"
													},
													"parameters": [
														{
															"id": 700,
															"name": "variables",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 701,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/format/utils/inspect.ts",
																			"line": 414,
																			"character": 50
																		}
																	],
																	"indexSignature": {
																		"id": 702,
																		"name": "__index",
																		"kind": 8192,
																		"kindString": "Index signature",
																		"flags": {},
																		"parameters": [
																			{
																				"id": 703,
																				"name": "name",
																				"kind": 32768,
																				"flags": {},
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			}
																		],
																		"type": {
																			"type": "reference",
																			"id": 268,
																			"name": "Format.Values.Result"
																		}
																	}
																}
															}
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 704,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/utils/inspect.ts",
																	"line": 416,
																	"character": 3
																}
															],
															"indexSignature": {
																"id": 705,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 706,
																		"name": "name",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													}
												}
											]
										}
									],
									"groups": [
										{
											"title": "Classes",
											"kind": 128,
											"children": [
												710
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												707,
												698
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/inspect.ts",
											"line": 1,
											"character": 0
										}
									]
								}
							],
							"groups": [
								{
									"title": "Namespaces",
									"kind": 2,
									"children": [
										719,
										693,
										697
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/utils/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 267,
							"name": "Values",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"comment": {
								"shortText": "Contains the types for value and result objects."
							},
							"children": [
								{
									"id": 416,
									"name": "AddressValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An address value"
									},
									"children": [
										{
											"id": 418,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 112,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 417,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 111,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 124,
												"name": "AddressType"
											}
										},
										{
											"id": 419,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 113,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 420,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 421,
															"name": "asAddress",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "has leading \"0x\" and is checksum-cased"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 117,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 422,
															"name": "rawAsHex",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "just a hex string, so no checksum"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 121,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																421,
																422
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												418,
												417,
												419
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 110,
											"character": 29
										}
									]
								},
								{
									"id": 284,
									"name": "ArrayValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An array value (may contain errors!)"
									},
									"children": [
										{
											"id": 286,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 216,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 287,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 220,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 285,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 215,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 147,
												"name": "ArrayType"
											}
										},
										{
											"id": 288,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 221,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 268,
													"name": "Result"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												286,
												287,
												285,
												288
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 214,
											"character": 27
										}
									]
								},
								{
									"id": 397,
									"name": "BoolValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A boolean value"
									},
									"children": [
										{
											"id": 399,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 66,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 398,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 65,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 110,
												"name": "BoolType"
											}
										},
										{
											"id": 400,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 67,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 401,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 402,
															"name": "asBoolean",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 68,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																402
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												399,
												398,
												400
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 64,
											"character": 26
										}
									]
								},
								{
									"id": 410,
									"name": "BytesDynamicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value (dynamic length)"
									},
									"children": [
										{
											"id": 412,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 96,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 411,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 95,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 119,
												"name": "BytesTypeDynamic"
											}
										},
										{
											"id": 413,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 97,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 414,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 415,
															"name": "asHex",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 101,
																	"character": 9
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																415
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												412,
												411,
												413
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 94,
											"character": 34
										}
									]
								},
								{
									"id": 403,
									"name": "BytesStaticValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value (static length)"
									},
									"children": [
										{
											"id": 405,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 79,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 404,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 78,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 114,
												"name": "BytesTypeStatic"
											}
										},
										{
											"id": 406,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 80,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 407,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 408,
															"name": "asHex",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 84,
																	"character": 9
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 409,
															"name": "rawAsHex",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 85,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																408,
																409
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												405,
												404,
												406
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 77,
											"character": 33
										}
									]
								},
								{
									"id": 455,
									"name": "ContractValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A contract value; see [[ContractValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 457,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 218,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 456,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 217,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											}
										},
										{
											"id": 458,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 219,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 459,
												"name": "ContractValueInfo"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												457,
												456,
												458
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 216,
											"character": 30
										}
									]
								},
								{
									"id": 460,
									"name": "ContractValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can identify the class."
									},
									"children": [
										{
											"id": 462,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 243,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 464,
											"name": "class",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 248,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											}
										},
										{
											"id": 461,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 238,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "known"
											}
										},
										{
											"id": 463,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding beforehand)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 247,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												462,
												464,
												461,
												463
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 237,
											"character": 39
										}
									]
								},
								{
									"id": 465,
									"name": "ContractValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can't identify the class."
									},
									"children": [
										{
											"id": 467,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 263,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 466,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 258,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "unknown"
											}
										},
										{
											"id": 468,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding beforehand)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 267,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												467,
												466,
												468
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 257,
											"character": 41
										}
									]
								},
								{
									"id": 448,
									"name": "EnumValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An enum value"
									},
									"children": [
										{
											"id": 450,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 201,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 449,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 200,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 216,
												"name": "EnumType"
											}
										},
										{
											"id": 451,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 202,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 452,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 453,
															"name": "name",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 203,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 454,
															"name": "numericAsBN",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "the numeric value of the enum"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 207,
																	"character": 15
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																453,
																454
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												450,
												449,
												451
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 199,
											"character": 26
										}
									]
								},
								{
									"id": 434,
									"name": "FixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A signed fixed-point value"
									},
									"children": [
										{
											"id": 436,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 173,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 435,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 172,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 137,
												"name": "FixedType"
											}
										},
										{
											"id": 437,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 174,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 438,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 439,
															"name": "asBig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 175,
																	"character": 9
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														},
														{
															"id": 440,
															"name": "rawAsBig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 176,
																	"character": 12
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																439,
																440
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												436,
												435,
												437
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 171,
											"character": 27
										}
									]
								},
								{
									"id": 333,
									"name": "FunctionExternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An external function pointer value; see [[FunctionExternalValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 335,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 394,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 334,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 393,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 174,
												"name": "FunctionExternalType"
											}
										},
										{
											"id": 336,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 395,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 337,
												"name": "FunctionExternalValueInfo"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												335,
												334,
												336
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 392,
											"character": 38
										}
									]
								},
								{
									"id": 343,
									"name": "FunctionExternalValueInfoInvalid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can identify the class but can't locate the function."
									},
									"children": [
										{
											"id": 345,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 434,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 460,
												"name": "ContractValueInfoKnown"
											}
										},
										{
											"id": 344,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 433,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "invalid"
											}
										},
										{
											"id": 346,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 438,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												345,
												344,
												346
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 432,
											"character": 49
										}
									]
								},
								{
									"id": 338,
									"name": "FunctionExternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used for a known function of a known class."
									},
									"children": [
										{
											"id": 342,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 423,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 340,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 418,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 460,
												"name": "ContractValueInfoKnown"
											}
										},
										{
											"id": 339,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 417,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "known"
											}
										},
										{
											"id": 341,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 422,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												342,
												340,
												339,
												341
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 416,
											"character": 47
										}
									]
								},
								{
									"id": 347,
									"name": "FunctionExternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can't even locate the class."
									},
									"children": [
										{
											"id": 349,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 448,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"id": 465,
												"name": "ContractValueInfoUnknown"
											}
										},
										{
											"id": 348,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 447,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "unknown"
											}
										},
										{
											"id": 350,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 452,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												349,
												348,
												350
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 446,
											"character": 49
										}
									]
								},
								{
									"id": 352,
									"name": "FunctionInternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An internal function pointer value; see [[FunctionInternalValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 354,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 475,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 353,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 474,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 168,
												"name": "FunctionInternalType"
											}
										},
										{
											"id": 355,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 476,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 356,
												"name": "FunctionInternalValueInfo"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												354,
												353,
												355
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 473,
											"character": 38
										}
									]
								},
								{
									"id": 366,
									"name": "FunctionInternalValueInfoException",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A default value -- internal functions have two default values\ndepending on whether they live in storage or elsewhere.\nIn storage the default value is 0 for both program counters.\nElsewhere they're both nonzero."
									},
									"children": [
										{
											"id": 370,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 527,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 368,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 525,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											}
										},
										{
											"id": 369,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 526,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 367,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 524,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "exception"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												370,
												368,
												369,
												367
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 523,
											"character": 51
										}
									]
								},
								{
									"id": 357,
									"name": "FunctionInternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of FunctionInternalValueInfo is used for an actual internal function."
									},
									"children": [
										{
											"id": 361,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 501,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 359,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 499,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											}
										},
										{
											"id": 363,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Is null for a free function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 506,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											}
										},
										{
											"id": 360,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 500,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 364,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "An internal opaque ID"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 510,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 358,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 498,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "function"
											}
										},
										{
											"id": 365,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 511,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"id": 1984,
												"name": "Mutability"
											}
										},
										{
											"id": 362,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 502,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												361,
												359,
												363,
												360,
												364,
												358,
												365,
												362
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 497,
											"character": 47
										}
									]
								},
								{
									"id": 371,
									"name": "FunctionInternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type is used when decoding internal functions in contexts that don't\nsupport full decoding of such functions.  The high-level decoding interface\ncan currently only sometimes perform such a full decoding.",
										"text": "In contexts where such full decoding isn't supported, you'll get one of\nthese; so you'll still get the program counter values, but further\ninformation will be absent.  Note you'll get this even if really it should\ndecode to an error, because if there's insufficient information to determine\nadditional function information, there's necessarily insufficient\ninformation to determine if it should be an error.\n"
									},
									"children": [
										{
											"id": 375,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 548,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 373,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 546,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 231,
												"name": "ContractType"
											}
										},
										{
											"id": 374,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 547,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 372,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 545,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "unknown"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												375,
												373,
												374,
												372
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 544,
											"character": 49
										}
									]
								},
								{
									"id": 390,
									"name": "IntValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A signed integer value"
									},
									"children": [
										{
											"id": 392,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 52,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 391,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 51,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 106,
												"name": "IntType"
											}
										},
										{
											"id": 393,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 53,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 394,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 395,
															"name": "asBN",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 54,
																	"character": 8
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														},
														{
															"id": 396,
															"name": "rawAsBN",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 55,
																	"character": 11
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																395,
																396
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												392,
												391,
												393
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 50,
											"character": 25
										}
									]
								},
								{
									"id": 294,
									"name": "KeyValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 295,
											"name": "key",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 248,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"id": 381,
												"name": "ElementaryValue"
											}
										},
										{
											"id": 296,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 249,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 268,
												"name": "Result"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												295,
												296
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 247,
											"character": 29
										}
									]
								},
								{
									"id": 315,
									"name": "MagicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A magic variable's value (may contain errors?)"
									},
									"children": [
										{
											"id": 317,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 321,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 316,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 320,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 246,
												"name": "MagicType"
											}
										},
										{
											"id": 318,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 323,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 319,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 320,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 321,
																"name": "field",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"id": 268,
															"name": "Result"
														}
													}
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												317,
												316,
												318
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 319,
											"character": 27
										}
									]
								},
								{
									"id": 290,
									"name": "MappingValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A mapping value (may contain errors!)"
									},
									"children": [
										{
											"id": 292,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 238,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 291,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 237,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 162,
												"name": "MappingType"
											}
										},
										{
											"id": 293,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "order is irrelevant; also note keys must be values, not errors"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 244,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 294,
													"name": "KeyValuePair"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												292,
												291,
												293
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 236,
											"character": 29
										}
									]
								},
								{
									"id": 303,
									"name": "NameValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 304,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 280,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 305,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 281,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 268,
												"name": "Result"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												304,
												305
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 279,
											"character": 30
										}
									]
								},
								{
									"id": 311,
									"name": "OptionallyNamedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 312,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 303,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 313,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 304,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 268,
												"name": "Result"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												312,
												313
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 302,
											"character": 37
										}
									]
								},
								{
									"id": 377,
									"name": "OptionsValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An options value"
									},
									"children": [
										{
											"id": 379,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 569,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 378,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 568,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 261,
												"name": "OptionsType"
											}
										},
										{
											"id": 380,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 570,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 1995,
												"name": "Options"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												379,
												378,
												380
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 567,
											"character": 29
										}
									]
								},
								{
									"id": 423,
									"name": "StringValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A string value; see [[StringValueInfo]] for more detail"
									},
									"children": [
										{
											"id": 425,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 132,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 424,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 131,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 133,
												"name": "StringType"
											}
										},
										{
											"id": 426,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 133,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"id": 427,
												"name": "StringValueInfo"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												425,
												424,
												426
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 130,
											"character": 28
										}
									]
								},
								{
									"id": 431,
									"name": "StringValueInfoMalformed",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of StringValueInfo represents a malformed string."
									},
									"children": [
										{
											"id": 433,
											"name": "asHex",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "hex-formatted, with leading \"0x\""
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 163,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 432,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 159,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "malformed"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												433,
												432
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 158,
											"character": 41
										}
									]
								},
								{
									"id": 428,
									"name": "StringValueInfoValid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "This type of StringValueInfo represents a valid UTF-8 string."
									},
									"children": [
										{
											"id": 430,
											"name": "asString",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 150,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 429,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 149,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "valid"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												430,
												429
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 148,
											"character": 37
										}
									]
								},
								{
									"id": 298,
									"name": "StructValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A struct value (may contain errors!)"
									},
									"children": [
										{
											"id": 300,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 266,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 301,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 270,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 299,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 265,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 189,
												"name": "StructType"
											}
										},
										{
											"id": 302,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "these must be stored in order!\nmoreover, any mappings *must* be included, even\nif this is a memory struct (such mappings will be empty)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 276,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 303,
													"name": "NameValuePair"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												300,
												301,
												299,
												302
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 264,
											"character": 28
										}
									]
								},
								{
									"id": 307,
									"name": "TupleValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A tuple value (may contain errors!)"
									},
									"children": [
										{
											"id": 309,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 298,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 308,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 297,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 212,
												"name": "TupleType"
											}
										},
										{
											"id": 310,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 299,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 311,
													"name": "OptionallyNamedValue"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												309,
												308,
												310
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 296,
											"character": 27
										}
									]
								},
								{
									"id": 324,
									"name": "TypeValueContract",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "A contract type's value (see [[TypeValue]])"
									},
									"children": [
										{
											"id": 326,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 353,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 325,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 352,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 254,
												"name": "TypeTypeContract"
											}
										},
										{
											"id": 327,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "these must be stored in order!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 357,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 303,
													"name": "NameValuePair"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												326,
												325,
												327
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 351,
											"character": 34
										}
									]
								},
								{
									"id": 328,
									"name": "TypeValueEnum",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An enum type's value (see [[TypeValue]])"
									},
									"children": [
										{
											"id": 330,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 367,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 329,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 366,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 258,
												"name": "TypeTypeEnum"
											}
										},
										{
											"id": 331,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "these must be stored in order!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 371,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 448,
													"name": "EnumValue"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												330,
												329,
												331
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 365,
											"character": 30
										}
									]
								},
								{
									"id": 441,
									"name": "UfixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An unsigned fixed-point value"
									},
									"children": [
										{
											"id": 443,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 187,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 442,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 186,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 142,
												"name": "UfixedType"
											}
										},
										{
											"id": 444,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 188,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 445,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 446,
															"name": "asBig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 189,
																	"character": 9
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														},
														{
															"id": 447,
															"name": "rawAsBig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 190,
																	"character": 12
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																446,
																447
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												443,
												442,
												444
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 185,
											"character": 28
										}
									]
								},
								{
									"id": 383,
									"name": "UintValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"comment": {
										"shortText": "An unsigned integer value"
									},
									"children": [
										{
											"id": 385,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 38,
													"character": 6
												}
											],
											"type": {
												"type": "literal",
												"value": "value"
											}
										},
										{
											"id": 384,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 37,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 102,
												"name": "UintType"
											}
										},
										{
											"id": 386,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 39,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 387,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 388,
															"name": "asBN",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 40,
																	"character": 8
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														},
														{
															"id": 389,
															"name": "rawAsBN",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 41,
																	"character": 11
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																388,
																389
															]
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												385,
												384,
												386
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 36,
											"character": 26
										}
									]
								},
								{
									"id": 277,
									"name": "AddressResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An address value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 157,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 416,
												"name": "AddressValue"
											},
											{
												"type": "reference",
												"id": 518,
												"name": "Errors.AddressErrorResult"
											}
										]
									}
								},
								{
									"id": 283,
									"name": "ArrayResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An array value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 207,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 284,
												"name": "ArrayValue"
											},
											{
												"type": "reference",
												"id": 577,
												"name": "Errors.ArrayErrorResult"
											}
										]
									}
								},
								{
									"id": 274,
									"name": "BoolResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A boolean value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 132,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 397,
												"name": "BoolValue"
											},
											{
												"type": "reference",
												"id": 492,
												"name": "Errors.BoolErrorResult"
											}
										]
									}
								},
								{
									"id": 276,
									"name": "BytesDynamicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value or error (dynamic-length)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 148,
											"character": 30
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 410,
												"name": "BytesDynamicValue"
											},
											{
												"type": "reference",
												"id": 513,
												"name": "Errors.BytesDynamicErrorResult"
											}
										]
									}
								},
								{
									"id": 271,
									"name": "BytesResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value or error (static or dynamic)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 111,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 275,
												"name": "BytesStaticResult"
											},
											{
												"type": "reference",
												"id": 276,
												"name": "BytesDynamicResult"
											}
										]
									}
								},
								{
									"id": 275,
									"name": "BytesStaticResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value or error (static-length)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 139,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 403,
												"name": "BytesStaticValue"
											},
											{
												"type": "reference",
												"id": 504,
												"name": "Errors.BytesStaticErrorResult"
											}
										]
									}
								},
								{
									"id": 382,
									"name": "BytesValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A bytestring value (static or dynamic)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 29,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 403,
												"name": "BytesStaticValue"
											},
											{
												"type": "reference",
												"id": 410,
												"name": "BytesDynamicValue"
											}
										]
									}
								},
								{
									"id": 282,
									"name": "ContractResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A contract value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 196,
											"character": 26
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 455,
												"name": "ContractValue"
											},
											{
												"type": "reference",
												"id": 568,
												"name": "Errors.ContractErrorResult"
											}
										]
									}
								},
								{
									"id": 459,
									"name": "ContractValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "There are two types -- one for contracts whose class we can identify, and one\nfor when we can't identify the class."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 228,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 460,
												"name": "ContractValueInfoKnown"
											},
											{
												"type": "reference",
												"id": 465,
												"name": "ContractValueInfoUnknown"
											}
										]
									}
								},
								{
									"id": 270,
									"name": "ElementaryResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An elementary value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 94,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 272,
												"name": "UintResult"
											},
											{
												"type": "reference",
												"id": 273,
												"name": "IntResult"
											},
											{
												"type": "reference",
												"id": 274,
												"name": "BoolResult"
											},
											{
												"type": "reference",
												"id": 271,
												"name": "BytesResult"
											},
											{
												"type": "reference",
												"id": 277,
												"name": "AddressResult"
											},
											{
												"type": "reference",
												"id": 278,
												"name": "StringResult"
											},
											{
												"type": "reference",
												"id": 279,
												"name": "FixedResult"
											},
											{
												"type": "reference",
												"id": 280,
												"name": "UfixedResult"
											},
											{
												"type": "reference",
												"id": 281,
												"name": "EnumResult"
											},
											{
												"type": "reference",
												"id": 282,
												"name": "ContractResult"
											}
										]
									}
								},
								{
									"id": 381,
									"name": "ElementaryValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An elementary value"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 12,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 383,
												"name": "UintValue"
											},
											{
												"type": "reference",
												"id": 390,
												"name": "IntValue"
											},
											{
												"type": "reference",
												"id": 397,
												"name": "BoolValue"
											},
											{
												"type": "reference",
												"id": 382,
												"name": "BytesValue"
											},
											{
												"type": "reference",
												"id": 416,
												"name": "AddressValue"
											},
											{
												"type": "reference",
												"id": 423,
												"name": "StringValue"
											},
											{
												"type": "reference",
												"id": 434,
												"name": "FixedValue"
											},
											{
												"type": "reference",
												"id": 441,
												"name": "UfixedValue"
											},
											{
												"type": "reference",
												"id": 448,
												"name": "EnumValue"
											},
											{
												"type": "reference",
												"id": 455,
												"name": "ContractValue"
											}
										]
									}
								},
								{
									"id": 281,
									"name": "EnumResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An enum value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 189,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 448,
												"name": "EnumValue"
											},
											{
												"type": "reference",
												"id": 550,
												"name": "Errors.EnumErrorResult"
											}
										]
									}
								},
								{
									"id": 279,
									"name": "FixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A signed fixed-point value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 171,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 434,
												"name": "FixedValue"
											},
											{
												"type": "reference",
												"id": 532,
												"name": "Errors.FixedErrorResult"
											}
										]
									}
								},
								{
									"id": 332,
									"name": "FunctionExternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An external function pointer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 383,
											"character": 34
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 333,
												"name": "FunctionExternalValue"
											},
											{
												"type": "reference",
												"id": 607,
												"name": "Errors.FunctionExternalErrorResult"
											}
										]
									}
								},
								{
									"id": 337,
									"name": "FunctionExternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "External function values come in 3 types:\n1. known function of known class\n2. known class, but can't locate function\n3. can't determine class"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 406,
											"character": 37
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 338,
												"name": "FunctionExternalValueInfoKnown"
											},
											{
												"type": "reference",
												"id": 343,
												"name": "FunctionExternalValueInfoInvalid"
											},
											{
												"type": "reference",
												"id": 347,
												"name": "FunctionExternalValueInfoUnknown"
											}
										]
									}
								},
								{
									"id": 351,
									"name": "FunctionInternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An internal function pointer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 464,
											"character": 34
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 352,
												"name": "FunctionInternalValue"
											},
											{
												"type": "reference",
												"id": 620,
												"name": "Errors.FunctionInternalErrorResult"
											}
										]
									}
								},
								{
									"id": 356,
									"name": "FunctionInternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "Internal functions come in three types:\n1. An actual function,\n2. A default value,\n3. A special value to indicate that decoding internal functions isn't supported in this context."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 487,
											"character": 37
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 357,
												"name": "FunctionInternalValueInfoKnown"
											},
											{
												"type": "reference",
												"id": 366,
												"name": "FunctionInternalValueInfoException"
											},
											{
												"type": "reference",
												"id": 371,
												"name": "FunctionInternalValueInfoUnknown"
											}
										]
									}
								},
								{
									"id": 273,
									"name": "IntResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A signed integer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 125,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 390,
												"name": "IntValue"
											},
											{
												"type": "reference",
												"id": 483,
												"name": "Errors.IntErrorResult"
											}
										]
									}
								},
								{
									"id": 314,
									"name": "MagicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A magic variable's value (or error)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 312,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 315,
												"name": "MagicValue"
											},
											{
												"type": "reference",
												"id": 597,
												"name": "Errors.MagicErrorResult"
											}
										]
									}
								},
								{
									"id": 289,
									"name": "MappingResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A mapping value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 229,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 290,
												"name": "MappingValue"
											},
											{
												"type": "reference",
												"id": 582,
												"name": "Errors.MappingErrorResult"
											}
										]
									}
								},
								{
									"id": 376,
									"name": "OptionsResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An options value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 560,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 377,
												"name": "OptionsValue"
											},
											{
												"type": "reference",
												"id": 644,
												"name": "Errors.OptionsErrorResult"
											}
										]
									}
								},
								{
									"id": 268,
									"name": "Result",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "This is the overall Result type.  It may encode an actual value or an error."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 52,
											"character": 18
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 270,
												"name": "ElementaryResult"
											},
											{
												"type": "reference",
												"id": 283,
												"name": "ArrayResult"
											},
											{
												"type": "reference",
												"id": 289,
												"name": "MappingResult"
											},
											{
												"type": "reference",
												"id": 297,
												"name": "StructResult"
											},
											{
												"type": "reference",
												"id": 306,
												"name": "TupleResult"
											},
											{
												"type": "reference",
												"id": 314,
												"name": "MagicResult"
											},
											{
												"type": "reference",
												"id": 322,
												"name": "TypeResult"
											},
											{
												"type": "reference",
												"id": 332,
												"name": "FunctionExternalResult"
											},
											{
												"type": "reference",
												"id": 351,
												"name": "FunctionInternalResult"
											},
											{
												"type": "reference",
												"id": 376,
												"name": "OptionsResult"
											}
										]
									}
								},
								{
									"id": 278,
									"name": "StringResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A string value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 164,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 423,
												"name": "StringValue"
											},
											{
												"type": "reference",
												"id": 527,
												"name": "Errors.StringErrorResult"
											}
										]
									}
								},
								{
									"id": 427,
									"name": "StringValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "These come in two types: valid strings and malformed strings."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 141,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 428,
												"name": "StringValueInfoValid"
											},
											{
												"type": "reference",
												"id": 431,
												"name": "StringValueInfoMalformed"
											}
										]
									}
								},
								{
									"id": 297,
									"name": "StructResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A struct value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 257,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 298,
												"name": "StructValue"
											},
											{
												"type": "reference",
												"id": 587,
												"name": "Errors.StructErrorResult"
											}
										]
									}
								},
								{
									"id": 306,
									"name": "TupleResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A tuple value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 289,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 307,
												"name": "TupleValue"
											},
											{
												"type": "reference",
												"id": 592,
												"name": "Errors.TupleErrorResult"
											}
										]
									}
								},
								{
									"id": 322,
									"name": "TypeResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A type's value (or error); currently only allows contract types and\nenum types"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 334,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 323,
												"name": "TypeValue"
											},
											{
												"type": "reference",
												"id": 602,
												"name": "Errors.TypeErrorResult"
											}
										]
									}
								},
								{
									"id": 323,
									"name": "TypeValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "A type's value -- for now, we consider the value of a contract type to\nconsist of the values of its non-inherited state variables in the current\ncontext, and the value of an enum type to be an array of its possible options\n(as Values).  May contain errors."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 344,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 324,
												"name": "TypeValueContract"
											},
											{
												"type": "reference",
												"id": 328,
												"name": "TypeValueEnum"
											}
										]
									}
								},
								{
									"id": 280,
									"name": "UfixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An unsigned fixed-point value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 178,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 441,
												"name": "UfixedValue"
											},
											{
												"type": "reference",
												"id": 536,
												"name": "Errors.UfixedErrorResult"
											}
										]
									}
								},
								{
									"id": 272,
									"name": "UintResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An unsigned integer value or error"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 118,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 383,
												"name": "UintValue"
											},
											{
												"type": "reference",
												"id": 474,
												"name": "Errors.UintErrorResult"
											}
										]
									}
								},
								{
									"id": 269,
									"name": "Value",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"comment": {
										"shortText": "An actual value, not an error (although if a container type it may contain errors!)"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 69,
											"character": 17
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 381,
												"name": "ElementaryValue"
											},
											{
												"type": "reference",
												"id": 284,
												"name": "ArrayValue"
											},
											{
												"type": "reference",
												"id": 290,
												"name": "MappingValue"
											},
											{
												"type": "reference",
												"id": 298,
												"name": "StructValue"
											},
											{
												"type": "reference",
												"id": 307,
												"name": "TupleValue"
											},
											{
												"type": "reference",
												"id": 315,
												"name": "MagicValue"
											},
											{
												"type": "reference",
												"id": 323,
												"name": "TypeValue"
											},
											{
												"type": "reference",
												"id": 333,
												"name": "FunctionExternalValue"
											},
											{
												"type": "reference",
												"id": 352,
												"name": "FunctionInternalValue"
											},
											{
												"type": "reference",
												"id": 377,
												"name": "OptionsValue"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										416,
										284,
										397,
										410,
										403,
										455,
										460,
										465,
										448,
										434,
										333,
										343,
										338,
										347,
										352,
										366,
										357,
										371,
										390,
										294,
										315,
										290,
										303,
										311,
										377,
										423,
										431,
										428,
										298,
										307,
										324,
										328,
										441,
										383
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												416,
												397,
												410,
												403,
												434,
												390,
												423,
												431,
												428,
												441,
												383
											]
										},
										{
											"title": "Container types",
											"children": [
												284,
												290,
												298,
												307
											]
										},
										{
											"title": "Function types",
											"children": [
												333,
												343,
												338,
												347,
												352,
												366,
												357,
												371
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												315,
												324,
												328
											]
										},
										{
											"title": "Special types (encoder-only)",
											"children": [
												377
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												455,
												460,
												465,
												448
											]
										},
										{
											"title": "Other",
											"children": [
												294,
												303,
												311
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										277,
										283,
										274,
										276,
										271,
										275,
										382,
										282,
										459,
										270,
										381,
										281,
										279,
										332,
										337,
										351,
										356,
										273,
										314,
										289,
										376,
										268,
										278,
										427,
										297,
										306,
										322,
										323,
										280,
										272,
										269
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												270,
												381,
												268,
												269
											]
										},
										{
											"title": "Elementary types",
											"children": [
												277,
												274,
												276,
												271,
												275,
												382,
												279,
												273,
												278,
												427,
												280,
												272
											]
										},
										{
											"title": "Container types",
											"children": [
												283,
												289,
												297,
												306
											]
										},
										{
											"title": "Function types",
											"children": [
												332,
												337,
												351,
												356
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												314,
												322,
												323
											]
										},
										{
											"title": "Special types (encoder-only)",
											"children": [
												376
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												282,
												459,
												281
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/values.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								469,
								80,
								692,
								267
							],
							"categories": [
								{
									"title": "Main Format",
									"children": [
										469,
										80,
										267
									]
								},
								{
									"title": "Other",
									"children": [
										692
									]
								}
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/format/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1161,
					"name": "MappingKey",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "For encoding mapping keys"
					},
					"children": [
						{
							"id": 1162,
							"name": "Encode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1163,
									"name": "encodeMappingKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 16,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1164,
											"name": "encodeMappingKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1165,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 381,
														"name": "Format.Values.ElementaryValue"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								},
								{
									"id": 1166,
									"name": "mappingKeyAsHex",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 34,
											"character": 31
										}
									],
									"signatures": [
										{
											"id": 1167,
											"name": "mappingKeyAsHex",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1168,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 381,
														"name": "Format.Values.ElementaryValue"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1163,
										1166
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1163,
												1166
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/mapping-key/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1162
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/mapping-key/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1169,
					"name": "Memory",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For allocation and decoding of memory data"
					},
					"children": [
						{
							"id": 1170,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1180,
									"name": "MemoryAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1181,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 16,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1182,
													"name": "MemoryMemberAllocation"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1181
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 15,
											"character": 33
										}
									]
								},
								{
									"id": 1177,
									"name": "MemoryAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 11,
											"character": 34
										}
									],
									"indexSignature": {
										"id": 1178,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1179,
												"name": "id",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1180,
											"name": "MemoryAllocation"
										}
									}
								},
								{
									"id": 1182,
									"name": "MemoryMemberAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1183,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 20,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1185,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 22,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 1753,
												"name": "MemoryPointer"
											}
										},
										{
											"id": 1184,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 21,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1183,
												1185,
												1184
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 19,
											"character": 39
										}
									]
								},
								{
									"id": 1171,
									"name": "getMemoryAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 14,
											"character": 36
										}
									],
									"signatures": [
										{
											"id": 1172,
											"name": "getMemoryAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1173,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1177,
												"name": "MemoryAllocations"
											}
										}
									]
								},
								{
									"id": 1174,
									"name": "isSkippedInMemoryStructs",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 26,
											"character": 40
										}
									],
									"signatures": [
										{
											"id": 1175,
											"name": "isSkippedInMemoryStructs",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1176,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Format.Types.Type"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1180,
										1177,
										1182
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1171,
										1174
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/memory/allocate/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1186,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1187,
									"name": "decodeMemory",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 22,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1188,
											"name": "decodeMemory",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1189,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1190,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1753,
														"name": "Pointer.MemoryPointer"
													}
												},
												{
													"id": 1191,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1192,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1193,
									"name": "decodeMemoryReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 65,
											"character": 47
										}
									],
									"signatures": [
										{
											"id": 1194,
											"name": "decodeMemoryReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1195,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 263,
														"name": "Format.Types.ReferenceType"
													}
												},
												{
													"id": 1196,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1743,
														"name": "Pointer.DataPointer"
													}
												},
												{
													"id": 1197,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1198,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1187,
										1193
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/memory/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1170,
								1186
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/memory/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1742,
					"name": "Pointer",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1757,
							"name": "CalldataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1760,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 38,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1758,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 36,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "calldata"
									}
								},
								{
									"id": 1759,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 37,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1760,
										1758,
										1759
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 35,
									"character": 32
								}
							]
						},
						{
							"id": 1776,
							"name": "CodePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1779,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 67,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1777,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 65,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "code"
									}
								},
								{
									"id": 1778,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 66,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1779,
										1777,
										1778
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 64,
									"character": 28
								}
							]
						},
						{
							"id": 1786,
							"name": "ConstantDefinitionPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1788,
									"name": "definition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 82,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"id": 1484,
										"name": "AstNode"
									}
								},
								{
									"id": 1787,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 81,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "definition"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1788,
										1787
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 80,
									"character": 42
								}
							]
						},
						{
							"id": 1765,
							"name": "EventDataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1768,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 50,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1766,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 48,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "eventdata"
									}
								},
								{
									"id": 1767,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 49,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1768,
										1766,
										1767
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 47,
									"character": 33
								}
							]
						},
						{
							"id": 1769,
							"name": "EventTopicPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1770,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 54,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "eventtopic"
									}
								},
								{
									"id": 1771,
									"name": "topic",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 55,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1770,
										1771
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 53,
									"character": 34
								}
							]
						},
						{
							"id": 1772,
							"name": "GenericAbiPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1775,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 61,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1773,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 59,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "abi"
									}
								},
								{
									"id": 1774,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 60,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1775,
										1773,
										1774
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 58,
									"character": 34
								}
							]
						},
						{
							"id": 1753,
							"name": "MemoryPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1756,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 32,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1754,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 30,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "memory"
									}
								},
								{
									"id": 1755,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 31,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1756,
										1754,
										1755
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 29,
									"character": 30
								}
							]
						},
						{
							"id": 1761,
							"name": "ReturndataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1764,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 44,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1762,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 42,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "returndata"
									}
								},
								{
									"id": 1763,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 43,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1764,
										1762,
										1763
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 41,
									"character": 34
								}
							]
						},
						{
							"id": 1789,
							"name": "SpecialPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1790,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 86,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "special"
									}
								},
								{
									"id": 1791,
									"name": "special",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 87,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1790,
										1791
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 85,
									"character": 31
								}
							]
						},
						{
							"id": 1783,
							"name": "StackLiteralPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1785,
									"name": "literal",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 77,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 1784,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 76,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "stackliteral"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1785,
										1784
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 75,
									"character": 36
								}
							]
						},
						{
							"id": 1749,
							"name": "StackPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1751,
									"name": "from",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 25,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1750,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 24,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "stack"
									}
								},
								{
									"id": 1752,
									"name": "to",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 26,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1751,
										1750,
										1752
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 23,
									"character": 29
								}
							]
						},
						{
							"id": 1780,
							"name": "StoragePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1781,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 71,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "storage"
									}
								},
								{
									"id": 1782,
									"name": "range",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 72,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"id": 1336,
										"name": "Range"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1781,
										1782
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 70,
									"character": 31
								}
							]
						},
						{
							"id": 1792,
							"name": "UnreadablePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1793,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 91,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "nowhere"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1793
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 90,
									"character": 34
								}
							]
						},
						{
							"id": 1746,
							"name": "AbiDataPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 16,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1757,
										"name": "CalldataPointer"
									},
									{
										"type": "reference",
										"id": 1761,
										"name": "ReturndataPointer"
									},
									{
										"type": "reference",
										"id": 1765,
										"name": "EventDataPointer"
									}
								]
							}
						},
						{
							"id": 1745,
							"name": "AbiPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 15,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1746,
										"name": "AbiDataPointer"
									},
									{
										"type": "reference",
										"id": 1772,
										"name": "GenericAbiPointer"
									}
								]
							}
						},
						{
							"id": 1747,
							"name": "BytesPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 20,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1753,
										"name": "MemoryPointer"
									},
									{
										"type": "reference",
										"id": 1746,
										"name": "AbiDataPointer"
									},
									{
										"type": "reference",
										"id": 1776,
										"name": "CodePointer"
									}
								]
							}
						},
						{
							"id": 1748,
							"name": "CodeFormPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 21,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1776,
										"name": "CodePointer"
									},
									{
										"type": "reference",
										"id": 1792,
										"name": "UnreadablePointer"
									}
								]
							}
						},
						{
							"id": 1743,
							"name": "DataPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 4,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1744,
										"name": "StackFormPointer"
									},
									{
										"type": "reference",
										"id": 1753,
										"name": "MemoryPointer"
									},
									{
										"type": "reference",
										"id": 1780,
										"name": "StoragePointer"
									},
									{
										"type": "reference",
										"id": 1746,
										"name": "AbiDataPointer"
									},
									{
										"type": "reference",
										"id": 1748,
										"name": "CodeFormPointer"
									},
									{
										"type": "reference",
										"id": 1786,
										"name": "ConstantDefinitionPointer"
									},
									{
										"type": "reference",
										"id": 1789,
										"name": "SpecialPointer"
									},
									{
										"type": "reference",
										"id": 1769,
										"name": "EventTopicPointer"
									}
								]
							}
						},
						{
							"id": 1744,
							"name": "StackFormPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 14,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1749,
										"name": "StackPointer"
									},
									{
										"type": "reference",
										"id": 1783,
										"name": "StackLiteralPointer"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1757,
								1776,
								1786,
								1765,
								1769,
								1772,
								1753,
								1761,
								1789,
								1783,
								1749,
								1780,
								1792
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1746,
								1745,
								1747,
								1748,
								1743,
								1744
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/pointer/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1199,
					"name": "Special",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "For decoding of special/magic variables"
					},
					"children": [
						{
							"id": 1200,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1206,
									"name": "decodeMagic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 24,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1207,
											"name": "decodeMagic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1208,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 246,
														"name": "Format.Types.MagicType"
													}
												},
												{
													"id": 1209,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1789,
														"name": "Pointer.SpecialPointer"
													}
												},
												{
													"id": 1210,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 314,
														"name": "Format.Values.MagicResult"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1201,
									"name": "decodeSpecial",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 12,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1202,
											"name": "decodeSpecial",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1203,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1204,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1789,
														"name": "Pointer.SpecialPointer"
													}
												},
												{
													"id": 1205,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1206,
										1201
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/special/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1211,
							"name": "Read",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1212,
									"name": "readSpecial",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/special/read/index.ts",
											"line": 4,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1213,
											"name": "readSpecial",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1214,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1789,
														"name": "Pointer.SpecialPointer"
													}
												},
												{
													"id": 1215,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1819,
														"name": "Evm.EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1212
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/special/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1200,
								1211
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/special/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1216,
					"name": "Stack",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For decoding stack variables"
					},
					"children": [
						{
							"id": 1217,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1223,
									"name": "decodeLiteral",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 40,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1224,
											"name": "decodeLiteral",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1225,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1226,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1783,
														"name": "Pointer.StackLiteralPointer"
													}
												},
												{
													"id": 1227,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1218,
									"name": "decodeStack",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 22,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1219,
											"name": "decodeStack",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1220,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1221,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1749,
														"name": "Pointer.StackPointer"
													}
												},
												{
													"id": 1222,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1223,
										1218
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/stack/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1228,
							"name": "Read",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1229,
									"name": "readStack",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 8,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1230,
											"name": "readStack",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1231,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1749,
														"name": "Pointer.StackPointer"
													}
												},
												{
													"id": 1232,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1819,
														"name": "Evm.EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								},
								{
									"id": 1233,
									"name": "readStackLiteral",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 35,
											"character": 32
										}
									],
									"signatures": [
										{
											"id": 1234,
											"name": "readStackLiteral",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1235,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1783,
														"name": "Pointer.StackLiteralPointer"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1229,
										1233
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/stack/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1217,
								1228
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/stack/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1236,
					"name": "Storage",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "For allocation and decoding of storage variables"
					},
					"children": [
						{
							"id": 1253,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1295,
									"name": "UnknownBaseContractIdError",
									"kind": 128,
									"kindString": "Class",
									"flags": {},
									"children": [
										{
											"id": 1296,
											"name": "constructor",
											"kind": 512,
											"kindString": "Constructor",
											"flags": {},
											"signatures": [
												{
													"id": 1297,
													"name": "new UnknownBaseContractIdError",
													"kind": 16384,
													"kindString": "Constructor signature",
													"flags": {},
													"parameters": [
														{
															"id": 1298,
															"name": "derivedId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1299,
															"name": "derivedName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1300,
															"name": "derivedKind",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1301,
															"name": "baseId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1295,
														"name": "UnknownBaseContractIdError"
													}
												}
											]
										},
										{
											"id": 1305,
											"name": "baseId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 39,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1302,
											"name": "derivedId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 36,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1304,
											"name": "derivedKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 38,
													"character": 20
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1303,
											"name": "derivedName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 37,
													"character": 20
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Constructors",
											"kind": 512,
											"children": [
												1296
											]
										},
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1305,
												1302,
												1304,
												1303
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 35,
											"character": 39
										}
									],
									"extendedTypes": [
										{
											"type": "reference",
											"name": "Error"
										}
									]
								},
								{
									"id": 1282,
									"name": "StateAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1283,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 35,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1290,
													"name": "StateVariableAllocation"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1283
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 34,
											"character": 32
										}
									]
								},
								{
									"id": 1284,
									"name": "StateAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 26,
											"character": 33
										}
									],
									"indexSignature": {
										"id": 1285,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1286,
												"name": "compilationId",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reflection",
											"declaration": {
												"id": 1287,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"sources": [
													{
														"fileName": "codec/lib/storage/allocate/types.ts",
														"line": 27,
														"character": 26
													}
												],
												"indexSignature": {
													"id": 1288,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 1289,
															"name": "id",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 1282,
														"name": "StateAllocation"
													}
												}
											}
										}
									}
								},
								{
									"id": 1290,
									"name": "StateVariableAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1293,
											"name": "compilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 42,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1292,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 41,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"id": 1484,
												"name": "AstNode"
											}
										},
										{
											"id": 1291,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 40,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"id": 1484,
												"name": "AstNode"
											}
										},
										{
											"id": 1294,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 43,
													"character": 9
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 1780,
														"name": "StoragePointer"
													},
													{
														"type": "reference",
														"id": 1776,
														"name": "CodePointer"
													},
													{
														"type": "reference",
														"id": 1792,
														"name": "UnreadablePointer"
													},
													{
														"type": "reference",
														"id": 1786,
														"name": "ConstantDefinitionPointer"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1293,
												1292,
												1291,
												1294
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 39,
											"character": 40
										}
									]
								},
								{
									"id": 1272,
									"name": "StorageAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1274,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 14,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1278,
													"name": "StorageMemberAllocation"
												}
											}
										},
										{
											"id": 1273,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 13,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 1331,
												"name": "StorageLength"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1274,
												1273
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 12,
											"character": 34
										}
									]
								},
								{
									"id": 1275,
									"name": "StorageAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 7,
											"character": 35
										}
									],
									"indexSignature": {
										"id": 1276,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1277,
												"name": "id",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1272,
											"name": "StorageAllocation"
										}
									}
								},
								{
									"id": 1278,
									"name": "StorageMemberAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1279,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 19,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1281,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 21,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"id": 1780,
												"name": "StoragePointer"
											}
										},
										{
											"id": 1280,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 20,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1279,
												1281,
												1280
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 18,
											"character": 40
										}
									]
								},
								{
									"id": 1257,
									"name": "getStateAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 92,
											"character": 35
										}
									],
									"signatures": [
										{
											"id": 1258,
											"name": "getStateAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "This function gets allocations for the state variables of the contracts;\nthis is distinct from getStorageAllocations, which gets allocations for\nstorage structs.",
												"text": "While mostly state variables are kept in storage, constant ones are not.\nAnd immutable ones, once those are introduced, will be kept in code!\n(But those don't exist yet so this function doesn't handle them yet.)\n"
											},
											"parameters": [
												{
													"id": 1259,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1046,
															"name": "ContractAllocationInfo"
														}
													}
												},
												{
													"id": 1260,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1261,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/storage/allocate/index.ts",
																	"line": 94,
																	"character": 24
																}
															],
															"indexSignature": {
																"id": 1262,
																"name": "__index",
																"kind": 8192,
																"kindString": "Index signature",
																"flags": {},
																"parameters": [
																	{
																		"id": 1263,
																		"name": "compilationId",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "reference",
																	"id": 1531,
																	"name": "Ast.AstNodes"
																}
															}
														}
													}
												},
												{
													"id": 1264,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												},
												{
													"id": 1265,
													"name": "storageAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1275,
														"name": "StorageAllocations"
													}
												},
												{
													"id": 1266,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1284,
														"name": "StateAllocations"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"id": 1284,
												"name": "StateAllocations"
											}
										}
									]
								},
								{
									"id": 1254,
									"name": "getStorageAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 63,
											"character": 37
										}
									],
									"signatures": [
										{
											"id": 1255,
											"name": "getStorageAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1256,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1275,
												"name": "StorageAllocations"
											}
										}
									]
								},
								{
									"id": 1267,
									"name": "storageSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 433,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1268,
											"name": "storageSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1269,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1270,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "Format.Types.TypesById"
													}
												},
												{
													"id": 1271,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"id": 1275,
														"name": "StorageAllocations"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1331,
												"name": "Storage.StorageLength"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Classes",
									"kind": 128,
									"children": [
										1295
									]
								},
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1282,
										1284,
										1290,
										1272,
										1275,
										1278
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1257,
										1254,
										1267
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/allocate/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1306,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1307,
									"name": "decodeStorage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 24,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 1308,
											"name": "decodeStorage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1309,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1310,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1780,
														"name": "Pointer.StoragePointer"
													}
												},
												{
													"id": 1311,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1317,
									"name": "decodeStorageReference",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 85,
											"character": 39
										}
									],
									"signatures": [
										{
											"id": 1318,
											"name": "decodeStorageReference",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1319,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 263,
														"name": "Format.Types.ReferenceType"
													}
												},
												{
													"id": 1320,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1780,
														"name": "Pointer.StoragePointer"
													}
												},
												{
													"id": 1321,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1312,
									"name": "decodeStorageReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 39,
											"character": 48
										}
									],
									"signatures": [
										{
											"id": 1313,
											"name": "decodeStorageReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1314,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 263,
														"name": "Format.Types.ReferenceType"
													}
												},
												{
													"id": 1315,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1743,
														"name": "Pointer.DataPointer"
													}
												},
												{
													"id": 1316,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1307,
										1317,
										1312
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1322,
							"name": "Read",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"children": [
								{
									"id": 1323,
									"name": "readSlot",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 19,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1324,
											"name": "readSlot",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1325,
													"name": "storage",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1832,
														"name": "Evm.WordMapping"
													}
												},
												{
													"id": 1326,
													"name": "slot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1343,
														"name": "Storage.Slot"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								},
								{
									"id": 1327,
									"name": "readStorage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 43,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1328,
											"name": "readStorage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1329,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1780,
														"name": "Pointer.StoragePointer"
													}
												},
												{
													"id": 1330,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1819,
														"name": "Evm.EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1323,
										1327
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1237,
							"name": "Utils",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1249,
									"name": "equalSlots",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 50,
											"character": 26
										}
									],
									"signatures": [
										{
											"id": 1250,
											"name": "equalSlots",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1251,
													"name": "slot1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1343,
																"name": "Slot"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1252,
													"name": "slot2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1343,
																"name": "Slot"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								},
								{
									"id": 1238,
									"name": "isWordsLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 9,
											"character": 29
										}
									],
									"signatures": [
										{
											"id": 1239,
											"name": "isWordsLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1240,
													"name": "size",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1331,
														"name": "StorageLength"
													}
												}
											],
											"type": {
												"type": "predicate",
												"name": "size",
												"asserts": false,
												"targetType": {
													"type": "reflection",
													"declaration": {
														"id": 1241,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"children": [
															{
																"id": 1242,
																"name": "words",
																"kind": 1024,
																"kindString": "Property",
																"flags": {},
																"sources": [
																	{
																		"fileName": "codec/lib/storage/utils.ts",
																		"line": 9,
																		"character": 67
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "number"
																}
															}
														],
														"groups": [
															{
																"title": "Properties",
																"kind": 1024,
																"children": [
																	1242
																]
															}
														]
													}
												}
											}
										}
									]
								},
								{
									"id": 1246,
									"name": "slotAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 30,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1247,
											"name": "slotAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "convert a slot to a word corresponding to actual storage address",
												"text": "if `slot` is an array, return hash of array values.\nif `slot` array is nested, recurse on sub-arrays\n"
											},
											"parameters": [
												{
													"id": 1248,
													"name": "slot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "number or possibly-nested array of numbers\n"
													},
													"type": {
														"type": "reference",
														"id": 1343,
														"name": "Slot"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									]
								},
								{
									"id": 1243,
									"name": "storageLengthToBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 13,
											"character": 36
										}
									],
									"signatures": [
										{
											"id": 1244,
											"name": "storageLengthToBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1245,
													"name": "size",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1331,
														"name": "StorageLength"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1249,
										1238,
										1246,
										1243
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/utils.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1336,
							"name": "Range",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1337,
									"name": "from",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 8,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"id": 1340,
										"name": "StoragePosition"
									}
								},
								{
									"id": 1339,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 10,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1338,
									"name": "to",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 9,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"id": 1340,
										"name": "StoragePosition"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1337,
										1339,
										1338
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 7,
									"character": 22
								}
							]
						},
						{
							"id": 1343,
							"name": "Slot",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1346,
									"name": "hashPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 21,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1344,
									"name": "key",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 19,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"id": 381,
										"name": "ElementaryValue"
									}
								},
								{
									"id": 1347,
									"name": "offset",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 22,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									}
								},
								{
									"id": 1345,
									"name": "path",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 20,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"id": 1343,
										"name": "Slot"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1346,
										1344,
										1347,
										1345
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 18,
									"character": 21
								}
							]
						},
						{
							"id": 1340,
							"name": "StoragePosition",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1342,
									"name": "index",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 15,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1341,
									"name": "slot",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/storage/types.ts",
											"line": 14,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"id": 1343,
										"name": "Slot"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1342,
										1341
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 13,
									"character": 32
								}
							]
						},
						{
							"id": 1331,
							"name": "StorageLength",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 5,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1332,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1333,
													"name": "bytes",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/storage/types.ts",
															"line": 5,
															"character": 35
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1333
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/types.ts",
													"line": 5,
													"character": 27
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1334,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1335,
													"name": "words",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/storage/types.ts",
															"line": 5,
															"character": 55
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1335
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/types.ts",
													"line": 5,
													"character": 47
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1253,
								1306,
								1322,
								1237
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1336,
								1343,
								1340
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1331
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/storage/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1144,
					"name": "Topic",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "For decoding of event topics"
					},
					"children": [
						{
							"id": 1145,
							"name": "Decode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1146,
									"name": "decodeTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/topic/decode/index.ts",
											"line": 12,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 1147,
											"name": "decodeTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1148,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Format.Types.Type"
													}
												},
												{
													"id": 1149,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1769,
														"name": "Pointer.EventTopicPointer"
													}
												},
												{
													"id": 1150,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1835,
														"name": "Evm.EvmInfo"
													}
												},
												{
													"id": 1151,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": "..."
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 855,
														"name": "DecoderRequest"
													},
													{
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												],
												"name": "Generator"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1146
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/decode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1152,
							"name": "Encode",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1153,
									"name": "encodeTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/topic/encode/index.ts",
											"line": 14,
											"character": 27
										}
									],
									"signatures": [
										{
											"id": 1154,
											"name": "encodeTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Encodes for event topics (indexed parameters).\nWarning: This function is not fully implemented yet!"
											},
											"parameters": [
												{
													"id": 1155,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 268,
														"name": "Format.Values.Result"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1153
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1153
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/encode/index.ts",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 1156,
							"name": "Read",
							"kind": 2,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 1157,
									"name": "readTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/topic/read/index.ts",
											"line": 4,
											"character": 25
										}
									],
									"signatures": [
										{
											"id": 1158,
											"name": "readTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1159,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1769,
														"name": "Pointer.EventTopicPointer"
													}
												},
												{
													"id": 1160,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 1819,
														"name": "Evm.EvmState"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1157
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/read/index.ts",
									"line": 1,
									"character": 0
								}
							]
						}
					],
					"groups": [
						{
							"title": "Namespaces",
							"kind": 2,
							"children": [
								1145,
								1152,
								1156
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/topic/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 1887,
					"name": "Wrap",
					"kind": 2,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 1928,
							"name": "BadResponseTypeError",
							"kind": 128,
							"kindString": "Class",
							"flags": {},
							"children": [
								{
									"id": 1929,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"signatures": [
										{
											"id": 1930,
											"name": "new BadResponseTypeError",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 1931,
													"name": "request",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 867,
														"name": "WrapRequest"
													}
												},
												{
													"id": 1932,
													"name": "response",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 877,
														"name": "WrapResponse"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1928,
												"name": "BadResponseTypeError"
											}
										}
									]
								},
								{
									"id": 1933,
									"name": "request",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 77,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"id": 867,
										"name": "WrapRequest"
									}
								},
								{
									"id": 1934,
									"name": "response",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 78,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 877,
										"name": "WrapResponse"
									}
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										1929
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1933,
										1934
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/errors.ts",
									"line": 76,
									"character": 33
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"name": "Error"
								}
							]
						},
						{
							"id": 1903,
							"name": "NoOverloadsMatchedError",
							"kind": 128,
							"kindString": "Class",
							"flags": {},
							"comment": {
								"shortText": "This error indicates that no overloads matched when performing\noverload resolution.  If there was only one plausible match,\na [[TypeMismatchError]] will be thrown instead."
							},
							"children": [
								{
									"id": 1904,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"signatures": [
										{
											"id": 1905,
											"name": "new NoOverloadsMatchedError",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 1906,
													"name": "methods",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1944,
															"name": "Method"
														}
													}
												},
												{
													"id": 1907,
													"name": "inputs",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												},
												{
													"id": 1908,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 264,
														"name": "TypesById"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1903,
												"name": "NoOverloadsMatchedError"
											}
										}
									]
								},
								{
									"id": 1910,
									"name": "inputs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 13,
											"character": 8
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 1909,
									"name": "methods",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 12,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1944,
											"name": "Method"
										}
									}
								},
								{
									"id": 1911,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 14,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 264,
										"name": "TypesById"
									}
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										1904
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1910,
										1909,
										1911
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/errors.ts",
									"line": 11,
									"character": 36
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"name": "Error"
								}
							]
						},
						{
							"id": 1912,
							"name": "NoUniqueBestOverloadError",
							"kind": 128,
							"kindString": "Class",
							"flags": {},
							"comment": {
								"shortText": "This error indicates that multiple overloads matched during\noverload resolution, but none of them was the unique best\noverload."
							},
							"children": [
								{
									"id": 1913,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"signatures": [
										{
											"id": 1914,
											"name": "new NoUniqueBestOverloadError",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 1915,
													"name": "resolutions",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 1940,
															"name": "Resolution"
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1912,
												"name": "NoUniqueBestOverloadError"
											}
										}
									]
								},
								{
									"id": 1916,
									"name": "resolutions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 36,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1940,
											"name": "Resolution"
										}
									}
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										1913
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1916
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/errors.ts",
									"line": 35,
									"character": 38
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"name": "Error"
								}
							]
						},
						{
							"id": 1917,
							"name": "TypeMismatchError",
							"kind": 128,
							"kindString": "Class",
							"flags": {},
							"comment": {
								"shortText": "This error indicates that the given input could not be recognized as the\ntype it was supposed to be."
							},
							"children": [
								{
									"id": 1918,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"signatures": [
										{
											"id": 1919,
											"name": "new TypeMismatchError",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 1920,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 101,
														"name": "Type"
													}
												},
												{
													"id": 1921,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 1922,
													"name": "variableName",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1923,
													"name": "reason",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1917,
												"name": "TypeMismatchError"
											}
										}
									]
								},
								{
									"id": 1926,
									"name": "dataType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 55,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"id": 101,
										"name": "Type"
									}
								},
								{
									"id": 1927,
									"name": "input",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 56,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1925,
									"name": "reason",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 54,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1924,
									"name": "variableName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/errors.ts",
											"line": 53,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										1918
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1926,
										1927,
										1925,
										1924
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/errors.ts",
									"line": 52,
									"character": 30
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"name": "Error"
								}
							]
						},
						{
							"id": 1957,
							"name": "ContractInput",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1958,
									"name": "address",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 52,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1959,
									"name": "selector",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 53,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1958,
										1959
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 51,
									"character": 30
								}
							]
						},
						{
							"id": 1966,
							"name": "EncodingTextInput",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1967,
									"name": "encoding",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 67,
											"character": 10
										}
									],
									"type": {
										"type": "literal",
										"value": "utf8"
									}
								},
								{
									"id": 1968,
									"name": "text",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 68,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1967,
										1968
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 66,
									"character": 34
								}
							]
						},
						{
							"id": 1960,
							"name": "FunctionExternalInput",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1961,
									"name": "address",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 57,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1962,
									"name": "selector",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 58,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1961,
										1962
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 56,
									"character": 38
								}
							]
						},
						{
							"id": 1944,
							"name": "Method",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {
								"shortText": "This type represents a contract method or constructor.  Note that it's not a\nmethod for a specific instance, so there's no address field."
							},
							"children": [
								{
									"id": 1948,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The ABI entry for the method."
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 36,
											"character": 5
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionEntry"
											},
											{
												"type": "reference",
												"name": "ConstructorEntry"
											}
										]
									}
								},
								{
									"id": 1947,
									"name": "inputs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The types of the inputs (each of which may optionally have a name)."
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 32,
											"character": 8
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 209,
											"name": "OptionallyNamedType"
										}
									}
								},
								{
									"id": 1945,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The method name; omitted for constructors."
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 23,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1946,
									"name": "selector",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The method selector; for a constructor, this is instead the (linked)\nconstructor bytecode."
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 28,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1948,
										1947,
										1945,
										1946
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 19,
									"character": 23
								}
							]
						},
						{
							"id": 1940,
							"name": "Resolution",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"comment": {},
							"children": [
								{
									"id": 1942,
									"name": "arguments",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 10,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 269,
											"name": "Value"
										}
									}
								},
								{
									"id": 1941,
									"name": "method",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 9,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"id": 1944,
										"name": "Method"
									}
								},
								{
									"id": 1943,
									"name": "options",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 11,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"id": 1995,
										"name": "Options"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1942,
										1941,
										1943
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 8,
									"character": 27
								}
							]
						},
						{
							"id": 1954,
							"name": "ResolveOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1956,
									"name": "allowOptions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 48,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1955,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 47,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 264,
										"name": "TypesById"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1956,
										1955
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 46,
									"character": 31
								}
							]
						},
						{
							"id": 1963,
							"name": "TypeValueInput",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1964,
									"name": "type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 62,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1965,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 63,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1964,
										1965
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 61,
									"character": 31
								}
							]
						},
						{
							"id": 1969,
							"name": "Uint8ArrayLikeInput",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1970,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 72,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1970
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 71,
									"character": 36
								}
							],
							"indexSignature": {
								"id": 1971,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 1972,
										"name": "index",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						},
						{
							"id": 1949,
							"name": "WrapOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 1952,
									"name": "loose",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 42,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1951,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 41,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1953,
									"name": "oldOptionsBehavior",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 43,
											"character": 20
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1950,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/wrap/types.ts",
											"line": 40,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"id": 264,
										"name": "TypesById"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1952,
										1951,
										1953,
										1950
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 39,
									"character": 28
								}
							]
						},
						{
							"id": 1973,
							"name": "AddressLikeType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 77,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 124,
										"name": "Format.Types.AddressType"
									},
									{
										"type": "reference",
										"id": 231,
										"name": "Format.Types.ContractType"
									}
								]
							}
						},
						{
							"id": 1974,
							"name": "AddressLikeValue",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 81,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 416,
										"name": "Format.Values.AddressValue"
									},
									{
										"type": "reference",
										"id": 455,
										"name": "Format.Values.ContractValue"
									}
								]
							}
						},
						{
							"id": 1976,
							"name": "DecimalType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 90,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 137,
										"name": "Format.Types.FixedType"
									},
									{
										"type": "reference",
										"id": 142,
										"name": "Format.Types.UfixedType"
									}
								]
							}
						},
						{
							"id": 1979,
							"name": "DecimalValue",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 102,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 434,
										"name": "Format.Values.FixedValue"
									},
									{
										"type": "reference",
										"id": 441,
										"name": "Format.Values.UfixedValue"
									}
								]
							}
						},
						{
							"id": 1975,
							"name": "IntegerOrEnumType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 85,
									"character": 29
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 102,
										"name": "Format.Types.UintType"
									},
									{
										"type": "reference",
										"id": 106,
										"name": "Format.Types.IntType"
									},
									{
										"type": "reference",
										"id": 216,
										"name": "Format.Types.EnumType"
									}
								]
							}
						},
						{
							"id": 1978,
							"name": "IntegerOrEnumValue",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 97,
									"character": 30
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 383,
										"name": "Format.Values.UintValue"
									},
									{
										"type": "reference",
										"id": 390,
										"name": "Format.Values.IntValue"
									},
									{
										"type": "reference",
										"id": 448,
										"name": "Format.Values.EnumValue"
									}
								]
							}
						},
						{
							"id": 1977,
							"name": "NumericType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 92,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 1976,
										"name": "DecimalType"
									},
									{
										"type": "reference",
										"id": 102,
										"name": "Format.Types.UintType"
									},
									{
										"type": "reference",
										"id": 106,
										"name": "Format.Types.IntType"
									}
								]
							}
						},
						{
							"id": 1980,
							"name": "TupleLikeType",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 104,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 212,
										"name": "Format.Types.TupleType"
									},
									{
										"type": "reference",
										"id": 189,
										"name": "Format.Types.StructType"
									}
								]
							}
						},
						{
							"id": 1981,
							"name": "TupleLikeValue",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/types.ts",
									"line": 106,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 307,
										"name": "Format.Values.TupleValue"
									},
									{
										"type": "reference",
										"id": 298,
										"name": "Format.Values.StructValue"
									}
								]
							}
						},
						{
							"id": 1898,
							"name": "resolveAndWrap",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/index.ts",
									"line": 124,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 1899,
									"name": "resolveAndWrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1900,
											"name": "methods",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1944,
													"name": "Method"
												}
											}
										},
										{
											"id": 1901,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 1902,
											"name": "__namedParameters",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1954,
												"name": "ResolveOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 867,
												"name": "WrapRequest"
											},
											{
												"type": "reference",
												"id": 1940,
												"name": "Resolution"
											},
											{
												"type": "reference",
												"id": 877,
												"name": "WrapResponse"
											}
										],
										"name": "Generator"
									}
								}
							]
						},
						{
							"id": 1935,
							"name": "wrap",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/wrap.ts",
									"line": 48,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 1936,
									"name": "wrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1937,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Format.Types.Type"
											}
										},
										{
											"id": 1938,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1939,
											"name": "wrapOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1949,
												"name": "WrapOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 867,
												"name": "WrapRequest"
											},
											{
												"type": "reference",
												"id": 269,
												"name": "Format.Values.Value"
											},
											{
												"type": "reference",
												"id": 877,
												"name": "WrapResponse"
											}
										],
										"name": "Generator"
									}
								}
							]
						},
						{
							"id": 1893,
							"name": "wrapForMethod",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/index.ts",
									"line": 45,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 1894,
									"name": "wrapForMethod",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1895,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "Method"
											}
										},
										{
											"id": 1896,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 1897,
											"name": "resolveOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1954,
												"name": "ResolveOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 867,
												"name": "WrapRequest"
											},
											{
												"type": "reference",
												"id": 1940,
												"name": "Resolution"
											},
											{
												"type": "reference",
												"id": 877,
												"name": "WrapResponse"
											}
										],
										"name": "Generator"
									}
								}
							]
						},
						{
							"id": 1888,
							"name": "wrapMultiple",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/wrap/index.ts",
									"line": 28,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 1889,
									"name": "wrapMultiple",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1890,
											"name": "types",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 209,
													"name": "Format.Types.OptionallyNamedType"
												}
											}
										},
										{
											"id": 1891,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 1892,
											"name": "wrapOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1949,
												"name": "WrapOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 867,
												"name": "WrapRequest"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 269,
													"name": "Format.Values.Value"
												}
											},
											{
												"type": "reference",
												"id": 877,
												"name": "WrapResponse"
											}
										],
										"name": "Generator"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Classes",
							"kind": 128,
							"children": [
								1928,
								1903,
								1912,
								1917
							],
							"categories": [
								{
									"title": "Errors",
									"children": [
										1903,
										1912,
										1917
									]
								},
								{
									"title": "Other",
									"children": [
										1928
									]
								}
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1957,
								1966,
								1960,
								1944,
								1940,
								1954,
								1963,
								1969,
								1949
							],
							"categories": [
								{
									"title": "Interfaces",
									"children": [
										1944,
										1940
									]
								},
								{
									"title": "Other",
									"children": [
										1957,
										1966,
										1960,
										1954,
										1963,
										1969,
										1949
									]
								}
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1973,
								1974,
								1976,
								1979,
								1975,
								1978,
								1977,
								1980,
								1981
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								1898,
								1935,
								1893,
								1888
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/wrap/index.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 759,
					"name": "NoProjectInfoError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the user attempted to instantiate a decoder\nwith no project information (by explicitly overriding the default)."
					},
					"children": [
						{
							"id": 760,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 761,
									"name": "new NoProjectInfoError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 759,
										"name": "NoProjectInfoError"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								760
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/errors.ts",
							"line": 73,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 1988,
					"name": "UnknownUserDefinedTypeError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the decoder was unable to locate a user-defined\ntype (struct, enum, or contract type) via its ID.  Unfortunately, we can't\nalways avoid this at the moment; we're hoping to make this more robust in\nthe future with Truffle DB.  In the meantime, it is at least worth noting that\nyou should not encounter this error if your entire project was written in\nSolidity and all compiled at once.  Sorry."
					},
					"children": [
						{
							"id": 1989,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1990,
									"name": "new UnknownUserDefinedTypeError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1991,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1992,
											"name": "typeString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1988,
										"name": "UnknownUserDefinedTypeError"
									}
								}
							]
						},
						{
							"id": 1994,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 47,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1993,
							"name": "typeString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 46,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1989
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1994,
								1993
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 45,
							"character": 40
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 847,
					"name": "AbiArgument",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoded argument passed to a transaction or event,\nor returned from a call."
					},
					"children": [
						{
							"id": 849,
							"name": "indexed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether this is an indexed paramter.  Only included for event parameters."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 528,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 848,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The name of the parameter.  Excluded if the parameter is nameless."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 524,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 850,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoded value of the argument.  Note that this is a [[Format.Values.Result|Format.Values.Result]], so it\nmay contain errors (although event decodings should typically not contain errors;\nsee the [[DecodedLog]] documentation for why)."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 534,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 268,
								"name": "Result"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								849,
								848,
								850
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 520,
							"character": 28
						}
					]
				},
				{
					"id": 874,
					"name": "AddressWrapRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A request to resolve a contract name to an address."
					},
					"children": [
						{
							"id": 875,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this is an AddressWrapRequest."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 661,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "address"
							}
						},
						{
							"id": 876,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The name that needs to be resolved to an address."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 665,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								875,
								876
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 657,
							"character": 35
						}
					]
				},
				{
					"id": 886,
					"name": "AddressWrapResponse",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A response with an address for a contract name."
					},
					"children": [
						{
							"id": 888,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The address for the contract name, or null, to indicate that no such\ncontract was found."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 732,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 887,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this is an AddressWrapResponse."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 727,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "address"
							}
						},
						{
							"id": 889,
							"name": "reason",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If present, the reason the address wasn't found."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 736,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								888,
								887,
								889
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 723,
							"character": 36
						}
					]
				},
				{
					"id": 802,
					"name": "AnonymousDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of a log as an anonymous event."
					},
					"children": [
						{
							"id": 807,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 297,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "EventEntry"
							}
						},
						{
							"id": 806,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 292,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 847,
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 804,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Format.Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 283,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 231,
								"name": "ContractType"
							}
						},
						{
							"id": 808,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 302,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 805,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the event, as a Format.Types.ContractType.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 288,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 231,
								"name": "ContractType"
							}
						},
						{
							"id": 803,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an AnonymousDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 276,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "anonymous"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								807,
								806,
								804,
								808,
								805,
								803
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 272,
							"character": 34
						}
					]
				},
				{
					"id": 819,
					"name": "BytecodeDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as bytecode for a known\nclass returned from a constructor.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 826,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If the contract created was a library, and was compiled with Solidity\n0.4.20 or later, this field will be included, which gives the address of\nthe created contract (checksummed).  This field will not be included\notherwise!"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 481,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 825,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The bytecode of the contract that was created."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 474,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 823,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of contract being constructed, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 465,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 231,
								"name": "ContractType"
							}
						},
						{
							"id": 822,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 461,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 824,
							"name": "immutables",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Decodings for any immutable state variables the created contract contains.\nOmitted in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 470,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 851,
									"name": "StateVariable"
								}
							}
						},
						{
							"id": 820,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a BytecodeDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 452,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "bytecode"
							}
						},
						{
							"id": 821,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 456,
									"character": 8
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								826,
								825,
								823,
								822,
								824,
								820,
								821
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 448,
							"character": 33
						}
					]
				},
				{
					"id": 859,
					"name": "CodeRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A request for code"
					},
					"children": [
						{
							"id": 861,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 559,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 860,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 558,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "code"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								861,
								860
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 557,
							"character": 28
						}
					]
				},
				{
					"id": 773,
					"name": "ConstructorDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a transaction decoding for a constructor call.\nIt's even possible to decode a library constructor call with this.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 777,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the constructor that was called.  Note that although\ndefault constructors don't actually get an ABI entry, we still return an\nABI entry regardless in that case."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 137,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "ConstructorEntry"
							}
						},
						{
							"id": 776,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments to the constructor.  This will be empty for a\ndefault constructor."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 131,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 847,
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 778,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The bytecode of the constructor that was called."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 141,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 775,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of contract being constructed, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 126,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 231,
								"name": "ContractType"
							}
						},
						{
							"id": 779,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 146,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 774,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a ConstructorDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 122,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "constructor"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								777,
								776,
								778,
								775,
								779,
								774
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 118,
							"character": 36
						}
					]
				},
				{
					"id": 871,
					"name": "DecimalWrapRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A request to understand an decimal value."
					},
					"children": [
						{
							"id": 873,
							"name": "input",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The input whose numeric value needs to be extracted."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 649,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 872,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this is a DecimalWrapRequest."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 645,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "decimal"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								873,
								872
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 641,
							"character": 35
						}
					]
				},
				{
					"id": 882,
					"name": "DecimalWrapResponse",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A response with an decimal numeric value, as Big."
					},
					"children": [
						{
							"id": 883,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this is a DecimalWrapResponse."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 706,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "decimal"
							}
						},
						{
							"id": 885,
							"name": "reason",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If present, the reason the number wasn't recognized as a decimal."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 715,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 884,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The numeric value that was extracted, as a Big, or null, to indicate\nthat the number format wasn't recognized."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 711,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Big"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								883,
								885,
								884
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 702,
							"character": 36
						}
					]
				},
				{
					"id": 843,
					"name": "EmptyFailureDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of empty return data from an unsuccessful\ncall, a reversion with no message."
					},
					"children": [
						{
							"id": 846,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 394,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 844,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an EmptyFailureDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 385,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "failure"
							}
						},
						{
							"id": 845,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates an unsuccessful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 389,
									"character": 8
								}
							],
							"type": {
								"type": "literal",
								"value": false
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								846,
								844,
								845
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 381,
							"character": 37
						}
					]
				},
				{
					"id": 794,
					"name": "EventDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of a log as a non-anonymous event."
					},
					"children": [
						{
							"id": 799,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 255,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "EventEntry"
							}
						},
						{
							"id": 798,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 250,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 847,
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 796,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Format.Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 241,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 231,
								"name": "ContractType"
							}
						},
						{
							"id": 801,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 264,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 797,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the event, as a Format.Types.ContractType.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 246,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 231,
								"name": "ContractType"
							}
						},
						{
							"id": 795,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an EventDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 234,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "event"
							}
						},
						{
							"id": 800,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The selector for the event, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 259,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								799,
								798,
								796,
								801,
								797,
								795,
								800
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 230,
							"character": 30
						}
					]
				},
				{
					"id": 766,
					"name": "FunctionDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a transaction decoding for an ordinary function call to a known class;\nnot a constructor call, not a fallback call."
					},
					"children": [
						{
							"id": 770,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the function that was called.  You can use this\nto extract the name, for instance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 96,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FunctionEntry"
							}
						},
						{
							"id": 769,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments to the function."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 91,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 847,
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 768,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of contract that was called, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 87,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 231,
								"name": "ContractType"
							}
						},
						{
							"id": 772,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 105,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 767,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a FunctionDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 83,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "function"
							}
						},
						{
							"id": 771,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The selector for the function that was called, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 100,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								770,
								769,
								768,
								772,
								767,
								771
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 79,
							"character": 33
						}
					]
				},
				{
					"id": 868,
					"name": "IntegerWrapRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A request to understand an integer value."
					},
					"children": [
						{
							"id": 870,
							"name": "input",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The input whose numeric value needs to be extracted."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 633,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 869,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this is a IntegerWrapRequest."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 629,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "integer"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								870,
								869
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 625,
							"character": 35
						}
					]
				},
				{
					"id": 878,
					"name": "IntegerWrapResponse",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A response with an integral numeric value, as BigInt."
					},
					"children": [
						{
							"id": 879,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this is a IntegerWrapResponse."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 685,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "integer"
							}
						},
						{
							"id": 881,
							"name": "reason",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If present, the reason the number wasn't recognized as an integer."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 694,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 880,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The numeric value that was extracted, as a BigInt, or null, to indicate\nthat either the number format wasn't recognized or wasn't an integer."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 690,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								879,
								881,
								880
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 681,
							"character": 36
						}
					]
				},
				{
					"id": 862,
					"name": "LogOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The type of the options parameter to [[decodeEvent]].  This type will be expanded in the future\nas more filtering options are added."
					},
					"children": [
						{
							"id": 864,
							"name": "extras",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.  Defaults to `\"off\"`."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 602,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"id": 866,
								"name": "ExtrasAllowed"
							}
						},
						{
							"id": 865,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If passed, restricts to events with the given ID.  This is meant for\ninternal use by Truffle Debugger; you probably don't want to bother\nwith this option."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 608,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 863,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If passed, restricts to events with the given name."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 596,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								864,
								865,
								863
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 592,
							"character": 27
						}
					]
				},
				{
					"id": 780,
					"name": "MessageDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding for a call to a known class that does not appear\nto be a function call, i.e., one that will result in the fallback function being invoked\nif there is one."
					},
					"children": [
						{
							"id": 783,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the contract's fallback or receive function that would\nhandle this message; will be null if there is none."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 169,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "FallbackEntry"
									},
									{
										"type": "reference",
										"name": "ReceiveEntry"
									}
								]
							}
						},
						{
							"id": 782,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of contract that was called, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 164,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 231,
								"name": "ContractType"
							}
						},
						{
							"id": 784,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The data that was sent to the contract."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 173,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 785,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 178,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 781,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a MessageDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 160,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "message"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								783,
								782,
								784,
								785,
								781
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 156,
							"character": 32
						}
					]
				},
				{
					"id": 1995,
					"name": "Options",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Type for transaction options, including\nQuorum-specific ones (privateFor) and\nTruffle-specific ones (overwrite)"
					},
					"children": [
						{
							"id": 2001,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This should be a bytestring (even-length hex string, with \"0x\")"
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 87,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1996,
							"name": "from",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This should be an address"
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 76,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1998,
							"name": "gas",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 81,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 1999,
							"name": "gasPrice",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 82,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 2002,
							"name": "nonce",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 88,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 2004,
							"name": "overwrite",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Truffle-specific"
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 97,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2003,
							"name": "privateFor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Quorum-specific; this should be an array of base64-encoded strings,\neach of which encodes a 32-byte bytestring"
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 93,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 1997,
							"name": "to",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This should be an address"
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 80,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2000,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 83,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2001,
								1996,
								1998,
								1999,
								2002,
								2004,
								2003,
								1997,
								2000
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 64,
							"character": 24
						}
					]
				},
				{
					"id": 814,
					"name": "RawReturnDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as a raw bytestring\n(as might be returned from a fallback function)."
					},
					"children": [
						{
							"id": 817,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The returned bytestring, as a hex string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 347,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 818,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 352,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 815,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a RawReturnDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 339,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "returnmessage"
							}
						},
						{
							"id": 816,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 343,
									"character": 8
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								817,
								818,
								815,
								816
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 335,
							"character": 34
						}
					]
				},
				{
					"id": 809,
					"name": "ReturnDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as a collection of\nreturn values from a successful call."
					},
					"children": [
						{
							"id": 812,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded return values from the function."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 322,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 847,
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 813,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 327,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 810,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a ReturnDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 314,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "return"
							}
						},
						{
							"id": 811,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 318,
									"character": 8
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								812,
								813,
								810,
								811
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 310,
							"character": 31
						}
					]
				},
				{
					"id": 836,
					"name": "RevertMessageDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as a revert message.\nFor forward-compatibility, we do not assume that the revert message is\na string."
					},
					"children": [
						{
							"id": 838,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ABI entry for the error that was thrown.  You can use this\nto extract the name, for instance.  This may be spoofed for built-in\ntypes of errors."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 413,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorEntry"
							}
						},
						{
							"id": 841,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The list of decoded arguments passed to revert(); currently, this will\nalways contain just a single string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 430,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 847,
									"name": "AbiArgument"
								}
							}
						},
						{
							"id": 842,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 435,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 839,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the\nerror type, as a Format.Types.ContractType.  This will be `null` if the\nerror was defined outside of the contract or it's one of the builtin\n`Error(string)` or `Panic(uint)` types.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 421,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 231,
								"name": "ContractType"
							}
						},
						{
							"id": 837,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a RevertMessageDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 407,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "revert"
							}
						},
						{
							"id": 840,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates an unsuccessful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 425,
									"character": 8
								}
							],
							"type": {
								"type": "literal",
								"value": false
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								838,
								841,
								842,
								839,
								837,
								840
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 403,
							"character": 38
						}
					]
				},
				{
					"id": 832,
					"name": "SelfDestructDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of unexpectedly empty return data from a\nsuccessful call, indicating that the contract self-destructed."
					},
					"children": [
						{
							"id": 835,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 373,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 833,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an SelfDestructDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 364,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "selfdestruct"
							}
						},
						{
							"id": 834,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 368,
									"character": 8
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								835,
								833,
								834
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 360,
							"character": 37
						}
					]
				},
				{
					"id": 851,
					"name": "StateVariable",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Used for representing decoded state variables."
					},
					"children": [
						{
							"id": 853,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The class of the contract that defined the variable, as a Format.Types.ContractType.\nNote that this class may differ from that of the contract being decoded, due\nto inheritance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 67,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 231,
								"name": "ContractType"
							}
						},
						{
							"id": 852,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The name of the variable.  Note that due to inheritance, this may not be unique\namong the contract's state variables."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 61,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 854,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoded value of the variable.  Note this is a Format.Values.Result, so it may be an error."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 71,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 268,
								"name": "Result"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								853,
								852,
								854
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 56,
							"character": 30
						},
						{
							"fileName": "decoder/lib/index.ts",
							"line": 158,
							"character": 15
						}
					]
				},
				{
					"id": 856,
					"name": "StorageRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A request for storage"
					},
					"children": [
						{
							"id": 858,
							"name": "slot",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 549,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 857,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 548,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "storage"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								858,
								857
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 547,
							"character": 31
						}
					]
				},
				{
					"id": 827,
					"name": "UnknownBytecodeDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a decoding of the return data as bytecode for an\nunknown class returned from a constructor.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 831,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The bytecode of the contract that was created."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 511,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 830,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 507,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 828,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownBytecodeDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 498,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "unknownbytecode"
							}
						},
						{
							"id": 829,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 502,
									"character": 8
								}
							],
							"type": {
								"type": "literal",
								"value": true
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								831,
								830,
								828,
								829
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 494,
							"character": 40
						}
					]
				},
				{
					"id": 786,
					"name": "UnknownCallDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a function call to an unknown class.  In this case,\nit's simply not possible to return much information."
					},
					"children": [
						{
							"id": 789,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The data that was sent to the contract."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 200,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 788,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 196,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 787,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 191,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "unknown"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								789,
								788,
								787
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 187,
							"character": 36
						}
					]
				},
				{
					"id": 790,
					"name": "UnknownCreationDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a contract creation for an unknown class. In this case,\nit's simply not possible to return much information."
					},
					"children": [
						{
							"id": 793,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The bytecode of the contract creation."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 222,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 792,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 218,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 762,
								"name": "DecodingMode"
							}
						},
						{
							"id": 791,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownCreationDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 213,
									"character": 6
								}
							],
							"type": {
								"type": "literal",
								"value": "create"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								793,
								792,
								791
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 209,
							"character": 40
						}
					]
				},
				{
					"id": 763,
					"name": "CalldataDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "A type representing a transaction (calldata) decoding.  As you can see, these come in five types,\neach of which is documented separately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 14,
							"character": 28
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 766,
								"name": "FunctionDecoding"
							},
							{
								"type": "reference",
								"id": 773,
								"name": "ConstructorDecoding"
							},
							{
								"type": "reference",
								"id": 780,
								"name": "MessageDecoding"
							},
							{
								"type": "reference",
								"id": 786,
								"name": "UnknownCallDecoding"
							},
							{
								"type": "reference",
								"id": 790,
								"name": "UnknownCreationDecoding"
							}
						]
					}
				},
				{
					"id": 1985,
					"name": "ContractKind",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 18,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "contract"
							},
							{
								"type": "literal",
								"value": "library"
							},
							{
								"type": "literal",
								"value": "interface"
							}
						]
					}
				},
				{
					"id": 855,
					"name": "DecoderRequest",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 540,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 856,
								"name": "StorageRequest"
							},
							{
								"type": "reference",
								"id": 859,
								"name": "CodeRequest"
							}
						]
					}
				},
				{
					"id": 762,
					"name": "DecodingMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "This is a type for recording what decoding mode a given decoding was produced in.  There are two\ndecoding modes, full mode and ABI mode.  In ABI mode, decoding is done purely based on the ABI JSON.\nFull mode, by contrast, additionally uses AST information to produce a more informative decoding.\nFor more on full mode and ABI mode, see the notes on [Decoding modes](../#decoding-modes)."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 50,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "full"
							},
							{
								"type": "literal",
								"value": "abi"
							}
						]
					}
				},
				{
					"id": 866,
					"name": "ExtrasAllowed",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.",
						"text": "* `\"off\"`: Exclude extra decodings (the default).\n* `\"on\"`: Include extra decodings.\n* `\"necessary\"`: Include extra decodings only if there are no others.\n\nExtra decodings will always be returned after other decodings.\n"
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 584,
							"character": 25
						},
						{
							"fileName": "decoder/lib/index.ts",
							"line": 163,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "off"
							},
							{
								"type": "literal",
								"value": "on"
							},
							{
								"type": "literal",
								"value": "necessary"
							}
						]
					}
				},
				{
					"id": 1982,
					"name": "Location",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 6,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "storage"
							},
							{
								"type": "literal",
								"value": "memory"
							},
							{
								"type": "literal",
								"value": "calldata"
							}
						]
					}
				},
				{
					"id": 764,
					"name": "LogDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "A type representing a log (event) decoding.  As you can see, these come in two types, each of which\nis documented separately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 26,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 794,
								"name": "EventDecoding"
							},
							{
								"type": "reference",
								"id": 802,
								"name": "AnonymousDecoding"
							}
						]
					}
				},
				{
					"id": 1984,
					"name": "Mutability",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 14,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "pure"
							},
							{
								"type": "literal",
								"value": "view"
							},
							{
								"type": "literal",
								"value": "nonpayable"
							},
							{
								"type": "literal",
								"value": "payable"
							}
						]
					}
				},
				{
					"id": 1986,
					"name": "PaddingMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 23,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "default"
							},
							{
								"type": "literal",
								"value": "permissive"
							},
							{
								"type": "literal",
								"value": "zero"
							},
							{
								"type": "literal",
								"value": "right"
							}
						]
					}
				},
				{
					"id": 1987,
					"name": "PaddingType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 32,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "left"
							},
							{
								"type": "literal",
								"value": "right"
							},
							{
								"type": "literal",
								"value": "signed"
							}
						]
					}
				},
				{
					"id": 765,
					"name": "ReturndataDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "A type representing a returndata (return value or revert message) decoding.\nAs you can see, these come in six types, each of which is documented\nseparately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 34,
							"character": 30
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 809,
								"name": "ReturnDecoding"
							},
							{
								"type": "reference",
								"id": 814,
								"name": "RawReturnDecoding"
							},
							{
								"type": "reference",
								"id": 819,
								"name": "BytecodeDecoding"
							},
							{
								"type": "reference",
								"id": 827,
								"name": "UnknownBytecodeDecoding"
							},
							{
								"type": "reference",
								"id": 832,
								"name": "SelfDestructDecoding"
							},
							{
								"type": "reference",
								"id": 836,
								"name": "RevertMessageDecoding"
							},
							{
								"type": "reference",
								"id": 843,
								"name": "EmptyFailureDecoding"
							}
						]
					}
				},
				{
					"id": 1983,
					"name": "Visibility",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 10,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "internal"
							},
							{
								"type": "literal",
								"value": "external"
							}
						]
					}
				},
				{
					"id": 867,
					"name": "WrapRequest",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "An encoder request; can come in one of three types.  It can be either a\nrequest to understand a numeric input (integer or decimal), or a request to\nresolve a contract name.  The \"kind\" field distinguishes."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 618,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 868,
								"name": "IntegerWrapRequest"
							},
							{
								"type": "reference",
								"id": 871,
								"name": "DecimalWrapRequest"
							},
							{
								"type": "reference",
								"id": 874,
								"name": "AddressWrapRequest"
							}
						]
					}
				},
				{
					"id": 877,
					"name": "WrapResponse",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "An encoder response; contains either a numeric value (as a BigInt or Big)\nor an address."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 674,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 878,
								"name": "IntegerWrapResponse"
							},
							{
								"type": "reference",
								"id": 882,
								"name": "DecimalWrapResponse"
							},
							{
								"type": "reference",
								"id": 886,
								"name": "AddressWrapResponse"
							}
						]
					}
				},
				{
					"id": 890,
					"name": "abifyCalldataDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 303,
							"character": 37
						}
					],
					"signatures": [
						{
							"id": 891,
							"name": "abifyCalldataDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 892,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 763,
										"name": "CalldataDecoding"
									}
								},
								{
									"id": 893,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 264,
										"name": "Format.Types.TypesById"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 763,
								"name": "CalldataDecoding"
							}
						}
					]
				},
				{
					"id": 894,
					"name": "abifyLogDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 330,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 895,
							"name": "abifyLogDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 896,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 764,
										"name": "LogDecoding"
									}
								},
								{
									"id": 897,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 264,
										"name": "Format.Types.TypesById"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 764,
								"name": "LogDecoding"
							}
						}
					]
				},
				{
					"id": 898,
					"name": "abifyReturndataDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 348,
							"character": 39
						}
					],
					"signatures": [
						{
							"id": 899,
							"name": "abifyReturndataDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 900,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 765,
										"name": "ReturndataDecoding"
									}
								},
								{
									"id": 901,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 264,
										"name": "Format.Types.TypesById"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 765,
								"name": "ReturndataDecoding"
							}
						}
					]
				},
				{
					"id": 734,
					"name": "decodeCalldata",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 54,
							"character": 31
						}
					],
					"signatures": [
						{
							"id": 735,
							"name": "decodeCalldata",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 736,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1835,
										"name": "Evm.EvmInfo"
									}
								},
								{
									"id": 737,
									"name": "isConstructor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 855,
										"name": "DecoderRequest"
									},
									{
										"type": "reference",
										"id": 763,
										"name": "CalldataDecoding"
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								],
								"name": "Generator"
							}
						}
					]
				},
				{
					"id": 729,
					"name": "decodeEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 202,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 730,
							"name": "decodeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 731,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1835,
										"name": "Evm.EvmInfo"
									}
								},
								{
									"id": 732,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 733,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 862,
										"name": "LogOptions"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 855,
										"name": "DecoderRequest"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 764,
											"name": "LogDecoding"
										}
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								],
								"name": "Generator"
							}
						}
					]
				},
				{
					"id": 738,
					"name": "decodeReturndata",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 592,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 739,
							"name": "decodeReturndata",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If there are multiple possibilities, they're always returned in\nthe order: return, revert, returnmessage, failure, empty, bytecode, unknownbytecode\nMoreover, within \"revert\", builtin ones are put above custom ones"
							},
							"parameters": [
								{
									"id": 740,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1835,
										"name": "Evm.EvmInfo"
									}
								},
								{
									"id": 741,
									"name": "successAllocation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 1016,
												"name": "AbiData.Allocate.ReturndataAllocation"
											},
											{
												"type": "literal",
												"value": null
											}
										]
									}
								},
								{
									"id": 742,
									"name": "status",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 743,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 855,
										"name": "DecoderRequest"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 765,
											"name": "ReturndataDecoding"
										}
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								],
								"name": "Generator"
							}
						}
					]
				},
				{
					"id": 744,
					"name": "decodeRevert",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 905,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 745,
							"name": "decodeRevert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Decodes the return data from a failed call.",
								"returns": "An array of possible decodings.  At the moment it's\n  impossible for there to be more than one.  (If the call didn't actually\n  fail, or failed in a nonstandard way, you may get no decodings at all, though!)\n\n  Decodings can either be decodings of revert messages, or decodings\n  indicating that there was no revert message.  If somehow both were to be\n  possible, they'd go in that order, although as mentioned, there (at least\n  currently) isn't any way for that to occur."
							},
							"parameters": [
								{
									"id": 746,
									"name": "returndata",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The returned data, as a Uint8Array."
									},
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 765,
									"name": "ReturndataDecoding"
								}
							}
						}
					]
				},
				{
					"id": 723,
					"name": "decodeVariable",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 36,
							"character": 31
						}
					],
					"signatures": [
						{
							"id": 724,
							"name": "decodeVariable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 725,
									"name": "definition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1484,
										"name": "Ast.AstNode"
									}
								},
								{
									"id": 726,
									"name": "pointer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1743,
										"name": "Pointer.DataPointer"
									}
								},
								{
									"id": 727,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1835,
										"name": "Evm.EvmInfo"
									}
								},
								{
									"id": 728,
									"name": "compilationId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 855,
										"name": "DecoderRequest"
									},
									{
										"type": "reference",
										"id": 268,
										"name": "Format.Values.Result"
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								],
								"name": "Generator"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Namespaces",
					"kind": 2,
					"children": [
						965,
						1359,
						1348,
						902,
						941,
						1556,
						1547,
						1633,
						1701,
						1794,
						1869,
						79,
						1161,
						1169,
						1742,
						1199,
						1216,
						1236,
						1144,
						1887
					],
					"categories": [
						{
							"title": "Data",
							"children": [
								79
							]
						},
						{
							"title": "ABI data location",
							"children": [
								965,
								1144
							]
						},
						{
							"title": "Solidity data location",
							"children": [
								1348,
								1161,
								1169,
								1199,
								1216,
								1236
							]
						},
						{
							"title": "Other",
							"children": [
								1359,
								902,
								941,
								1556,
								1547,
								1633,
								1701,
								1794,
								1869,
								1742,
								1887
							]
						}
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						759,
						1988
					],
					"categories": [
						{
							"title": "Errors",
							"children": [
								1988
							]
						},
						{
							"title": "Exception",
							"children": [
								759
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						847,
						874,
						886,
						802,
						819,
						859,
						773,
						871,
						882,
						843,
						794,
						766,
						868,
						878,
						862,
						780,
						1995,
						814,
						809,
						836,
						832,
						851,
						856,
						827,
						786,
						790
					],
					"categories": [
						{
							"title": "Output",
							"children": [
								847,
								802,
								819,
								773,
								843,
								794,
								766,
								780,
								814,
								809,
								836,
								832,
								851,
								827,
								786,
								790
							]
						},
						{
							"title": "Requests",
							"children": [
								874,
								886,
								859,
								871,
								882,
								868,
								878,
								856
							]
						},
						{
							"title": "Inputs",
							"children": [
								862
							]
						},
						{
							"title": "Interfaces",
							"children": [
								1995
							]
						}
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						763,
						1985,
						855,
						762,
						866,
						1982,
						764,
						1984,
						1986,
						1987,
						765,
						1983,
						867,
						877
					],
					"categories": [
						{
							"title": "Output",
							"children": [
								763,
								762,
								764,
								765
							]
						},
						{
							"title": "Enumerations",
							"children": [
								1985,
								1982,
								1984,
								1986,
								1987,
								1983
							]
						},
						{
							"title": "Requests",
							"children": [
								855,
								867,
								877
							]
						},
						{
							"title": "Inputs",
							"children": [
								866
							]
						}
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						890,
						894,
						898,
						734,
						729,
						738,
						744,
						723
					],
					"categories": [
						{
							"title": "Decoding",
							"children": [
								734,
								729,
								738,
								723
							]
						},
						{
							"title": "Decoding convenience",
							"children": [
								744
							]
						},
						{
							"title": "ABIfication",
							"children": [
								890,
								894,
								898
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "codec/lib/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2,
			"name": "@truffle/decoder",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "# Truffle Decoder",
				"text": "This module provides an interface for decoding contract state, transaction\ncalldata, events, and return values and revert strings.  It's an interface to\nthe same low-level decoding functionality that Truffle Debugger uses.  However,\nit has additional functionality that the debugger does not need, and the\ndebugger has additional functionality that this decoder does not need.\n\nThe interface is split into three classes: The project decoder, the contract\ndecoder, and the contract instance decoder.  The project decoder is associated\nto the project as a whole and decodes transaction calldata and events.  The\ncontract decoder is associated to a specific contract class.  It has all the\ncapabilities of the project decoder, but it can also decode return values from\ncalls made by the given contract class.  The contract instance decoder is\nassociated to a specific contract instance; it again has all the capabilities\nof the project decoder and contract decoder, but it can also decode the state\nvariables for the specific instance.  (In addition, in the case that the\ncontract does not include a `deployedBytecode` field in its artifact, which can\nhinder decoding certain things, the contract instance decoder can sometimes\nwork around this where the other decoders cannot.)\n\nThis documentation describes the current state of the decoder, but further\nimprovements are planned.\n\n## Usage\n\n### Initialization\n\nCreate a decoder with one of the various constructor functions.\n\nFor a project decoder, use the [[forProject|`forProject`]] function.\n\nFor a contract decoder, use the [[forArtifact|`forArtifact`]] or\n[[forContract|`forContract`]] function.\n\nFor a contract instance decoder, use one of the following:\n[[forDeployedArtifact|`forDeployedArtifact`]]\n[[forDeployedContract|`forDeployedContract`]]\n[[forArtifactAt|`forArtifactAt`]]\n[[forContractAt|`forContractAt`]]\n[[forContractInstance|`forContractInstance`]]\n[[forAddress|`forAddress`]]\n\nSee the documentation of these functions for details, or below for usage\nexamples.\n\nAll of these functions take a final argument in which information about the\nproject is specified; currently only a few methods for specifying project\ninformation are allowed, but more are planned.\n\nOne can also spawn decoders from other decoders by supplying additional\ninformation.  See the documentation for the individual decoder classes for a\nmethod listing.\n\n### Decoder methods\n\nSee the documentation for the individual decoder classes for a method listing.\n\n### Output format information\n\nThe decoder outputs lossless, machine-readable [[Format.Values.Result]] objects\ncontaining individual decoded values. See the [[Format|format documentation]]\nfor an overview and complete module listing.\n\n### Decoding modes, abification, and caveats\n\nThe decoder runs in either of two modes: full mode or ABI mode. Full mode\nrequires some additional constraints but returns substantially more detailed\ninformation. Please see the notes on [decoding modes](../#decoding-modes) for\nmore about this distinction.\n\nSee also the notes about [decoding state variables](../#additional-notes-on-decoding-state-variables) for additional\ncaveats about what may or may not be fully decodable.\n\n### Basic usage examples\n\n#### Decoding a log with the project decoder\n\nThis usage example is for a project with two contracts, `Contract1` and\n`Contract2`.\n\n```typescript\nimport { forProject } from \"@truffle/decoder\";\nconst contract1 = artifacts.require(\"Contract1\");\nconst contract2 = artifacts.require(\"Contract2\");\nconst provider = web3.currentProvider;\nconst decoder = await Decoder.forProject(provider, [contract1, contract2]);\nconst decodings = await decoder.decodeLog(log);\n```\n\nThe usage of [[ProjectDecoder.decodeTransaction|decodeTransaction]] is similar.\n\nFor getting already-decoded logs meeting appropriate conditions, see\n[[ProjectDecoder.events]].\n\n#### Decoding state variables with the contract instance decoder\n\nThis usage example is for decoding the state variables of a contract `Contract`\nin a project that also contains a contract `OtherContract`.\n\n```typescript\nimport { forContract } from \"@truffle/decoder\";\nconst contract = artifacts.require(\"Contract\");\nconst otherContract = artifacts.require(\"OtherContract\");\nconst decoder = await Decoder.forContract(contract, [otherContract]);\nconst instanceDecoder = await decoder.forInstance();\nconst variables = await instanceDecoder.variables();\n```\n\nIn this example, we use the deployed version of `Contract`.  If we wanted an\ninstance at a different address, we could pass the address to `forInstance`.\n\nIn addition, rather than using `forContract` and then `forInstance`, we could\nalso use [[forDeployedContract|`forContractInstance`]] to perform both of these\nin one step.  If we wanted to do this with a specified address, we could use\n[[forContractAt|`forContractAt`]].\n\nYet another way would be:\n```typescript\nimport { forContractInstance } from \"@truffle/decoder\";\nconst contract = artifacts.require(\"Contract\");\nconst otherContract = artifacts.require(\"OtherContract\");\nconst deployedContract = await contract.deployed();\nconst instanceDecoder = await Decoder.forContractInstance(deployedContract, [otherContract]);\nconst variables = await instanceDecoder.variables();\n```\n\nThese examples are not exhaustive.\n\nOne can find more advanced decoding examples with\n[[ContractInstanceDecoder.variable|`variable`]] and\n[[ContractInstanceDecoder.watchMappingKey|`watchMappingKey`]] at the\ndocumentation for these individual functions.\n"
			},
			"originalName": "decoder/lib",
			"children": [
				{
					"id": 2291,
					"name": "ContractAllocationFailedError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that something went wrong while attempting to determine the location\nof this contract's state variables.  This error will be thrown if you attempt to use\ndecoding functions after something went wrong during setup.  Unfortunately, we can't\nalways avoid this at the moment; we're hoping to make this more robust in the future\nwith Truffle DB.  In the meantime, it is at least worth noting that you should not encounter\nthis error if your entire project was written in Solidity and all compiled at once.  Sorry."
					},
					"children": [
						{
							"id": 2292,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2293,
									"name": "new ContractAllocationFailedError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2294,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2295,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2296,
											"name": "compilationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2291,
										"name": "ContractAllocationFailedError"
									}
								}
							]
						},
						{
							"id": 2299,
							"name": "compilationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 66,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2298,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 65,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2297,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 64,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2292
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2299,
								2298,
								2297
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 63,
							"character": 42
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2273,
					"name": "ContractBeingDecodedHasNoNodeError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to decode does not have AST\ninformation associated with it, or that the decoder cannot find it.  This error will\nbe thrown if you attempt to use functions that require AST information with such a contract."
					},
					"children": [
						{
							"id": 2274,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2275,
									"name": "new ContractBeingDecodedHasNoNodeError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2276,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2277,
											"name": "compilationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2273,
										"name": "ContractBeingDecodedHasNoNodeError"
									}
								}
							]
						},
						{
							"id": 2279,
							"name": "compilationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 12,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2278,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 11,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2274
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2279,
								2278
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 10,
							"character": 47
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2005,
					"name": "ContractDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ContractDecoder class.  Decodes return values, and spawns the\n[[ContractInstanceDecoder]] class.  Also, decodes transactions logs.  See\nbelow for a method listing."
					},
					"children": [
						{
							"id": 2006,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2007,
									"name": "new ContractDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2008,
											"name": "contract",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1607,
												"name": "Contract"
											}
										},
										{
											"id": 2009,
											"name": "compilation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1594,
												"name": "Compilation"
											}
										},
										{
											"id": 2010,
											"name": "projectDecoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2183,
												"name": "ProjectDecoder"
											}
										},
										{
											"id": 2011,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2005,
										"name": "ContractDecoder"
									}
								}
							]
						},
						{
							"id": 2020,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 648,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 1843,
								"name": "AllocationInfo"
							}
						},
						{
							"id": 2016,
							"name": "artifact",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 643,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "ContractObject"
							}
						},
						{
							"id": 2014,
							"name": "compilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 641,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 1594,
								"name": "Compilation"
							}
						},
						{
							"id": 2019,
							"name": "contextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 646,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2013,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 639,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 1660,
								"name": "Contexts"
							}
						},
						{
							"id": 2015,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 642,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 1607,
								"name": "Contract"
							}
						},
						{
							"id": 2018,
							"name": "contractNetwork",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 645,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2017,
							"name": "contractNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 644,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"id": 1484,
								"name": "AstNode"
							}
						},
						{
							"id": 2021,
							"name": "noBytecodeAllocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 649,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2022,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 2023,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 2024,
												"name": "selector",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1045,
											"name": "AbiData.Allocate.CalldataAndReturndataAllocation"
										}
									}
								}
							}
						},
						{
							"id": 2027,
							"name": "projectDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 655,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 2183,
								"name": "ProjectDecoder"
							}
						},
						{
							"id": 2026,
							"name": "stateVariableReferences",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 653,
									"character": 33
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1290,
									"name": "StateVariableAllocation"
								}
							}
						},
						{
							"id": 2025,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 652,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 264,
								"name": "TypesById"
							}
						},
						{
							"id": 2012,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 637,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 2030,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 755,
									"character": 21
								}
							],
							"getSignature": [
								{
									"id": 2031,
									"name": "context",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1663,
										"name": "Context"
									}
								}
							]
						},
						{
							"id": 2063,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 925,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2064,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectDecoder.abifyCalldataDecoding]]."
									},
									"parameters": [
										{
											"id": 2065,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 763,
												"name": "CalldataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 763,
										"name": "CalldataDecoding"
									}
								}
							]
						},
						{
							"id": 2066,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 932,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 2067,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectDecoder.abifyLogDecoding]]."
									},
									"parameters": [
										{
											"id": 2068,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 764,
												"name": "LogDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 764,
										"name": "LogDecoding"
									}
								}
							]
						},
						{
							"id": 2069,
							"name": "abifyReturndataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 939,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2070,
									"name": "abifyReturndataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectDecoder.abifyReturndataDecoding]]."
									},
									"parameters": [
										{
											"id": 2071,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 765,
												"name": "ReturndataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 765,
										"name": "ReturndataDecoding"
									}
								}
							]
						},
						{
							"id": 2056,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 902,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 2057,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ProjectDecoder.decodeLog]]."
									},
									"parameters": [
										{
											"id": 2058,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The log to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"id": 2354,
												"name": "Log"
											}
										},
										{
											"id": 2059,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2339,
												"name": "DecodeLogOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 764,
													"name": "LogDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2032,
							"name": "decodeReturnValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 791,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2033,
									"name": "decodeReturnValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes the return value of a call.  Return values can be ambiguous, so this so\nthis function returns an array of [[ReturndataDecoding|ReturndataDecodings]].\n\nNote that return values are decoded in strict mode, so none of the decodings should\ncontain errors; if a decoding would contain an error, instead it is simply excluded from the\nlist of possible decodings.\n\nIf there are multiple possible decodings, they will always be listed in the following order:\n1. The decoded return value from a successful call.\n2. The decoded revert message from a call that reverted with a message.\n3. A decoding indicating that the call reverted with no message.\n4. A decoding indicating that the call self-destructed.\n\nYou can check the kind and field to distinguish between these.\n\nIf no possible decodings are found, the returned array of decodings will be empty.\n\nNote that different decodings may use different decoding modes.\n\nDecoding creation calls with this method is not supported.  If you simply\nwant to decode a revert message from an arbitrary call that you know\nfailed, you may also want to see the [[decodeRevert]] function in\n`@truffle/codec`.\n"
									},
									"parameters": [
										{
											"id": 2034,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The abi entry for the function call whose return value is being decoded."
											},
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 2035,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The data to be decoded, as a hex string (beginning with \"0x\")."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2036,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Additional options, such as the block the call occurred in.\n  See [[ReturnOptions]] for more information.\n"
											},
											"type": {
												"type": "reference",
												"id": 2336,
												"name": "ReturnOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 765,
													"name": "ReturndataDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2037,
							"name": "decodeReturnValueWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 806,
									"character": 54
								}
							],
							"signatures": [
								{
									"id": 2038,
									"name": "decodeReturnValueWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2039,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 2040,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2041,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2336,
												"name": "ReturnOptions"
											},
											"defaultValue": "..."
										},
										{
											"id": 2042,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1660,
												"name": "Contexts"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 765,
													"name": "ReturndataDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2053,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 890,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2054,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ProjectDecoder.decodeTransaction]]."
									},
									"parameters": [
										{
											"id": 2055,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The transaction to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"id": 2342,
												"name": "Transaction"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 763,
												"name": "CalldataDecoding"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2060,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 916,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 2061,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ProjectDecoder.events]]."
									},
									"parameters": [
										{
											"id": 2062,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch and how to decode them;\n  see the documentation on the EventOptions type for more.\n"
											},
											"type": {
												"type": "reference",
												"id": 2330,
												"name": "EventOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2320,
													"name": "DecodedLog"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2043,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 865,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2044,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of this contract."
									},
									"parameters": [
										{
											"id": 2045,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The address of the contract instance decode.  If left out, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2080,
												"name": "ContractInstanceDecoder"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2072,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 950,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2073,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 1843,
										"name": "AllocationInfo"
									}
								}
							]
						},
						{
							"id": 2046,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 871,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2047,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2048,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2049,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2078,
							"name": "getContractInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 971,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 2079,
									"name": "getContractInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "ContractInfo"
									}
								}
							]
						},
						{
							"id": 2076,
							"name": "getProjectDecoder",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 964,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2077,
									"name": "getProjectDecoder",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 2183,
										"name": "ProjectDecoder"
									}
								}
							]
						},
						{
							"id": 2074,
							"name": "getStateVariableReferences",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 957,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 2075,
									"name": "getStateVariableReferences",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1290,
											"name": "StateVariableAllocation"
										}
									}
								}
							]
						},
						{
							"id": 2028,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 751,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 2029,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2050,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 878,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 2051,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2052,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2363,
												"name": "BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2006
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2020,
								2016,
								2014,
								2019,
								2013,
								2015,
								2018,
								2017,
								2021,
								2027,
								2026,
								2025,
								2012
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2030
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2063,
								2066,
								2069,
								2056,
								2032,
								2037,
								2053,
								2060,
								2043,
								2072,
								2046,
								2078,
								2076,
								2074,
								2028,
								2050
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 636,
							"character": 28
						}
					]
				},
				{
					"id": 2080,
					"name": "ContractInstanceDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ContractInstanceDecoder class.  Decodes storage for a specified\ninstance.  Also, decodes transactions, logs, and return values.  See below\nfor a method listing.",
						"text": "Note that when using this class to decode transactions, logs, and return\nvalues, it does have one advantage over using the ProjectDecoder or\nContractDecoder.  If the artifact for the class does not have a\ndeployedBytecode field, the ProjectDecoder (and therefore also the\nContractDecoder) will not be able to tell that this instance is of that\nclass, and so will fail to decode transactions sent to it or logs\noriginating from it, and will fall back to ABI mode when decoding return\nvalues received from it.  However, the ContractInstanceDecoder has that\ninformation and will make use of it, making it possible for it to decode\ntransactions sent to this instance, or logs originating from it, or decode\nreturn values received from it in full mode, even if the deployedBytecode\nfield is misssing."
					},
					"children": [
						{
							"id": 2081,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2082,
									"name": "new ContractInstanceDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2083,
											"name": "contractDecoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2005,
												"name": "ContractDecoder"
											}
										},
										{
											"id": 2084,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2080,
										"name": "ContractInstanceDecoder"
									}
								}
							]
						},
						{
							"id": 2095,
							"name": "additionalContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1015,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"id": 1660,
								"name": "Contexts"
							},
							"defaultValue": "..."
						},
						{
							"id": 2101,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1019,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 1843,
								"name": "AllocationInfo"
							}
						},
						{
							"id": 2086,
							"name": "compilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1005,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 1594,
								"name": "Compilation"
							}
						},
						{
							"id": 2093,
							"name": "compiler",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1012,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 1552,
								"name": "CompilerVersion"
							}
						},
						{
							"id": 2092,
							"name": "contextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1011,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2094,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1014,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 1660,
								"name": "Contexts"
							},
							"defaultValue": "..."
						},
						{
							"id": 2087,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1006,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 1607,
								"name": "Contract"
							}
						},
						{
							"id": 2090,
							"name": "contractAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1009,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2091,
							"name": "contractCode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1010,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2106,
							"name": "contractDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1028,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"id": 2005,
								"name": "ContractDecoder"
							}
						},
						{
							"id": 2089,
							"name": "contractNetwork",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1008,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2088,
							"name": "contractNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1007,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"id": 1484,
								"name": "AstNode"
							}
						},
						{
							"id": 2108,
							"name": "encoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1030,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ProjectEncoder"
							}
						},
						{
							"id": 2103,
							"name": "internalFunctionsTable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1022,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"id": 1851,
								"name": "InternalFunctions"
							}
						},
						{
							"id": 2104,
							"name": "mappingKeys",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1024,
									"character": 21
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1343,
									"name": "Slot"
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 2107,
							"name": "projectDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1029,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 2183,
								"name": "ProjectDecoder"
							}
						},
						{
							"id": 2096,
							"name": "referenceDeclarations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1017,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2097,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 2098,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 2099,
												"name": "compilationId",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1531,
											"name": "Ast.AstNodes"
										}
									}
								}
							}
						},
						{
							"id": 2102,
							"name": "stateVariableReferences",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1021,
									"character": 33
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1290,
									"name": "StateVariableAllocation"
								}
							}
						},
						{
							"id": 2105,
							"name": "storageCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1026,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "StorageCache"
							},
							"defaultValue": "..."
						},
						{
							"id": 2100,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1018,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 264,
								"name": "TypesById"
							}
						},
						{
							"id": 2085,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1003,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 2111,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1176,
									"character": 21
								}
							],
							"getSignature": [
								{
									"id": 2112,
									"name": "context",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1663,
										"name": "Context"
									}
								}
							]
						},
						{
							"id": 2164,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1603,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2165,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectDecoder.abifyCalldataDecoding]]."
									},
									"parameters": [
										{
											"id": 2166,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 763,
												"name": "CalldataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 763,
										"name": "CalldataDecoding"
									}
								}
							]
						},
						{
							"id": 2167,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1610,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 2168,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectDecoder.abifyLogDecoding]]."
									},
									"parameters": [
										{
											"id": 2169,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 764,
												"name": "LogDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 764,
										"name": "LogDecoding"
									}
								}
							]
						},
						{
							"id": 2170,
							"name": "abifyReturndataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1617,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2171,
									"name": "abifyReturndataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectDecoder.abifyReturndataDecoding]]."
									},
									"parameters": [
										{
											"id": 2172,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 765,
												"name": "ReturndataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 765,
										"name": "ReturndataDecoding"
									}
								}
							]
						},
						{
							"id": 2113,
							"name": "checkAllocationSuccess",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1180,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2114,
									"name": "checkAllocationSuccess",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2176,
							"name": "constructSlot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1651,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 2177,
									"name": "constructSlot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2178,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2179,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 2180,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2181,
															"name": "slot",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "decoder/lib/decoders.ts",
																	"line": 1654,
																	"character": 19
																}
															],
															"type": {
																"type": "reference",
																"id": 1343,
																"name": "Slot"
															}
														},
														{
															"id": 2182,
															"name": "type",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "decoder/lib/decoders.ts",
																	"line": 1654,
																	"character": 40
																}
															],
															"type": {
																"type": "reference",
																"id": 101,
																"name": "Type"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																2181,
																2182
															]
														}
													]
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2155,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1567,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 2156,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ProjectDecoder.decodeLog]].\n"
									},
									"parameters": [
										{
											"id": 2157,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2354,
												"name": "Log"
											}
										},
										{
											"id": 2158,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2339,
												"name": "DecodeLogOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 764,
													"name": "LogDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2159,
							"name": "decodeReturnValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1587,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2160,
									"name": "decodeReturnValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ContractDecoder.decodeReturnValue]].\n\nIf the contract artifact is missing its bytecode, using this method,\nrather than the one in [[ContractDecoder]], can sometimes provide\nadditional decoding information.\n"
									},
									"parameters": [
										{
											"id": 2161,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 2162,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2163,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2336,
												"name": "ReturnOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 765,
													"name": "ReturndataDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2152,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1553,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2153,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ProjectDecoder.decodeTransaction]].\n"
									},
									"parameters": [
										{
											"id": 2154,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2342,
												"name": "Transaction"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 763,
												"name": "CalldataDecoding"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2115,
							"name": "decodeVariable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1196,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2116,
									"name": "decodeVariable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2117,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1290,
												"name": "StateVariableAllocation"
											}
										},
										{
											"id": 2118,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 851,
												"name": "StateVariable"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2173,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1632,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 2174,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This mostly behaves as [[ProjectDecoder.events]].\nHowever, unlike other variants of this function, this one, by default, restricts to events originating from this instance's address.\nIf you don't want to restrict like that, you can explicitly use `address: undefined` in the options to disable this.\n(You can also of course set a different address to restrict to that.)"
									},
									"parameters": [
										{
											"id": 2175,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch; see the documentation on the [[EventOptions]] type for more.\n"
											},
											"type": {
												"type": "reference",
												"id": 2330,
												"name": "EventOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2320,
													"name": "DecodedLog"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2129,
							"name": "findVariableByNameOrId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1362,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2130,
									"name": "findVariableByNameOrId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2131,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1290,
										"name": "StateVariableAllocation"
									}
								}
							]
						},
						{
							"id": 2137,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1428,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2138,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2139,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2140,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2132,
							"name": "getStorage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1395,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2133,
									"name": "getStorage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2134,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2135,
											"name": "slot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 2136,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2109,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1074,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 2110,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2141,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1435,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 2142,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2143,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2363,
												"name": "BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2119,
							"name": "state",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1264,
									"character": 20
								}
							],
							"signatures": [
								{
									"id": 2120,
									"name": "state",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Returns information about the state of the contract, but does not include\ninformation about the storage or decoded variables.  See the documentation\nfor the [[ContractState]] type for more."
									},
									"parameters": [
										{
											"id": 2121,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values.\n"
											},
											"type": {
												"type": "reference",
												"id": 2363,
												"name": "BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2313,
												"name": "ContractState"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2148,
							"name": "unwatchMappingKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1524,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2149,
									"name": "unwatchMappingKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Opposite of [[watchMappingKey]]; unwatches the specified mapping key.  See\nwatchMappingKey for more on how watching mapping keys works, and on how\nthe parameters work.\n\nNote that unwatching a mapping key will also unwatch all its descendants.\nE.g., if `m` is of type `mapping(uint => mapping(uint => uint))`, then\nunwatching `m[0]` will also unwatch `m[0][0]`, `m[0][1]`, etc, if these\nare currently watched.\n"
									},
									"parameters": [
										{
											"id": 2150,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2151,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2125,
							"name": "variable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1344,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2126,
									"name": "variable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes an individual contract variable; returns its value as a\n[[Format.Values.Result|Result]].  See the documentation for\n[[variables|variables()]] for various caveats that also apply here.\n\nIf the variable can't be located, throws an exception.",
										"tags": [
											{
												"tag": "example",
												"text": "Consider a contract `Derived` inheriting from a contract `Base`.\n  Suppose `Derived` has a variable `x` and `Base` has variables `x` and\n  `y`.  One can access `Derived.x` as `variable(\"x\")` or\n  `variable(\"Derived.x\")`, can access `Base.x` as `variable(\"Base.x\")`,\n  and can access `Base.y` as `variable(\"y\")` or `variable(\"Base.y\")`.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2127,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name (or numeric ID, if you know that) of the\n  variable.  Can be given as a qualified name, allowing one to get at\n  shadowed variables from base contracts.  If given by ID, can be given as a\n  number or numeric string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2128,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values."
											},
											"type": {
												"type": "reference",
												"id": 2363,
												"name": "BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 268,
												"name": "Result"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2122,
							"name": "variables",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1304,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 2123,
									"name": "variables",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes the contract's variables; returns an array of these decoded variables.\nSee the documentation of the [[DecodedVariable]] type for more.\n\nNote that variable decoding can only operate in full mode; if the decoder wasn't able to\nstart up in full mode, this method will throw a [[ContractAllocationFailedError]].\n\nNote that decoding mappings requires first watching mapping keys in order to get any results;\nsee the documentation for [[watchMappingKey]].\nAdditional methods to make mapping decoding a less manual affair are planned for the future.\n\nAlso, due to a technical limitation, it is not currently possible to\nusefully decode internal function pointers.  See the\n[[Format.Values.FunctionInternalValue|FunctionInternalValue]]\ndocumentation and the README for more on how these are handled."
									},
									"parameters": [
										{
											"id": 2124,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values.\n"
											},
											"type": {
												"type": "reference",
												"id": 2363,
												"name": "BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 851,
													"name": "StateVariable"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2144,
							"name": "watchMappingKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1487,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2145,
									"name": "watchMappingKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Watches a mapping key; adds it to the decoder's list of watched mapping\nkeys.  This affects the results of both [[variables|variables()]] and\n[[variable|variable()]].  When a mapping is decoded, only the values at\nits watched keys will be included in its value.\n\nNote that it is possible\nto watch mappings that are inside structs, arrays, other mappings, etc;\nsee below for more on how to do this.\n\nNote that watching mapping keys is\nonly possible in full mode; if the decoder wasn't able to start up in full\nmode, this method will throw an exception.\n\n(A bad variable name will cause an exception though; that input is checked.)",
										"tags": [
											{
												"tag": "example",
												"text": "First, a simple example.  Say we have a mapping `m` of type\n  `mapping(uint => uint)`.  You could call `watchMappingKey(\"m\", 0)` to\n  watch `m[0]`."
											},
											{
												"tag": "example",
												"text": "Now for a slightly more complicated example.  Say `m` is of type\n  `mapping(uint => mapping(uint => uint))`, then to watch `m[3][5]`, you\n  can call `watchMappingKey(\"m\", 3, 5)`.  This will also automatically\n  watch `m[3]`; otherwise, watching `m[3][5]` wouldn't do much of\n  anything."
											},
											{
												"tag": "example",
												"text": "Now for a well more complicated example.  Say we have a struct\n  type `MapStruct` with a member called `map` which is a `mapping(string => string)`,\n  and say we have a variable `arr` of type `MapStruct[]`, then one could\n  watch `arr[3].map[\"hello\"]` by calling `watchMappingKey(\"arr\", 3, \"map\", \"hello\")`.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2146,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The variable that the mapping lives under; this works like\n  the nameOrId argument to [[variable|variable()]].  If the mapping is a\n  top-level state variable, put the mapping itself here.  Otherwise, put the\n  top-level state variable it lives under."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2147,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Further arguments to watchMappingKey, if given, will be\n  interpreted as indices into or members of the variable identified by the\n  variable argument; see the example.  Array indices and mapping\n  keys are specified by value; struct members are specified by name.\n\n  Values (for array indices and mapping keys) may be given in any format\n  understood by Truffle Encoder; see the documentation for\n  [[Encoder.ProjectEncoder.wrap|ProjectEncoder.wrap]] for details.\n\n  Note that if the path to a given mapping key\n  includes mapping keys above it, any ancestors will also be watched\n  automatically."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2081
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2095,
								2101,
								2086,
								2093,
								2092,
								2094,
								2087,
								2090,
								2091,
								2106,
								2089,
								2088,
								2108,
								2103,
								2104,
								2107,
								2096,
								2102,
								2105,
								2100,
								2085
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2111
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2164,
								2167,
								2170,
								2113,
								2176,
								2155,
								2159,
								2152,
								2115,
								2173,
								2129,
								2137,
								2132,
								2109,
								2141,
								2119,
								2148,
								2125,
								2122,
								2144
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 1002,
							"character": 36
						}
					]
				},
				{
					"id": 2280,
					"name": "ContractNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to decode could not be found in\nthe project info.  This error will be thrown if you attempt to spawn a contract decoder or\ncontract instance decoder for a contract not appearing in the project info."
					},
					"children": [
						{
							"id": 2281,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2282,
									"name": "new ContractNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2283,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2284,
											"name": "bytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2285,
											"name": "deployedBytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2286,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2280,
										"name": "ContractNotFoundError"
									}
								}
							]
						},
						{
							"id": 2290,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 32,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2288,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 30,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2287,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 29,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2289,
							"name": "deployedBytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 31,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2281
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2290,
								2288,
								2287,
								2289
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 28,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2300,
					"name": "InvalidAddressError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that an invalid address was passed to one of the\ncontract instance decoder spawners ([[forContractInstance]], etc).  Valid\naddresses are those that Web3 accepts; i.e., either those with correct\nchecksums, or those that are all-lowercase or all-uppercase to deliberately\ncircumvent the checksum."
					},
					"children": [
						{
							"id": 2301,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2302,
									"name": "new InvalidAddressError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2303,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2300,
										"name": "InvalidAddressError"
									}
								}
							]
						},
						{
							"id": 2304,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 87,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2301
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2304
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 86,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2310,
					"name": "NoProviderError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that no provider was passed to the decoder."
					},
					"children": [
						{
							"id": 2311,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2312,
									"name": "new NoProviderError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2310,
										"name": "NoProviderError"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2311
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 171,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2183,
					"name": "ProjectDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ProjectDecoder class.  Decodes transactions and logs.  See below for a method listing."
					},
					"children": [
						{
							"id": 2184,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2185,
									"name": "new ProjectDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2186,
											"name": "compilations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1594,
													"name": "Compilation"
												}
											}
										},
										{
											"id": 2187,
											"name": "provider",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Provider"
											}
										},
										{
											"id": 2188,
											"name": "ensSettings",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 2364,
												"name": "EnsSettings"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2183,
										"name": "ProjectDecoder"
									}
								}
							]
						},
						{
							"id": 2199,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 57,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 1843,
								"name": "AllocationInfo"
							}
						},
						{
							"id": 2200,
							"name": "codeCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 59,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "CodeCache"
							},
							"defaultValue": "..."
						},
						{
							"id": 2190,
							"name": "compilations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 50,
									"character": 22
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1594,
									"name": "Compilation"
								}
							}
						},
						{
							"id": 2191,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 51,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 1660,
								"name": "Contexts"
							},
							"defaultValue": "..."
						},
						{
							"id": 2193,
							"name": "contractsAndContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 53,
									"character": 30
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1680,
									"name": "ContractAndContexts"
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 2192,
							"name": "deployedContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 52,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 1660,
								"name": "Contexts"
							},
							"defaultValue": "..."
						},
						{
							"id": 2201,
							"name": "ensSettings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 61,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 2364,
								"name": "EnsSettings"
							}
						},
						{
							"id": 2194,
							"name": "referenceDeclarations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 55,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2195,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 2196,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 2197,
												"name": "compilationId",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1531,
											"name": "Ast.AstNodes"
										}
									}
								}
							}
						},
						{
							"id": 2198,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 56,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 264,
								"name": "TypesById"
							}
						},
						{
							"id": 2189,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 48,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 2232,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 383,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2233,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[CalldataDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 2234,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"id": 763,
												"name": "CalldataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 763,
										"name": "CalldataDecoding"
									}
								}
							]
						},
						{
							"id": 2235,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 395,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 2236,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[LogDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 2237,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"id": 764,
												"name": "LogDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 764,
										"name": "LogDecoding"
									}
								}
							]
						},
						{
							"id": 2238,
							"name": "abifyReturndataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 408,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2239,
									"name": "abifyReturndataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[ReturndataDecoding]], which may have been produced in full mode\nor ABI mode, and converts it to its ABI mode equivalent.  See the README\nfor more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 2240,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"id": 765,
												"name": "ReturndataDecoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 765,
										"name": "ReturndataDecoding"
									}
								}
							]
						},
						{
							"id": 2216,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 262,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 2217,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Takes a [[Log]] object and decodes it.  Logs can be ambiguous, so this so\nthis function returns an array of [[LogDecoding|LogDecodings]].\n\nNote that logs are decoded in strict mode, so (with one exception) none of the decodings should\ncontain errors; if a decoding would contain an error, instead it is simply excluded from the\nlist of possible decodings.  The one exception to this is that indexed parameters of reference\ntype cannot meaningfully be decoded, so those will decode to an error.\n\nIf there are multiple possible decodings, they will always be listed in the following order:\n\n1. Non-anonymous events coming from the contract itself (these will moreover be ordered\n  from most derived to most base)\n2. Non-anonymous events coming from libraries\n3. Anonymous events coming from the contract itself (again, ordered from most derived\n  to most base)\n4. Anonymous events coming from libraries\n\nYou can check the kind and class.contractKind fields to distinguish between these.\n\nIf no possible decodings are found, the returned array of decodings will be empty.\n\nNote that different decodings may use different decoding modes.\n\nChanging `options.extras = \"on\"` or `options.extras = \"necessary\"` will change the\nabove behavior; see the documentation on [[ExtrasAllowed]] for more.\n"
									},
									"parameters": [
										{
											"id": 2218,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The log to be decoded."
											},
											"type": {
												"type": "reference",
												"id": 2354,
												"name": "Log"
											}
										},
										{
											"id": 2219,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options for controlling decoding.\n"
											},
											"type": {
												"type": "reference",
												"id": 2339,
												"name": "DecodeLogOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 764,
													"name": "LogDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2220,
							"name": "decodeLogWithAdditionalOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 272,
									"character": 45
								}
							],
							"signatures": [
								{
									"id": 2221,
									"name": "decodeLogWithAdditionalOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2222,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2354,
												"name": "Log"
											}
										},
										{
											"id": 2223,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2330,
												"name": "EventOptions"
											},
											"defaultValue": "..."
										},
										{
											"id": 2224,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1660,
												"name": "Contexts"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 764,
													"name": "LogDecoding"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2209,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 178,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2210,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Takes a [[Transaction]] object and decodes it.  The result is a\n[[CalldataDecoding]]; see the documentation on that interface for more.\n\nNote that decoding of transactions sent to libraries is presently not\nsupported and may have unreliable results.  Limited support for this is\nplanned for future versions."
									},
									"parameters": [
										{
											"id": 2211,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The transaction to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"id": 2342,
												"name": "Transaction"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 763,
												"name": "CalldataDecoding"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2212,
							"name": "decodeTransactionWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 187,
									"character": 54
								}
							],
							"signatures": [
								{
									"id": 2213,
									"name": "decodeTransactionWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2214,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2342,
												"name": "Transaction"
											}
										},
										{
											"id": 2215,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1660,
												"name": "Contexts"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 763,
												"name": "CalldataDecoding"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2225,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 324,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 2226,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Gets all events meeting certain conditions and decodes them.\nThis function is fairly rudimentary at the moment but more functionality\nwill be added in the future.",
										"returns": "An array of [[DecodedLog|DecodedLogs]].\n  These consist of a log together with its possible decodings; see that\n  type for more info.  And see [[decodeLog]] for more info on how log\n  decoding works in general.",
										"tags": [
											{
												"tag": "example",
												"text": "`events({name: \"TestEvent\"})` -- get events named \"TestEvent\"\n  from the most recent block\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2227,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch and how to decode\n  them; see the documentation on the [[EventOptions]] type for more."
											},
											"type": {
												"type": "reference",
												"id": 2330,
												"name": "EventOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2320,
													"name": "DecodedLog"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2228,
							"name": "eventsWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 333,
									"character": 43
								}
							],
							"signatures": [
								{
									"id": 2229,
									"name": "eventsWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2230,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2330,
												"name": "EventOptions"
											},
											"defaultValue": "..."
										},
										{
											"id": 2231,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1660,
												"name": "Contexts"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 2320,
													"name": "DecodedLog"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2254,
							"name": "forAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 549,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 2255,
									"name": "forAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject.  Unlike [[forInstance]], this method doesn't require an artifact; it\nwill automatically detect the class of the given contract.  If it's not in\nthe project, or the decoder can't identify it, you'll get an exception."
									},
									"parameters": [
										{
											"id": 2256,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The address of the contract instance to decode.\n  If an invalid address is provided, this method will throw an exception."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2257,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "You can include this argument to specify that this should be\n  based on the addresses content's at a specific block (if say the contract\n  has since self-destructed).\n"
											},
											"type": {
												"type": "reference",
												"id": 2363,
												"name": "BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2080,
												"name": "ContractInstanceDecoder"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2247,
							"name": "forArtifact",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 450,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2248,
									"name": "forArtifact",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract decoder for a given contract artifact."
									},
									"parameters": [
										{
											"id": 2249,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK.\n\n  Note: The artifact must be for a contract that the decoder knows about;\n  otherwise you will have problems.\n"
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2005,
												"name": "ContractDecoder"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2250,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 528,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2251,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject."
									},
									"parameters": [
										{
											"id": 2252,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK.\n\n  Note: The artifact must be for a contract that the decoder knows about;\n  otherwise you will have problems."
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										},
										{
											"id": 2253,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The address of the contract instance to decode.  If left out, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2080,
												"name": "ContractInstanceDecoder"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2265,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 604,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2266,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 1843,
										"name": "AllocationInfo"
									}
								}
							]
						},
						{
							"id": 2202,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 128,
									"character": 22
								}
							],
							"signatures": [
								{
									"id": 2203,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2204,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2205,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2241,
							"name": "getContextByAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 418,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 2242,
									"name": "getContextByAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2243,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2244,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										},
										{
											"id": 2245,
											"name": "constructorBinary",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2246,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1660,
												"name": "Contexts"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1663,
												"name": "Context"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2271,
							"name": "getDeployedContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 625,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 2272,
									"name": "getDeployedContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 1660,
										"name": "Contexts"
									}
								}
							]
						},
						{
							"id": 2269,
							"name": "getEnsSettings",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 618,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2270,
									"name": "getEnsSettings",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 2364,
										"name": "EnsSettings"
									}
								}
							]
						},
						{
							"id": 2258,
							"name": "getReferenceDeclarations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 590,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 2259,
									"name": "getReferenceDeclarations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2260,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 2261,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 2262,
														"name": "compilationId",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "reference",
													"id": 1531,
													"name": "Ast.AstNodes"
												}
											}
										}
									}
								}
							]
						},
						{
							"id": 2263,
							"name": "getUserDefinedTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 597,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 2264,
									"name": "getUserDefinedTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 264,
										"name": "TypesById"
									}
								}
							]
						},
						{
							"id": 2267,
							"name": "getWeb3",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 611,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 2268,
									"name": "getWeb3",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Web3"
									}
								}
							]
						},
						{
							"id": 2206,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 154,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2207,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2208,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2363,
												"name": "BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "RegularizedBlockSpecifier"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2184
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2199,
								2200,
								2190,
								2191,
								2193,
								2192,
								2201,
								2194,
								2198,
								2189
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2232,
								2235,
								2238,
								2216,
								2220,
								2209,
								2212,
								2225,
								2228,
								2254,
								2247,
								2250,
								2265,
								2202,
								2241,
								2271,
								2269,
								2258,
								2263,
								2267,
								2206
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 47,
							"character": 27
						}
					]
				},
				{
					"id": 2305,
					"name": "VariableNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the user requested a variable that does not exist."
					},
					"children": [
						{
							"id": 2306,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2307,
									"name": "new VariableNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2308,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2305,
										"name": "VariableNotFoundError"
									}
								}
							]
						},
						{
							"id": 2309,
							"name": "nameOrId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 100,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2306
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2309
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 99,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2313,
					"name": "ContractState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents the state of a contract aside from its storage."
					},
					"children": [
						{
							"id": 2315,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's address, as a checksummed hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 85,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2316,
							"name": "balanceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's balance, in Wei, as a BN."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 89,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 2314,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's class, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 81,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 231,
								"name": "ContractType"
							}
						},
						{
							"id": 2318,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's code, as a hexidecimal string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 97,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2317,
							"name": "nonceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The contract's nonce, as a BN."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 93,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2315,
								2316,
								2314,
								2318,
								2317
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 77,
							"character": 30
						}
					]
				},
				{
					"id": 2339,
					"name": "DecodeLogOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The type of the options parameter to [[WireDecoder.decodeLog|decodeLog()]].\nThis type may be expanded in the future."
					},
					"children": [
						{
							"id": 2340,
							"name": "extras",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.  Defaults to `\"off\"`."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 190,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"id": 866,
								"name": "ExtrasAllowed"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2340
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 184,
							"character": 33
						}
					]
				},
				{
					"id": 2320,
					"name": "DecodedLog",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type represents a web3 Log object that has been decoded.\nNote that it extends the Log type and just adds an additional field\nwith the decoding."
					},
					"children": [
						{
							"id": 2322,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Address of the emitter (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 284,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2355,
								"name": "Log.address"
							}
						},
						{
							"id": 2328,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The block hash (as hex string).  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 309,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2361,
								"name": "Log.blockHash"
							}
						},
						{
							"id": 2329,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The block number.  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 313,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2362,
								"name": "Log.blockNumber"
							}
						},
						{
							"id": 2323,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The log's data section (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 288,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2356,
								"name": "Log.data"
							}
						},
						{
							"id": 2321,
							"name": "decodings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "An array of possible decodings of the given log -- it's an array because logs can be ambiguous.",
								"text": "This field works just like the output of [[WireDecoder.decodeLog]], so see that for more\ninformation.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 113,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 764,
									"name": "LogDecoding"
								}
							}
						},
						{
							"id": 2325,
							"name": "logIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of the log within the block."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 296,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2358,
								"name": "Log.logIndex"
							}
						},
						{
							"id": 2324,
							"name": "topics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The log's topics; each is a hex string representing 32 bytes."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 292,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2357,
								"name": "Log.topics"
							}
						},
						{
							"id": 2327,
							"name": "transactionHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The emitting transaction's hash (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 305,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2360,
								"name": "Log.transactionHash"
							}
						},
						{
							"id": 2326,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index within the block of the emitting transaction; null if\nblock is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 301,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2359,
								"name": "Log.transactionIndex"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2322,
								2328,
								2329,
								2323,
								2321,
								2325,
								2324,
								2327,
								2326
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 106,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 2354,
							"name": "Log"
						}
					]
				},
				{
					"id": 2367,
					"name": "DecoderSettings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type contains information needed to initialize the decoder."
					},
					"children": [
						{
							"id": 2370,
							"name": "ens",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This field can be included to enable or disable ENS resolution (and, in\nthe future, reverse resolution) and specify how it should be performed.\nIf absent, ENS resolution will be performed using the decoder's usual\nprovider."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 49,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"id": 2364,
								"name": "EnsSettings"
							}
						},
						{
							"id": 2368,
							"name": "projectInfo",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Information about the project or contracts being decoded.\nThis may come in several forms; see the type documentation for\nmore information.  The simplest way to use this to set it to\n`{ artifacts: <array of artifacts in project> }`.",
								"text": "This may be left out if an artifact or contract has been passed\nin by some other means, in which case the decoder will be made\nbased purely on that single contract, but it's recommended to pass in\nproject info for all your contracts to get the decoder's full power.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 34,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"id": 1629,
								"name": "ProjectInfo"
							}
						},
						{
							"id": 2369,
							"name": "provider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The provider for the decoder to use.  This is required when using a\nprovider-based constructor; otherwise an exception will be thrown.\nIf the decoder is initialized with a Truffle Contract-based constructor,\nthis is not expected to be passed.  If it is passed, it will override\nthe use of the given contract's provider."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 42,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Provider"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2370,
								2368,
								2369
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 22,
							"character": 32
						}
					]
				},
				{
					"id": 2364,
					"name": "EnsSettings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type indicates settings to be used for ENS resolution (and, in the\nfuture, reverse resolution)."
					},
					"children": [
						{
							"id": 2365,
							"name": "provider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The provider to use for ENS resolution; set this to `null` to disable\nENS resolution.  If absent, will default to the decoder's provider,\nand ENS resolution will be enabled."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 64,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Provider"
							}
						},
						{
							"id": 2366,
							"name": "registryAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The ENS registry address to use; if absent, will use the default one\nfor the current network.  If there is no default registry for the\ncurrent network, ENS resolution will be disabled."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 70,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2365,
								2366
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 58,
							"character": 28
						}
					]
				},
				{
					"id": 2330,
					"name": "EventOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The type of the options parameter to [[WireDecoder.events|events()]].  This type will be expanded in the future\nas more filtering options are added."
					},
					"children": [
						{
							"id": 2334,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, will restrict to events emitted by the given address.",
								"text": "NOTE: In the contract instance decoder, if omitted, defaults to the\naddress of the contract instance being decoded, rather than not filtering\nby address.  However, this behavior can be turned off by explicitly specifying\naddress as undefined.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 170,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2335,
							"name": "extras",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.  Defaults to `\"off\"`."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 176,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"id": 866,
								"name": "ExtrasAllowed"
							}
						},
						{
							"id": 2332,
							"name": "fromBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The earliest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 157,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 2363,
								"name": "BlockSpecifier"
							}
						},
						{
							"id": 2331,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, the name parameter will restrict to events with the given name."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 153,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2333,
							"name": "toBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The latest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 161,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"id": 2363,
								"name": "BlockSpecifier"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2334,
								2335,
								2332,
								2331,
								2333
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 149,
							"character": 29
						}
					]
				},
				{
					"id": 2354,
					"name": "Log",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Contains information about a transaction.  Most of the fields have\nbeen made optional; only those needed by the decoder have been made\nmandatory.",
						"text": "Intended to work like Web3's\n[Log](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-getpastlogs-return)\ntype."
					},
					"children": [
						{
							"id": 2355,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Address of the emitter (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 284,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2361,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The block hash (as hex string).  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 309,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2362,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The block number.  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 313,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2356,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The log's data section (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 288,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2358,
							"name": "logIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of the log within the block."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 296,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2357,
							"name": "topics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The log's topics; each is a hex string representing 32 bytes."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 292,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 2360,
							"name": "transactionHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The emitting transaction's hash (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 305,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2359,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index within the block of the emitting transaction; null if\nblock is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 301,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2355,
								2361,
								2362,
								2356,
								2358,
								2357,
								2360,
								2359
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 280,
							"character": 20
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 2320,
							"name": "DecodedLog"
						}
					]
				},
				{
					"id": 2336,
					"name": "ReturnOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The type of the options parameter to [[ContractDecoder.decodeReturnValue|decodeReturnValue()]]."
					},
					"children": [
						{
							"id": 2337,
							"name": "block",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The block in which the call was made.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 201,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"id": 2363,
								"name": "BlockSpecifier"
							}
						},
						{
							"id": 2338,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, tells the decoder to interpret the return data as\nthe return data from a successful call (if `true` is passed) or\nas the return data from a failed call (if `false` is passed). If\nomitted or set to `undefined`, the decoder will account for both\npossibilities."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 209,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2337,
								2338
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 197,
							"character": 30
						}
					]
				},
				{
					"id": 2342,
					"name": "Transaction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Contains information about a transaction.  Most of the fields have\nbeen made optional; only those needed by the decoder have been made\nmandatory.",
						"text": "Intended to work like Web3's\n[Transaction](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-gettransaction-return)\ntype."
					},
					"children": [
						{
							"id": 2345,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Hash of this transaction's block as hex string; null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 234,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2346,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This transaction's block number; null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 238,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2348,
							"name": "from",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Address of the sender (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 246,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2352,
							"name": "gas",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Gas provided by the sender, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 263,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2351,
							"name": "gasPrice",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Gas price for this transaction, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 259,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2343,
							"name": "hash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The transaction hash as hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 226,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2353,
							"name": "input",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Data sent with the transaction, as hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 267,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2344,
							"name": "nonce",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The nonce of the sender before this transaction was sent."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 230,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2349,
							"name": "to",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Address of the recipient (as checksummed hex string), or null for a\ncontract creation."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 251,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2347,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of transaction in block; null if block is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 242,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2350,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Wei sent with this transaction, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 255,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2345,
								2346,
								2348,
								2352,
								2351,
								2343,
								2353,
								2344,
								2349,
								2347,
								2350
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 222,
							"character": 28
						}
					]
				},
				{
					"id": 2363,
					"name": "BlockSpecifier",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Specifies a block.  Can be given by number, or can be given via the\nspecial strings \"genesis\", \"latest\", or \"pending\".",
						"text": "Intended to work like Web3's\n[BlockType](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#id14).\n\n*Warning*: Using \"pending\", while allowed, is not advised, as it may lead\nto internally inconsistent results.  Use of \"latest\" is safe and will not\nlead to inconsistent results from a single decoder call due to the decoder's\ncaching system, but pending blocks cannot be cached under this system, which\nmay cause inconsistencies."
					},
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 330,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "literal",
								"value": "genesis"
							},
							{
								"type": "literal",
								"value": "latest"
							},
							{
								"type": "literal",
								"value": "pending"
							}
						]
					}
				},
				{
					"id": 40,
					"name": "ProjectInfo",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 179,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 1629,
						"name": "Compilations.ProjectInfo"
					}
				},
				{
					"id": 36,
					"name": "forAddress",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 370,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 37,
							"name": "forAddress",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject.  Unlike the other functions, this method doesn't require giving an\nartifact for the address itself; however, the address had better correspond to\na contract of a type given in the project info, or you'll get an exception."
							},
							"parameters": [
								{
									"id": 38,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n  If an invalid address is provided, this method will throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 39,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[DecoderSettings]] to use, including the provider;\n  see the documentation for that type for more information."
									},
									"type": {
										"type": "reference",
										"id": 2367,
										"name": "DecoderSettings"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2080,
										"name": "ContractInstanceDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 6,
					"name": "forArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 211,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 7,
							"name": "forArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract decoder for a given contract artifact."
							},
							"parameters": [
								{
									"id": 8,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 9,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[DecoderSettings]] to use, including the provider;\n  see the documentation for that type for more information."
									},
									"type": {
										"type": "reference",
										"id": 2367,
										"name": "DecoderSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2005,
										"name": "ContractDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 22,
					"name": "forArtifactAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 304,
							"character": 35
						}
					],
					"signatures": [
						{
							"id": 23,
							"name": "forArtifactAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 24,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 25,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 26,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[DecoderSettings]] to use, including the provider;\n  see the documentation for that type for more information."
									},
									"type": {
										"type": "reference",
										"id": 2367,
										"name": "DecoderSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2080,
										"name": "ContractInstanceDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 10,
					"name": "forContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 237,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 11,
							"name": "forContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract decoder for a given contract."
							},
							"parameters": [
								{
									"id": 12,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of\n  the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 13,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[DecoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the decoder will be based on\n  just the single contract provided; it is recommended to pass more\n  information to get the decoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 2367,
										"name": "DecoderSettings"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2005,
										"name": "ContractDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 27,
					"name": "forContractAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 329,
							"character": 35
						}
					],
					"signatures": [
						{
							"id": 28,
							"name": "forContractAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 29,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 30,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 31,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[DecoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the decoder will be based on just the\n  single contract provided; it is recommended to pass more information to get the\n  decoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 2367,
										"name": "DecoderSettings"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2080,
										"name": "ContractInstanceDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 32,
					"name": "forContractInstance",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 350,
							"character": 41
						}
					],
					"signatures": [
						{
							"id": 33,
							"name": "forContractInstance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a given contract instance."
							},
							"parameters": [
								{
									"id": 34,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract abstraction object corresponding to the contract instance."
									},
									"type": {
										"type": "reference",
										"name": "ContractInstanceObject"
									}
								},
								{
									"id": 35,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[DecoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the decoder will be based on just the\n  single contract provided; it is recommended to pass more information to get the\n  decoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 2367,
										"name": "DecoderSettings"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2080,
										"name": "ContractInstanceDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 14,
					"name": "forDeployedArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 259,
							"character": 41
						}
					],
					"signatures": [
						{
							"id": 15,
							"name": "forDeployedArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 16,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 17,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[DecoderSettings]] to use, including the provider;\n  see the documentation for that type for more information."
									},
									"type": {
										"type": "reference",
										"id": 2367,
										"name": "DecoderSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2080,
										"name": "ContractInstanceDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 18,
					"name": "forDeployedContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 279,
							"character": 41
						}
					],
					"signatures": [
						{
							"id": 19,
							"name": "forDeployedContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 20,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 21,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[DecoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the decoder will be based on just the\n  single contract provided; it is recommended to pass more information to get the\n  decoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 2367,
										"name": "DecoderSettings"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2080,
										"name": "ContractInstanceDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 3,
					"name": "forProject",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 189,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 4,
							"name": "forProject",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a project decoder for the project.\nSee the [[DecoderSettings]] documentation for further information."
							},
							"parameters": [
								{
									"id": 5,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2367,
										"name": "DecoderSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2183,
										"name": "ProjectDecoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2291,
						2273,
						2005,
						2080,
						2280,
						2300,
						2310,
						2183,
						2305
					],
					"categories": [
						{
							"title": "Decoder",
							"children": [
								2005,
								2080,
								2183
							]
						},
						{
							"title": "Exception",
							"children": [
								2291,
								2273,
								2280,
								2300,
								2305
							]
						},
						{
							"title": "Other",
							"children": [
								2310
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2313,
						2339,
						2320,
						2367,
						2364,
						2330,
						2354,
						2336,
						2342
					],
					"categories": [
						{
							"title": "Inputs",
							"children": [
								2339,
								2367,
								2364,
								2330,
								2354,
								2336,
								2342
							]
						},
						{
							"title": "Results",
							"children": [
								2313,
								2320
							]
						}
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						2363,
						40
					],
					"categories": [
						{
							"title": "Inputs",
							"children": [
								2363
							]
						},
						{
							"title": "Other",
							"children": [
								40
							]
						}
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						36,
						6,
						22,
						10,
						27,
						32,
						14,
						18,
						3
					],
					"categories": [
						{
							"title": "Provider-based Constructor",
							"children": [
								36,
								6,
								22,
								14,
								3
							]
						},
						{
							"title": "Truffle Contract-based Constructor",
							"children": [
								10,
								27,
								32,
								18
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "decoder/lib/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 41,
			"name": "@truffle/encoder",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "# Truffle Encoder",
				"text": "This module provides an interface for recognizing JavaScript user input of\nSolidity values, encoding those values for use in a transaction, and performing\noverload resolution based on those values to determine which Solidity method to\nencode for.\n\nThe interface is split into three classes: The project encoder, the contract\nencoder, and the contract instance encoder.  The project encoder is associated\nto the project as a whole; it can recognize user input, encode transactions,\nand resolve overloads, although the interface for the latter two is somewhat\ninconvenient.  The contract encoder is associated to a specific contract class.\nIt is similar to the project encoder, but presents an easier-to-use interface\nfor transaction encoding and overload resolution, so long as one is dealing\nwith methods of the specified class.  The contract instance encoder is\nassociated to a specific contract instance; it is like the contract encoder,\nbut is associated to a specific address, allowing the `to` option in\ntransactions to be populated automatically.\n\n## Usage\n\n### Initialization\n\nCreate a encoder with one of the various constructor functions.\n\nFor a project encoder, use the [[forProject|`forProject`]] function.\n\nFor a contract encoder, use the [[forArtifact|`forArtifact`]] or\n[[forContract|`forContract`]] function.\n\nFor a contract instance encoder, use one of the following:\n* [[forDeployedArtifact|`forDeployedArtifact`]]\n* [[forDeployedContract|`forDeployedContract`]]\n* [[forArtifactAt|`forArtifactAt`]]\n* [[forContractAt|`forContractAt`]]\n* [[forContractInstance|`forContractInstance`]]\n\nSee the documentation of these functions for details, or below for usage\nexamples.\n\nAll of these functions take a final argument in which information about the\nproject is specified; currently only a few methods for specifying project\ninformation are allowed, but more are planned.\n\nOne can also spawn encoders from other encoders by supplying additional\ninformation.  See the documentation for the individual encoder classes for a\nmethod listing.\n\n### Encoder methods\n\nSee the documentation for the individual encoder classes for a method listing.\n\n### Wrapped format information\n\nWhen using the various \"wrap\" functions, values will be wrapped in\nmachine-readable [[Format.Values.Value]] objects containing individual wrapped\nvalues.  (This is the same format that `@truffle/decoder` produces output in.)\nSee the [[Format|format documentation]] for an overview and complete module\nlisting.\n\n### Use of project information and encoding of enums\n\nThe encoder can do purely ABI-based encoding, like other encoders; however it\nhas the capability to use project information to do more.\n\nThe most significant use of this is that if further project information is\npresent, this allows for enums to be entered as strings with the name of\nthe option, rather than having to be entered via the underlying number.\nSee the documentation of [[ProjectEncoder.wrap]] for more.\n\nSimilarly, if project information is present, the encoder will also throw an\nerror if you attempt to put an out-of-range value into an enum type, and\nrefuse to consider overloads that would result in this during overload\nresolution.  If project information is absent, the encoder will be unable to\nrecognize any error in these situations.\n\n### ENS resolution\n\nThe encoder supports ENS resolution for address and contract types if\ninitialized to support such.  See the documentation of the [[EncoderSettings]]\nand [[EnsSettings]] types for more.\n\n### Basic usage examples\n\nThese usage examples are for a project with two contracts, `Contract1` and\n`Contract2`.  Let's suppose these look like the following:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Contract1 {\n function enumExample(Contract2.Ternary x) public payable {\n }\n\n function overloaded(uint x) public payable {\n }\n\n function overloaded(string x) public payable {\n }\n}\n\ncontract Contract2 {\n enum Ternary { No, Yes, Maybe }\n}\n```\n\n#### Encoding a transaction\n\n```typescript\nimport { forContract } from \"@truffle/encoder\";\nconst contract1 = artifacts.require(\"Contract1\");\nconst contract2 = artifacts.require(\"Contract2\");\nconst encoder = await Encoder.forContract(Contract1, [Contract1, Contract2]);\nconst abi = Contract1.abi.find(abiEntry => abiEntry.name === \"enumExample\");\nconst tx = await encoder.encodeTransaction(\n abi,\n [\"Maybe\", { value: 1 }],\n { allowOptions: true }\n);\n```\n\n### Performing overload resolution\n\n```typescript\nimport { forContract } from \"@truffle/encoder\";\nconst contract1 = artifacts.require(\"Contract1\");\nconst contract2 = artifacts.require(\"Contract2\");\nconst encoder = await Encoder.forContract(Contract1, [Contract1, Contract2]);\nconst abis = Contract1.abi.filter(abiEntry => abiEntry.name === \"overloaded\");\nconst { tx, abi } = await encoder.encodeTransaction(\n abis,\n [\"hello\", { value: 1 }],\n { allowOptions: true }\n);\n```\n"
			},
			"originalName": "encoder/lib",
			"children": [
				{
					"id": 2447,
					"name": "ContractEncoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ContractEncoder class.\nCan encode transactions, resolve overloads, and wrap values.\nSee below for a method listing."
					},
					"children": [
						{
							"id": 2448,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2449,
									"name": "new ContractEncoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2450,
											"name": "projectEncoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2371,
												"name": "ProjectEncoder"
											}
										},
										{
											"id": 2451,
											"name": "contract",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2447,
										"name": "ContractEncoder"
									}
								}
							]
						},
						{
							"id": 2454,
							"name": "constructorBinary",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 864,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2455,
							"name": "constructorContextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 865,
									"character": 32
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2453,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 863,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "ContractObject"
							}
						},
						{
							"id": 2456,
							"name": "deployedContextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 866,
									"character": 29
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2452,
							"name": "projectEncoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 862,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"id": 2371,
								"name": "ProjectEncoder"
							}
						},
						{
							"id": 2477,
							"name": "encodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1028,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2478,
									"name": "encodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method works similarly to [[ProjectEncoder.encodeTransaction]].\nHowever, instead of a Method object, it simply takes the ABI entry for\nthe transaction being prepared.  Note that the ABI must be one associated\nwith this contract, or the function will not work.\n\nNote that use of the encoder for transactions to be sent to libraries is\npresently not supported and may have unreliable results.  Limited support\nfor this is planned for future versions.\n\nSee [[ProjectEncoder.encodeTransaction]] for further details.\n"
									},
									"parameters": [
										{
											"id": 2479,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ABI entry for the transaction being prepared.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										},
										{
											"id": 2480,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 2481,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2546,
												"name": "ResolveOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1995,
												"name": "Options"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2487,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1077,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2488,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance encoder for a given instance of the\ncontract this encoder is for."
									},
									"parameters": [
										{
											"id": 2489,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The address of the contract instance.\n  If omitted, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2493,
												"name": "ContractInstanceEncoder"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2490,
							"name": "getMethod",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1094,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 2491,
									"name": "getMethod",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2492,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1944,
										"name": "Method"
									}
								}
							]
						},
						{
							"id": 2457,
							"name": "getProjectEncoder",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 872,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2458,
									"name": "getProjectEncoder",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {
										"shortText": "Just used for testing, currently"
									},
									"type": {
										"type": "reference",
										"id": 2371,
										"name": "ProjectEncoder"
									}
								}
							]
						},
						{
							"id": 2482,
							"name": "resolveAndEncode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1055,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 2483,
									"name": "resolveAndEncode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method works similarly to [[ProjectEncoder.resolveAndEncode]].\nHowever, instead of an array of Method objects, it simply takes an array\nof the ABI entries for the possible overloads.  Only function ABI entries\nmay be passed to this method, not constructor ABI entries.  Note that the\nABIs must be one associated with this contract, or the function will not\nwork.\n\nNote that use of the encoder for transactions to be sent to libraries is\npresently not supported and may have unreliable results.  Limited support\nfor this is planned for future versions.\n\nSee [[ProjectEncoder.resolveAndEncode]] for further details.\n"
									},
									"parameters": [
										{
											"id": 2484,
											"name": "abis",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ABI entries for the overloads to be resolved between.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "FunctionEntry"
												}
											}
										},
										{
											"id": 2485,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 2486,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2546,
												"name": "ResolveOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2536,
												"name": "TxAndAbi"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2472,
							"name": "resolveAndWrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 999,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 2473,
									"name": "resolveAndWrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method works similarly to [[ProjectEncoder.resolveAndWrap]].\nHowever, instead of an array of Method objects, it simply takes an array\nof the ABI entries for the possible overloads.  Only function ABI entries\nmay be passed to this method, not constructor ABI entries.  Note that the\nABIs must be one associated with this contract, or the function will not\nwork.\n\nNote that use of the encoder for transactions to be sent to libraries is\npresently not supported and may have unreliable results.  Limited support\nfor this is planned for future versions.\n\nSee [[ProjectEncoder.resolveAndWrap]] for further details.\n"
									},
									"parameters": [
										{
											"id": 2474,
											"name": "abis",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ABI entries for the overloads to be resolved between.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "FunctionEntry"
												}
											}
										},
										{
											"id": 2475,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 2476,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2546,
												"name": "ResolveOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1940,
												"name": "Resolution"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2463,
							"name": "wrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 945,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 2464,
									"name": "wrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectEncoder.wrap]]."
									},
									"parameters": [
										{
											"id": 2465,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Type"
											}
										},
										{
											"id": 2466,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 269,
												"name": "Value"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2459,
							"name": "wrapElementaryValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 935,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 2460,
									"name": "wrapElementaryValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectEncoder.wrapElementaryValue]]."
									},
									"parameters": [
										{
											"id": 2461,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 161,
												"name": "ElementaryType"
											}
										},
										{
											"id": 2462,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 381,
												"name": "ElementaryValue"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2467,
							"name": "wrapForTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 968,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 2468,
									"name": "wrapForTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method works similarly to [[ProjectEncoder.wrapForTransaction]].\nHowever, instead of a Method object, it simply takes the ABI entry for\nthe transaction being prepared.  Note that the ABI must be one associated\nwith this contract, or the function will not work.\n\nNote that use of the encoder for transactions to be sent to libraries is\npresently not supported and may have unreliable results.  Limited support\nfor this is planned for future versions.\n\nSee [[ProjectEncoder.wrapForTransaction]] for further details.\n"
									},
									"parameters": [
										{
											"id": 2469,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The ABI entry for the transaction being prepared.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										},
										{
											"id": 2470,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 2471,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2546,
												"name": "ResolveOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1940,
												"name": "Resolution"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2448
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2454,
								2455,
								2453,
								2456,
								2452
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2477,
								2487,
								2490,
								2457,
								2482,
								2472,
								2463,
								2459,
								2467
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/encoders.ts",
							"line": 861,
							"character": 28
						}
					]
				},
				{
					"id": 2493,
					"name": "ContractInstanceEncoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ContractInstanceEncoder class.\nCan encode transactions, resolve overloads, and wrap values.\nDiffers from the [[ContractEncoder]] only in that it carries\na `to` address for non-constructor transactions.\nSee below for a method listing."
					},
					"children": [
						{
							"id": 2494,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2495,
									"name": "new ContractInstanceEncoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2496,
											"name": "contractEncoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2447,
												"name": "ContractEncoder"
											}
										},
										{
											"id": 2497,
											"name": "toAddress",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2493,
										"name": "ContractInstanceEncoder"
									}
								}
							]
						},
						{
							"id": 2498,
							"name": "contractEncoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1158,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"id": 2447,
								"name": "ContractEncoder"
							}
						},
						{
							"id": 2499,
							"name": "toAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1159,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2518,
							"name": "encodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1248,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2519,
									"name": "encodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method functions identically to [[ContractEncoder.encodeTransaction]],\nexcept that, when preparing a function transaction, the `to` option is\nautomatically set to this contract instance's address.  If an explicit\n`to` address is passed as a transaction option, it will be recognized\nbut ignored.\n"
									},
									"parameters": [
										{
											"id": 2520,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										},
										{
											"id": 2521,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 2522,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2546,
												"name": "ResolveOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1995,
												"name": "Options"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2523,
							"name": "resolveAndEncode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1277,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 2524,
									"name": "resolveAndEncode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method functions identically to [[ContractEncoder.resolveAndEncode]],\nexcept that the `to` option is automatically set to this contract\ninstance's address.  If an explicit `to` address is passed as a\ntransaction option, it will be recognized but ignored.\n"
									},
									"parameters": [
										{
											"id": 2525,
											"name": "abis",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "FunctionEntry"
												}
											}
										},
										{
											"id": 2526,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 2527,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2546,
												"name": "ResolveOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2536,
												"name": "TxAndAbi"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2513,
							"name": "resolveAndWrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1225,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 2514,
									"name": "resolveAndWrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method functions identically to [[ContractEncoder.resolveAndWrap]],\nexcept that the `to` option is automatically set to this contract\ninstance's address.  If an explicit `to` address is passed as a\ntransaction option, it will be recognized but ignored.\n"
									},
									"parameters": [
										{
											"id": 2515,
											"name": "abis",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "FunctionEntry"
												}
											}
										},
										{
											"id": 2516,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 2517,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2546,
												"name": "ResolveOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1940,
												"name": "Resolution"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2504,
							"name": "wrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1185,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 2505,
									"name": "wrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectEncoder.wrap]]."
									},
									"parameters": [
										{
											"id": 2506,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Type"
											}
										},
										{
											"id": 2507,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 269,
												"name": "Value"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2500,
							"name": "wrapElementaryValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1175,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 2501,
									"name": "wrapElementaryValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[ProjectEncoder.wrapElementaryValue]]."
									},
									"parameters": [
										{
											"id": 2502,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 161,
												"name": "ElementaryType"
											}
										},
										{
											"id": 2503,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 381,
												"name": "ElementaryValue"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2508,
							"name": "wrapForTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 1201,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 2509,
									"name": "wrapForTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method functions identically to [[ContractEncoder.wrapForTransaction]],\nexcept that, when preparing a function transaction, the `to` option is\nautomatically set to this contract instance's address.  If an explicit\n`to` address is passed as a transaction option, it will be recognized\nbut ignored.\n"
									},
									"parameters": [
										{
											"id": 2510,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										},
										{
											"id": 2511,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 2512,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2546,
												"name": "ResolveOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1940,
												"name": "Resolution"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2494
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2498,
								2499
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2518,
								2523,
								2513,
								2504,
								2500,
								2508
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/encoders.ts",
							"line": 1157,
							"character": 36
						}
					]
				},
				{
					"id": 2572,
					"name": "ContractNotDeployedError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that you attempted to use address autodetection\nfor a contract that isn't deployed to the current network."
					},
					"children": [
						{
							"id": 2573,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2574,
									"name": "new ContractNotDeployedError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2575,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2576,
											"name": "networkId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2572,
										"name": "ContractNotDeployedError"
									}
								}
							]
						},
						{
							"id": 2577,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 71,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2578,
							"name": "networkId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 72,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2573
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2577,
								2578
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/errors.ts",
							"line": 70,
							"character": 37
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2563,
					"name": "ContractNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to create an\nencoder for does not appear in the project info."
					},
					"children": [
						{
							"id": 2564,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2565,
									"name": "new ContractNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2566,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2567,
											"name": "bytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2568,
											"name": "deployedBytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2563,
										"name": "ContractNotFoundError"
									}
								}
							]
						},
						{
							"id": 2570,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 125,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2569,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 124,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2571,
							"name": "deployedBytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 126,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2564
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2570,
								2569,
								2571
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/errors.ts",
							"line": 123,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2548,
					"name": "InvalidAddressError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that an invalid address was passed to one of the\ncontract instance encoder spawners ([[forContractInstance]], etc).  Valid\naddresses are those that Web3 accepts; i.e., either those with correct\nchecksums, or those that are all-lowercase or all-uppercase to deliberately\ncircumvent the checksum."
					},
					"children": [
						{
							"id": 2549,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2550,
									"name": "new InvalidAddressError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2551,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2548,
										"name": "InvalidAddressError"
									}
								}
							]
						},
						{
							"id": 2552,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 35,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2549
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2552
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/errors.ts",
							"line": 34,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2553,
					"name": "NoInternalInfoError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isProtected": true
					},
					"comment": {},
					"children": [
						{
							"id": 2554,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2555,
									"name": "new NoInternalInfoError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2553,
										"name": "NoInternalInfoError"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2554
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/errors.ts",
							"line": 18,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2579,
					"name": "NoProjectInfoError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that the user attempted to instantiate an encoder\nwith no project information (by explicitly overriding the default)."
					},
					"children": [
						{
							"id": 2580,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2581,
									"name": "new NoProjectInfoError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2579,
										"name": "NoProjectInfoError"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2580
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/errors.ts",
							"line": 7,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2371,
					"name": "ProjectEncoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The ProjectEncoder class.  Can wrap values; can also encode transactions and\nresolve overloads if sufficient information is provided.  See below for a\nmethod listing."
					},
					"children": [
						{
							"id": 2372,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2373,
									"name": "new ProjectEncoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2374,
											"name": "info",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EncoderInfoInternal"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2371,
										"name": "ProjectEncoder"
									}
								}
							]
						},
						{
							"id": 2379,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 45,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"id": 1843,
								"name": "AllocationInfo"
							}
						},
						{
							"id": 2376,
							"name": "ens",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 42,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 2378,
							"name": "ensCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 44,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "ENSCache"
							},
							"defaultValue": "..."
						},
						{
							"id": 2381,
							"name": "networkId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 47,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2375,
							"name": "provider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 41,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Provider"
							}
						},
						{
							"id": 2377,
							"name": "registryAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 43,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "..."
						},
						{
							"id": 2380,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 46,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 264,
								"name": "TypesById"
							}
						},
						{
							"id": 2408,
							"name": "driveGenerator",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 531,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2409,
									"name": "driveGenerator",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2410,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2411,
											"name": "generator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 867,
														"name": "WrapRequest"
													},
													{
														"type": "reference",
														"name": "T"
													},
													{
														"type": "reference",
														"id": 877,
														"name": "WrapResponse"
													}
												],
												"name": "Generator"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2415,
							"name": "encodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 581,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2416,
									"name": "encodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method is similar to [[wrapForTransaction]], except instead of\nreturning a [[Resolution]] object, it returns\nthe resulting transaction options, including the encoded `data`.\nNote any options not specified in a transaction options parameter\nwill be simply omitted; it is up to the caller to set these as\nappropriate afterwards.\n\nIf the transaction options parameter has a `data` option, this option will\nbe recognized but ignored.  Similarly, when encoding a contract creation,\nthe `to` option will be similarly ignored.\n\nSee [[wrapForTransaction]] for documentation of the inputs.\n"
									},
									"parameters": [
										{
											"id": 2417,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "Method"
											}
										},
										{
											"id": 2418,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 2419,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2546,
												"name": "ResolveOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1995,
												"name": "Options"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2437,
							"name": "forArtifact",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 808,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2438,
									"name": "forArtifact",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract encoder for a given contract in this project."
									},
									"parameters": [
										{
											"id": 2439,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The contract the encoder is for.  If you want to\n  encode contract creation transactions, it must have all of\n  its libraries linked.\n\n  Note: The contract must be one that the encoder knows about;\n  otherwise you will have problems.\n"
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2447,
												"name": "ContractEncoder"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2440,
							"name": "forContract",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 823,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2441,
									"name": "forContract",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract encoder for a given contract in this project."
									},
									"parameters": [
										{
											"id": 2442,
											"name": "contract",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The contract the encoder is for.  If you want to\n  encode contract creation transactions, it must have all of\n  its libraries linked.\n\n  Note: The contract must be one that the encoder knows about;\n  otherwise you will have problems.\n"
											},
											"type": {
												"type": "reference",
												"name": "ContractConstructorObject"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2447,
												"name": "ContractEncoder"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2443,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 846,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2444,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance encoder for a given contract instance."
									},
									"parameters": [
										{
											"id": 2445,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The artifact for the contract the encoder is for.  If you\n  want to encode contract creation transactions, it must have all of its\n  libraries linked.\n\n  Note: The contract must be one that the encoder knows about;\n  otherwise you will have problems."
											},
											"type": {
												"type": "reference",
												"name": "ContractObject"
											}
										},
										{
											"id": 2446,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The address of the contract instance.\n  If omitted, but the project encoder has a provider or network ID,\n  it will be autodetected.  If there is no provider or network ID,\n  it must be included.\n\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2493,
												"name": "ContractInstanceEncoder"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2382,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 52,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2383,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 1843,
										"name": "AllocationInfo"
									}
								}
							]
						},
						{
							"id": 2386,
							"name": "getNetworkId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 67,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 2387,
									"name": "getNetworkId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						},
						{
							"id": 2384,
							"name": "getUserDefinedTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 60,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 2385,
									"name": "getUserDefinedTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {
										"shortText": "Just used for testing, currently"
									},
									"type": {
										"type": "reference",
										"id": 264,
										"name": "TypesById"
									}
								}
							]
						},
						{
							"id": 2388,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 115,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 2389,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2431,
							"name": "recognizeAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 729,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 2432,
									"name": "recognizeAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2433,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 886,
												"name": "AddressWrapResponse"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2428,
							"name": "recognizeDecimal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 696,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2429,
									"name": "recognizeDecimal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2430,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 882,
										"name": "DecimalWrapResponse"
									}
								}
							]
						},
						{
							"id": 2425,
							"name": "recognizeInteger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 646,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 2426,
									"name": "recognizeInteger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2427,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 878,
										"name": "IntegerWrapResponse"
									}
								}
							]
						},
						{
							"id": 2420,
							"name": "resolveAndEncode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 622,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 2421,
									"name": "resolveAndEncode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method is similar to [[resolveAndWrap]], except instead of\nreturning a [[Resolution]] object, it returns\na pair containing the ABI for the resolved method together with\nthe resulting transaction options, including the encoded `data`.\nNote any options not specified in a transaction options parameter\nwill be simply omitted; it is up to the caller to set these as\nappropriate afterwards.\n\nIf the transaction options parameter has a `data` option, this option will\nbe recognized but ignored.\n\nSee [[wrapForTransaction]] for documentation of the inputs.\n"
									},
									"parameters": [
										{
											"id": 2422,
											"name": "methods",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1944,
													"name": "Method"
												}
											}
										},
										{
											"id": 2423,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 2424,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2546,
												"name": "ResolveOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 2536,
												"name": "TxAndAbi"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2403,
							"name": "resolveAndWrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 518,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 2404,
									"name": "resolveAndWrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method attempts to perform overload resolution given user input\nto one of several possible methods.  If the given input matches more than\none of these methods, it will attempt to select the best match.\n\nIf it is not possible for the given input to match any of the given methods,\neither a [[TypeMismatchError]] or a\n[[NoOverloadsMatchedError]] will be\nthrown.  If more than one overload matches but none can be considered the\nunique best, you will get a\n[[NoUniqueBestOverloadError]].\n\nIf the `allowOptions` flag is set in the `options` argument, the input may\ncontain an additional transaction options argument after the other\narguments.\n\nIf it is necessary to perform overload resolution by type rather than\nsimply by length, the encoder will select among the overloads that\ncould work the one it considers to be the best match.  To be the best\nmatch, it must be a best match for each argument.  An overload is\na best match for a given argument if the type it would assign that\nargument is highest-priority among all types it could assign that\nargument (selected from overloads that match overall).\n\nNote that when doing this the match checker will be somewhat stricter than\nusual; inputs for structs/tuples will not be allowed to contain extra\nkeys, and if a value is given as a [[Format.Values.Value|Value]], it\nwill only match its specific type, rather than being allowed to match\nother types as usual (unless it is itself wrapped in a type/value pair).\n\nThe overall order of priority of types is as follows:\n1. transaction options\n2. arrays\n3. structs and tuples\n4. addresses and contracts\n5. bytestrings (`bytesN` and `bytes`)\n6. external function pointers\n7. numeric types\n8. `enum`s\n9. `string`\n10. `bool`\n\n(Note that if the encoder does not know that a certain argument is\nsupposed to be an enum, it will of course just be treated as the\nunderlying numeric type.)\n\nMoreover, within each category there is a priority ordering (which is\nnot always total).  Specifically:\n* For arrays, if `S` has priority over `T`, then `S[]` has priority\n  over `T[]`, and `S[n]` has priority over `T[n]`.  Moreover, `S[n]`\n  has priority over `S[]` and so also over `T[]`.\n* Structs and tuples mostly act the same as the overall arguments list; for\n  one such type `S` to have priority over another type `T`, each\n  member type of `S` must have priority over the corresponding member type\n  of `T` (correspondence being determined by the order of the members).\n  However, if the two types `S` and `T` also have exactly the same\n  component names (and each has all of its components named), then\n  this will also be checked with correspondence by name instead of\n  position, and `S` will only be considered more specific than `T` if\n  both checks pass.\n* `bytesN` has priority over `bytesM` if `N<=M`, and has priority over\n  `bytes`\n* A numeric type `S` has priority over a numeric type `T` if the values\n  representable by `S` are a subset of those representable by `T`.\n\nIf you are not getting the overload you want, you can use explicit\ntype-value input as discussed in the documentation for [[wrap]], or you\ncan skip overload resolution and explicitly select an overload by other\nmeans.  For enums you may also specify the enum type as documented in\n[[wrap]].\n",
										"returns": "The interpretation of the input and the resolved method, as a\n  [[Resolution]] object.\n"
									},
									"parameters": [
										{
											"id": 2405,
											"name": "methods",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An array of [[Method]] objects we are\n  attempting to decide between."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 1944,
													"name": "Method"
												}
											}
										},
										{
											"id": 2406,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An array of the inputs to the transaction.  May include a\n  transaction options argument on the end if the `allowOptions` flag is\n  set."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 2407,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Contains options to control the operation of this method."
											},
											"type": {
												"type": "reference",
												"id": 2546,
												"name": "ResolveOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1940,
												"name": "Resolution"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2434,
							"name": "resolveENSName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 774,
									"character": 30
								}
							],
							"signatures": [
								{
									"id": 2435,
									"name": "resolveENSName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2436,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2412,
							"name": "respond",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 552,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 2413,
									"name": "respond",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2414,
											"name": "request",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 867,
												"name": "WrapRequest"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 877,
												"name": "WrapResponse"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2394,
							"name": "wrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 391,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 2395,
									"name": "wrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method recognizes user input for a given data type and attempts\nto interpret it as a value of that type.  It will throw a\n[[TypeMismatchError]] if it cannot do this.\n\nThe `input` argument may come in a number of forms, depending on the\ntarget data type.  A list of the specific inputs accepted for each type is\nbelow.  However first we must note a few generic forms that inputs are\naccepted in.\n\nInputs may be given as an object of the form `{ type: ..., value: ... }`\n(additional fields not allowed), where `type` is a string describing the\ntype, and `value` is anything that would be accepted for that type.  This\nform of input is not very useful with *this* method, but it is useful when\nperforming overload resolution (see [[resolveAndWrap]]) to restrict the\noverloads that will be selected from.  Note that for arrays, `type` should\nsimply be `\"array\"`; for structs and tuples, `\"struct\"` or `\"tuple\"`; for\naddresses and contracts, `\"address\"` or `\"contract\"`; for external\nfunctions, `\"function\"`; for transaction options, `\"options\"`; and for\nenums, it can be either `\"enum\"` (or the underlying uint type).  For other\nSolidity types, it should be the name of the type; note that `\"uint\"`,\n`\"int\"`, `\"fixed\"`, `\"ufixed\"`, and `\"byte\"` are accepted.\n\nNote that input in the form of a [[Format.Values.Value|Value]] is\naccepted, so long as the type is appropriate, but error results are\ntypically not accepted (exceptions are discussed below).\n\nNow then, the list of accepted inputs by type, excluding the above:\n\n**Strings**: The input may be a string (or `String`), or it may be a\n[[Format.Values.StringValue|StringValue]].  (The latter is the only\nway to input invalid UTF-8.)  Strings with invalid UTF-16 will not be\naccepted.\n\n**Bytestrings**: Bytestrings can be given in several forms.  Note that for\nall forms of input, if the specified type is `bytesN`, it is OK if the\nlength of the input is shorter than N bytes; it will automatically be\nright-padded with zero bytes in this case.  (The exception is if the input\nis a [[Format.Values.BytesValue|BytesValue]] and strict checking is\non; see [[resolveAndWrap]].)  Bytestrings may be given as `\"0x\"`-prefixed\neven-length hex strings (a `String` may be used in place of a string).\nThey may also be given as a `Uint8Array`, or anything resembling a\n`Uint8Array` -- any object with a `length` field which is a `number`, and\nwhich has fields from `0` to `length-1` all `number`s from 0 to 255, will\nbe accepted.  Input may also be given as a\n[[Format.Values.BytesValue|BytesValue]]; the specific type does not\nhave to match unless strict checking is on.  Finally, a bytestring may be\ngiven as an object with just the fields `text` and `encoding`; in this\ncase, `text` should be a string (it must not have invalid UTF-16) and\n`encoding` an encoding to encode it as.  The only supported encoding\ncurrently is `\"utf8\"`.\n\n**Integer types**: Input for integer types may take a variety of forms.\nThe input may be a `number` (or `Number`); note that if so it must be a\nsafe integer.  For larger integers, you must use other forms of input.\nFor instance, the input may be a `BigInt`.  The input may also be one\nof several recognized big number classes:\n  * [`BN`](https://github.com/indutny/bn.js)\n  * [`Big`](https://github.com/MikeMcl/Big.js)\n  * MikeMcl's [`BigNumber`](https://github.com/MikeMcl/bignumber.js)\n  * Ethers's [`BigNumber` or `FixedNumber`](https://www.npmjs.com/package/@ethersproject/bignumber)\nOf course, any numeric input, no matter the format, must be integral.\nInput may also take the form of a numeric string (or `String`).\nThe string may be decimal, but it may also be hexadecimal with `\"0x\"`\nprefix, octal with `\"0o\"` prefix, or binary with `\"0xb\"` prefix.\nYou can also use a negated hexadecimal, octal, or binary string to\nrepresent a negative number.  Whitespace before or after the number is OK.\nFor decimal strings, scientific notation (e.g. `1.1e4`) is also accepted.\nIt is also possible to affix one of the units `\"wei\"`, `\"gwei\"`,\n`\"shannon\"`, `\"finney\"`, `\"szabo\"`, or `\"ether\"` (these are case-insensitive)\nonto a decimal numeric string (you may include space inbetween the\nquantity and the unit) to act as a multiplier (where here the\nassumption is that 1 wei means the number 1).  You may also use a\nunit by itself, with no specified quantity, to mean 1 of that unit.\n(E.g., an input of `\"wei\"` will be interpreted as 1.)  Note that it's OK\nif the quantity before the unit is not itself an integer, so long as the\noverall resulting quantity is an integer; e.g., \"1.1 gwei\" is legal integer\ninput.  In addition to giving the input in any of these obviously numeric\nforms, the input may also be given a a `Uint8Array` or anything that\nmimics one (see above about bytestrings); in this case the input will\nbe interpreted as the big-endian byte representation of an unsigned\ninteger (or in other words, it will be interpreted as base 256).\nNegative numbers cannot be represented in this way.\nFinally, the input may be given as a\n[[Format.Values.UintValue|UintValue]],\n[[Format.Values.IntValue|IntValue]],\n[[Format.Values.UfixedValue|UfixedValue]],\n[[Format.Values.FixedValue|FixedValue]], or\n[[Format.Values.EnumValue|EnumValue]]; the type is not required to\nmatch unless strict checking is on (see [[resolveAndWrap]]), in which case\nthe type must match exactly.  In addition, the input may also be a\n[[Format.Errors.EnumErrorResult|EnumErrorResult]] so long as\nthe error is a\n[[Format.Errors.EnumOutOfRangeError|EnumOutOfRangeError]];\nother types of error results are not accepted.\n\n**Enums**: Enums accept all the same forms of input as integer types.\nHowever, if the encoder is aware that a particular argument or field is in\nfact an enum and not just an integer, it accepts one additional form of\ninput; the input may be a string (or `String`) containing the name of the\nenumerated option.  So, for instance, given the following Solidity code:\n```solidity\ncontract MyContract {\n  enum Ternary {\n    No, Yes, Maybe\n  }\n}\n```\nthen `\"Yes\"` would be a valid input for an enum of type\n`MyContract.Ternary`.  Moreover, `\"Ternary.Yes\"` and\n`\"MyContract.Ternary.Yes\"` would also work; these latter forms will only\nmatch enum types with the appropriate name and optionally defining\ncontract, so you can use these to restrict matching for overload\nresolution, much like type/value input.  Note these forms do not require\nthe enum to be defined inside of a contract; those defined outside of\ncontracts are supported too, so long as the encoder was initialized to\nknow about them.\n\n**Addresses and contracts**: Input may be given as a hex string\nrepresenting 20 bytes, with capitalization according to the Ethereum\naddress checksum.  The `\"0x\"` prefix is optional.  If the hex string\nis all lowercase or all uppercase, however, then the checksum check will\nbe skipped, and the input accepted regardless.  Input may also be given\nas an ICAP address; again, the checksum must be correct.  Finally, if ENS\nresolution has been configured, input may be given as an ENS name.\nAll of these may also be given as `String`s instead of strings.\nInput may also be given as an object with an `address` field, although the\ncontents of that address field must be a `\"0x\"`-prefixed hex string (not\n`String`), and not any other address format.  Input may also be given\nas a [[Format.Values.AddressValue|AddressValue]] or\n[[Format.Values.ContractValue|ContractValue]]; the specific type\ndoes not matter.\n\n**Booleans**: Almost any input is accepted (as long as it's not type/value\ninput for a different type), but how it is interpreted depends on the\ninput.  A boolean will be interpreted in the obvious way, and a `Boolean`\nwill be unwrapped.  A string will be considered true unless it is falsy or\nis equal (ignoring case) to the string `\"false\"`.  A `String` will be\nconsidered true if and only if the underlying string is.  A number will be\nconsidered true so long as it is truthy, and a `Number` will be considered\ntrue if and only if the underlying number is.  A\n[[Format.Values.BoolValue|BoolValue]] will be considered true so\nlong as it represents a true value.  Moreover, two types of\n[[Format.Errors.BoolErrorResult|BoolErrorResult]] also count as\ntrue: Those where the error is a\n[[Format.Errors.BoolOutOfRangeError|BoolOutOfRangeError]] and\nthose where the error is a\n[[Format.Errors.BoolPaddingError|BoolPaddingError]].  All other\nerror results, and all [[Format.Values.Value|Values]] that are not\n[[Format.Values.BoolValue|BoolValues]], will be rejected.  All other\ninputs will be considered true so long as they are truthy.\n\n**Decimal fixed-point types**: Input for fixed-point decimal types is\nsimilar to input for integer types.  The differences are as follows:\n  * Units are not accepted in numeric strings (or `String`s).\n  * Hexadecimal, octal, and binary strings (or `String`s) are not\n    accepted.\n  * `Uint8Array`s, or objects that mimic them, are not accepted.\n  * Numeric values do not have to be integral.\nNote that if the input is a `number` (or `Number`) or MikeMcl\n[BigNumber](https://github.com/MikeMcl/bignumber.js), it must be a finite\nvalue.  Also, the number of decimal places in the input may not exceed the\nnumber of decimal places allowed in the type.  Finally, just as integer\ntypes do not allow `number`s (or `Number`s) that are unsafe integers as\ninput, decimal types will not accept a `number` (or `Number`) as input if\nthat `number` is outside the safe range for that type, i.e., it is large\nenough that there may be loss of precision.  (This means that `1` is not\nvalid input for a `fixed128x18`!)  Using other, safer, forms of input is\nencouraged.\n\n**Arrays**: The input may be an array, or it may be a\n[[Format.Values.ArrayValue|ArrayValue]].  In the latter case,\nwhether it is static-length or dynamic-length does not need to match\n(unless strict checking is on, see [[resolveAndWrap]]).\n\n**Structs and tuples**: The input can be given either as an array or as an\nobject.  If given as an array, the elements should be the members of the\nstruct/tuple, in order.  If given as an object, it should be keyed by the\nstruct or tuple's field names; if any of the elements of the tuple are\nunnamed, then input cannot be given as an object.  (Note that if the\ntuple's fields are precisely `type` and `value`, you will either want to make\nsure you do not give `type` as a native string (a `String` instead will work),\nor else that you give your input in some other form, such as an array...)\nAdditional keys are also allowed unless strict checking is on.\nInput may also be given as a [[Format.Values.StructValue|StructValue]]\nor [[Format.Values.TupleValue|TupleValue]]; the specific type\ndoes not matter.\n\n**External function pointers**: These may be given as an object with fields\n`address` and `selector` (additional fields are allowed); the `address`\nfield may be anything that would be recognized as an address (see above),\nand the `selector` field may be anything that would be recgonized as a\n`bytes4` (see above).  Alternatively, this may be given as a bytestring\n(even length `\"0x\"`-prefixed hex string or `String`) of 24 bytes,\nspecifying the address followed by the selector; in this case, the address\ndoes not need to be checksummed.  Finally, input may of course also be\ngiven as a\n[[Format.Values.FunctionExternalValue|FunctionExternalValue]];\nits more specific type does not matter.\n\n* Transaction options: These are given as an object with fields for the\ndesired options (you can leave options out or have them be `undefined` and\nthey'll be ignored).  Note that, in order to maintain compatibility with\nolder versions of Truffle, additional keys are accepted, but there must be\nat least one key that belongs in a transaction options object.  Note that\nif any field exists, and is not `undefined`, but the value of that field\ncannot be interpreted as input of the appropriate type, the input will be\nrejected.  Otherwise, inputs for each field can be anything that the\nencoder will understand for this field.  Accepted fields are:\n  * `gas`, `gasPrice`, `value`, `nonce`: These take integer input\n    (see above).\n  * `from`, `to`: These take address input (see above)\n  * `data`: This takes `bytes` input (see above)\n  * `overwrite`: This takes boolean input (see above)\n  * `privateFor`: This one is a special case, and requires a specific\n    form of input.  Input must be an array of base64-encoded\n    bytestrings (as strings or `String`s), each with a decoded length of\n    32 bytes.\nIn addition, input may also be given as a\n[[Format.Values.OptionsValue|OptionsValue]].\n",
										"returns": "The interpreted value wrapped as a [[Format.Values.Value|Value]]\n  object.\n"
									},
									"parameters": [
										{
											"id": 2396,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The data type that the given value is to be interpreted\n  as."
											},
											"type": {
												"type": "reference",
												"id": 101,
												"name": "Type"
											}
										},
										{
											"id": 2397,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to be interpreted.  This can take a number of\n  forms depending on the data type, as documented above."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 269,
												"name": "Value"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2390,
							"name": "wrapElementaryValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 152,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 2391,
									"name": "wrapElementaryValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This is a restricted version of [[wrap]], which only handles elementary\ntypes and values (those that can be used as mapping keys in Solidity);\nit's present here for type convenience.  See the [[wrap]] documentation\nfor further information.\n"
									},
									"parameters": [
										{
											"id": 2392,
											"name": "dataType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 161,
												"name": "ElementaryType"
											}
										},
										{
											"id": 2393,
											"name": "input",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 381,
												"name": "ElementaryValue"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2398,
							"name": "wrapForTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/encoders.ts",
									"line": 422,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 2399,
									"name": "wrapForTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This method recognizes user input for a transaction.  It will throw\na [[TypeMismatchError]] if it cannot do this.\n\nIf the `allowOptions` flag is set in the `options` argument, the input may\ncontain an additional transaction options argument after the other\narguments.\n",
										"returns": "The interpretation of the input, as a\n  [[Resolution]] object.\n"
									},
									"parameters": [
										{
											"id": 2400,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Contains information about the method (or constructor) being\n  used for the transaction."
											},
											"type": {
												"type": "reference",
												"id": 1944,
												"name": "Method"
											}
										},
										{
											"id": 2401,
											"name": "inputs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An array of the inputs to the transaction.  May include a\n  transaction options argument on the end if the `allowOptions` flag is\n  set."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 2402,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Contains options to control the operation of this method."
											},
											"type": {
												"type": "reference",
												"id": 2546,
												"name": "ResolveOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 1940,
												"name": "Resolution"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2372
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2379,
								2376,
								2378,
								2381,
								2375,
								2377,
								2380
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2408,
								2415,
								2437,
								2440,
								2443,
								2382,
								2386,
								2384,
								2388,
								2431,
								2428,
								2425,
								2420,
								2403,
								2434,
								2412,
								2394,
								2390,
								2398
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/encoders.ts",
							"line": 40,
							"character": 27
						}
					]
				},
				{
					"id": 2556,
					"name": "UnlinkedContractError",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "This error indicates that you attempted to encode a contract creation\ntransaction for a contract that has not had all of its libraries linked."
					},
					"children": [
						{
							"id": 2557,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 2558,
									"name": "new UnlinkedContractError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 2559,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2560,
											"name": "bytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2556,
										"name": "UnlinkedContractError"
									}
								}
							]
						},
						{
							"id": 2562,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 50,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2561,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "encoder/lib/errors.ts",
									"line": 49,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2557
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2562,
								2561
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/errors.ts",
							"line": 48,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2528,
					"name": "EncoderSettings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type contains information needed to initialize the encoder."
					},
					"children": [
						{
							"id": 2532,
							"name": "ens",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This field can be included to enable or disable ENS resolution and specify\nhow it should be performed.  If absent, but a provider was given above,\nENS resolution will be performed using that."
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 106,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"id": 2533,
								"name": "EnsSettings"
							}
						},
						{
							"id": 2531,
							"name": "networkId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Optionally include a network ID; this is used for the same purposes as the\nprovider (see above), but won't turn on ENS resolution.",
								"text": "There is no need to include this when using a Truffle Contract based\nconstructor, as it will use the contract's network ID, but if you do include\nit, it will override that network ID.\n\nIf this is passed in addition to provider, this network ID will override the\none from provider.\n"
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 100,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2529,
							"name": "projectInfo",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Information about the project or contracts being decoded.\nThis may come in several forms; see the type documentation for\nmore information.  The simplest way to use this to set it to\n`{ artifacts: <array of artifacts in project> }`.",
								"text": "This may be left out if an artifact or contract has been passed\nin by some other means, in which case the encoder will be made\nbased purely on that single contract, but it's recommended to pass in\nproject info for all your contracts to get the encoder's full power.\n"
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 72,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"id": 1629,
								"name": "ProjectInfo"
							}
						},
						{
							"id": 2530,
							"name": "provider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Optionally include a provider; if given, this allows the encoder to know\nthe current network ID and thereby perform any necessary library linking\nwhen encoding a contract creation.  If you attempt to encode a contract\ncreation transaction for a contract that still has unlinked libraries,\nand do not provide the information needed to link them, an exception will\nbe thrown.",
								"text": "There is no need to include this when using a Truffle Contract based\nconstructor, as it will use the contract's provider, but if you do include\nit, it will override that provider.\n\nIncluding this will also turn on ENS resolution unless it is turned off in\nthe ENS settings (see below).\n"
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 88,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Provider"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2532,
								2531,
								2529,
								2530
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/types.ts",
							"line": 60,
							"character": 32
						}
					]
				},
				{
					"id": 2533,
					"name": "EnsSettings",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type indicates settings to be used for ENS resolution."
					},
					"children": [
						{
							"id": 2534,
							"name": "provider",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The provider to use for ENS resolution; set this to `null` to disable\nENS resolution.  If absent, will default to the encoders's usual provider,\nif there is one, or to `null`, if not."
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 119,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "Provider"
							}
						},
						{
							"id": 2535,
							"name": "registryAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The ENS registry address to use; if absent, will use the default one\nfor the current network.  If there is no default registry for the\ncurrent network, ENS resolution will be disabled."
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 125,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2534,
								2535
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/types.ts",
							"line": 113,
							"character": 28
						}
					]
				},
				{
					"id": 2546,
					"name": "ResolveOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type contains options to be used when preparing transactions\nor resolving overloads.  Currently the only allowed option is one for\nwhether to allow a transaction options argument on the end."
					},
					"children": [
						{
							"id": 2547,
							"name": "allowOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This field, if set to true, allows an optional transaction options\nargument after the other arguments."
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 19,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2547
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/types.ts",
							"line": 14,
							"character": 31
						}
					]
				},
				{
					"id": 2536,
					"name": "TxAndAbi",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This type is a pair containing both a set of transaction options (as might\nbe sent to web3), including `data`, and an ABI for that transaction.  Only\nfunction transactions are covered here at the moment, because this is meant\nto be used with overload resolution as the return type."
					},
					"children": [
						{
							"id": 2538,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This field holds the ABI for the transaction.  Because this is intended\nas a return type for overload resolution, only function ABI entries can go\nhere."
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 39,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FunctionEntry"
							}
						},
						{
							"id": 2537,
							"name": "tx",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This field holds the transaction options."
							},
							"sources": [
								{
									"fileName": "encoder/lib/types.ts",
									"line": 33,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"id": 1995,
								"name": "Options"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2538,
								2537
							]
						}
					],
					"sources": [
						{
							"fileName": "encoder/lib/types.ts",
							"line": 29,
							"character": 25
						}
					]
				},
				{
					"id": 48,
					"name": "forArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 231,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 49,
							"name": "forArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract encoder for a given contract artifact."
							},
							"parameters": [
								{
									"id": 50,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 51,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[EncoderSettings]] to use;\n  see the documentation for that type for more information.  If absent, the\n  encoder will be based on just the single contract provided; it is\n  recommended to pass more information to get the encoder's full power.\n\n  Note that if the artifact contains unlinked libraries, you will have to\n  pass either the `provider` or `networkId` setting in order to encode\n  contract creation transactions."
									},
									"type": {
										"type": "reference",
										"id": 2528,
										"name": "EncoderSettings"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2447,
										"name": "ContractEncoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 64,
					"name": "forArtifactAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 331,
							"character": 35
						}
					],
					"signatures": [
						{
							"id": 65,
							"name": "forArtifactAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 66,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 67,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 68,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[EncoderSettings]] to use;\n  see the documentation for that type for more information.  If absent, the\n  encoder will be based on just the single contract provided; it is\n  recommended to pass more information to get the encoder's full power.\n\n  Note that if the artifact contains unlinked libraries, you will have to\n  pass either the `provider` or `networkId` setting in order to encode\n  contract creation transactions."
									},
									"type": {
										"type": "reference",
										"id": 2528,
										"name": "EncoderSettings"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2493,
										"name": "ContractInstanceEncoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 52,
					"name": "forContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 257,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 53,
							"name": "forContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract encoder for a given contract."
							},
							"parameters": [
								{
									"id": 54,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract the encoder is for.  It should have all of\n  its libraries linked."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 55,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[EncoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the encoder will be based on\n  just the single contract provided; it is recommended to pass more\n  information to get the encoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 2528,
										"name": "EncoderSettings"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2447,
										"name": "ContractEncoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 69,
					"name": "forContractAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 356,
							"character": 35
						}
					],
					"signatures": [
						{
							"id": 70,
							"name": "forContractAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance encoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 71,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 72,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 73,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[EncoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the encoder will be based on\n  just the single contract provided; it is recommended to pass more\n  information to get the encoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 2528,
										"name": "EncoderSettings"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2493,
										"name": "ContractInstanceEncoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 74,
					"name": "forContractInstance",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 376,
							"character": 41
						}
					],
					"signatures": [
						{
							"id": 75,
							"name": "forContractInstance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance encoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 76,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract abstraction object corresponding to the contract instance."
									},
									"type": {
										"type": "reference",
										"name": "ContractInstanceObject"
									}
								},
								{
									"id": 77,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[EncoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the encoder will be based on\n  just the single contract provided; it is recommended to pass more\n  information to get the encoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 2528,
										"name": "EncoderSettings"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2493,
										"name": "ContractInstanceEncoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 56,
					"name": "forDeployedArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 281,
							"character": 41
						}
					],
					"signatures": [
						{
							"id": 57,
							"name": "forDeployedArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance encoder for a deployed contract instance.\nYou must pass in a provider or network ID to use this function."
							},
							"parameters": [
								{
									"id": 58,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 59,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[EncoderSettings]] to use, including the provider or\n  network id; see the documentation for that type for more information."
									},
									"type": {
										"type": "reference",
										"id": 2528,
										"name": "EncoderSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2493,
										"name": "ContractInstanceEncoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 60,
					"name": "forDeployedContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 301,
							"character": 41
						}
					],
					"signatures": [
						{
							"id": 61,
							"name": "forDeployedContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance encoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 62,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 63,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The [[EncoderSettings]] to use; see the documentation for\n  that type for more information.  If absent, the encoder will be based on\n  just the single contract provided; it is recommended to pass more\n  information to get the encoder's full power."
									},
									"type": {
										"type": "reference",
										"id": 2528,
										"name": "EncoderSettings"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2493,
										"name": "ContractInstanceEncoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 42,
					"name": "forProject",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 188,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 43,
							"name": "forProject",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a project encoder for the project."
							},
							"parameters": [
								{
									"id": 44,
									"name": "settings",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 2528,
										"name": "EncoderSettings"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2371,
										"name": "ProjectEncoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 45,
					"name": "forProjectInternal",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isProtected": true
					},
					"sources": [
						{
							"fileName": "encoder/lib/index.ts",
							"line": 205,
							"character": 40
						}
					],
					"signatures": [
						{
							"id": 46,
							"name": "forProjectInternal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isProtected": true
							},
							"comment": {},
							"parameters": [
								{
									"id": 47,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EncoderInfoInternal"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 2371,
										"name": "ProjectEncoder"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2447,
						2493,
						2572,
						2563,
						2548,
						2553,
						2579,
						2371,
						2556
					],
					"categories": [
						{
							"title": "Encoder",
							"children": [
								2447,
								2493,
								2371
							]
						},
						{
							"title": "Exception",
							"children": [
								2572,
								2563,
								2548,
								2553,
								2579,
								2556
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2528,
						2533,
						2546,
						2536
					],
					"categories": [
						{
							"title": "Inputs",
							"children": [
								2528,
								2533,
								2546,
								2536
							]
						}
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						48,
						64,
						52,
						69,
						74,
						56,
						60,
						42,
						45
					],
					"categories": [
						{
							"title": "Constructors",
							"children": [
								48,
								56,
								42,
								45
							]
						},
						{
							"title": "Provider-based Constructor",
							"children": [
								64
							]
						},
						{
							"title": "Truffle Contract-based Constructors",
							"children": [
								52,
								69,
								74,
								60
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "encoder/lib/index.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 1,
			"children": [
				1,
				2,
				41
			]
		}
	]
}