import * as Format from "../format";
import type { WrapResponse, IntegerWrapRequest, DecimalWrapRequest, AddressWrapRequest } from "../types";
import type { IntegerOrEnumType, IntegerOrEnumValue, DecimalType, DecimalValue, AddressLikeType, AddressLikeValue, WrapOptions } from "./types";
export declare const errorResultMessage = "Input is a wrapped result representing an error rather than a value";
export declare const checksumFailedMessage = "Address checksum failed (use all lowercase or all uppercase to circumvent)";
export declare function wrappedTypeMessage(dataType: Format.Types.Type): string;
export declare function specifiedTypeMessage(dataType: string): string;
export declare function notABytestringMessage(what: string): string;
export declare function wrongLengthMessage(what: string, expected: number, got: number): string;
export declare const byteStringPattern: RegExp;
export declare function wrapBool(dataType: Format.Types.BoolType, input: unknown, wrapOptions: WrapOptions): Format.Values.BoolValue;
export declare function wrapString(dataType: Format.Types.StringType, input: unknown, wrapOptions: WrapOptions): Format.Values.StringValue;
export declare function wrapBytes(dataType: Format.Types.BytesType, input: unknown, wrapOptions: WrapOptions): Format.Values.BytesValue;
export declare function wrapIntegerOrEnum(dataType: IntegerOrEnumType, input: unknown, wrapOptions: WrapOptions): Generator<IntegerWrapRequest, IntegerOrEnumValue, WrapResponse>;
export declare function wrapDecimal(dataType: DecimalType, input: unknown, wrapOptions: WrapOptions): Generator<DecimalWrapRequest, DecimalValue, WrapResponse>;
export declare function wrapAddress(dataType: AddressLikeType, input: unknown, wrapOptions: WrapOptions): Generator<AddressWrapRequest, AddressLikeValue, WrapResponse>;
