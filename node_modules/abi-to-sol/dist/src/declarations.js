"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectDeclarations = exports.DeclarationsCollector = void 0;
const Codec = __importStar(require("@truffle/codec"));
const visitor_1 = require("./visitor");
class DeclarationsCollector {
    visitAbi({ node: nodes }) {
        return nodes
            .map((node) => (0, visitor_1.dispatch)({ node, visitor: this }))
            .reduce(mergeDeclarations, emptyDeclarations());
    }
    visitEventEntry({ node: entry }) {
        return entry.inputs
            .map((node) => (0, visitor_1.dispatch)({ node, visitor: this }))
            .reduce(mergeDeclarations, emptyDeclarations());
    }
    visitErrorEntry({ node: entry }) {
        return entry.inputs
            .map((node) => (0, visitor_1.dispatch)({ node, visitor: this }))
            .reduce(mergeDeclarations, emptyDeclarations());
    }
    visitFunctionEntry({ node: entry, }) {
        return [...entry.inputs, ...(entry.outputs || [])]
            .map((node) => (0, visitor_1.dispatch)({ node, visitor: this }))
            .reduce(mergeDeclarations, emptyDeclarations());
    }
    visitConstructorEntry({ node: entry, }) {
        return entry.inputs
            .map((node) => (0, visitor_1.dispatch)({ node, visitor: this }))
            .reduce(mergeDeclarations, emptyDeclarations());
    }
    visitFallbackEntry({ node: entry, }) {
        return emptyDeclarations();
    }
    visitReceiveEntry({ node: entry, }) {
        return emptyDeclarations();
    }
    visitParameter({ node: parameter }) {
        if (!parameter.type.startsWith("tuple")) {
            return emptyDeclarations();
        }
        let container = "";
        const components = parameter.components || [];
        const signature = Codec.AbiData.Utils.abiTupleSignature(components);
        const declaration = {
            components: components.map(({ name, type, components }) => !components
                ? { name, type }
                : {
                    name,
                    type,
                    signature: Codec.AbiData.Utils.abiTupleSignature(components),
                }),
        };
        if ("internalType" in parameter && parameter.internalType) {
            const match = parameter.internalType.match(/struct ([^\[]+).*/);
            if (match) {
                const possiblyQualifiedIdentifier = match[1];
                const parts = possiblyQualifiedIdentifier.split(".");
                if (parts.length === 1) {
                    declaration.identifier = parts[0];
                }
                else if (parts.length === 2) {
                    container = parts[0];
                    declaration.identifier = parts[1];
                }
            }
        }
        const declarations = {
            signatureDeclarations: {
                [signature]: declaration
            },
            containerSignatures: {
                [container]: [signature]
            }
        };
        const componentDeclarations = components
            .map((component) => this.visitParameter({ node: component }))
            .reduce(mergeDeclarations, emptyDeclarations());
        return mergeDeclarations(declarations, componentDeclarations);
    }
}
exports.DeclarationsCollector = DeclarationsCollector;
const collectDeclarations = (node) => (0, visitor_1.dispatch)({
    node,
    visitor: new DeclarationsCollector(),
});
exports.collectDeclarations = collectDeclarations;
function mergeDeclarations(a, b) {
    const declarations = {
        signatureDeclarations: Object.assign(Object.assign({}, a.signatureDeclarations), b.signatureDeclarations),
        containerSignatures: Object.assign({}, a.containerSignatures)
    };
    for (const [container, signatures] of Object.entries(b.containerSignatures)) {
        const mergedSignatures = new Set([
            ...(declarations.containerSignatures[container] || []),
            ...signatures
        ]);
        declarations.containerSignatures[container] = [...mergedSignatures];
    }
    return declarations;
}
function emptyDeclarations() {
    return {
        signatureDeclarations: {},
        containerSignatures: {}
    };
}
//# sourceMappingURL=declarations.js.map